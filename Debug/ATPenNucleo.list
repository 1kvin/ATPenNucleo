
ATPenNucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107ac  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000106c  080108ec  080108ec  000208ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011958  08011958  00021958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011960  08011960  00021960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011964  08011964  00021964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000224  20000004  08011968  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000228  08011b8c  00030228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  200002c4  08011c25  000302c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000304  08011c62  00030304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000098  20000318  08011c73  00030318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001d0c  200003b0  08011d0b  000303b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200020bc  08011d0b  000320bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 17 .debug_info   000750c3  00000000  00000000  000303e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 000095dc  00000000  00000000  000a54a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003620  00000000  00000000  000aea80  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 000031f8  00000000  00000000  000b20a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  00011005  00000000  00000000  000b5298  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0002fc83  00000000  00000000  000c629d  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0010438a  00000000  00000000  000f5f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001fa2aa  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000e874  00000000  00000000  001fa328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003b0 	.word	0x200003b0
 800015c:	00000000 	.word	0x00000000
 8000160:	080108d4 	.word	0x080108d4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003b4 	.word	0x200003b4
 800017c:	080108d4 	.word	0x080108d4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <APPD_EnableCPU2+0x34>)
 8000538:	1d3c      	adds	r4, r7, #4
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000544:	c403      	stmia	r4!, {r0, r1}
 8000546:	8022      	strh	r2, [r4, #0]
 8000548:	3402      	adds	r4, #2
 800054a:	0c13      	lsrs	r3, r2, #16
 800054c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800054e:	f00d fa4d 	bl	800d9ec <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	4618      	mov	r0, r3
 8000556:	f00c fd54 	bl	800d002 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800055a:	bf00      	nop
}
 800055c:	3720      	adds	r7, #32
 800055e:	46bd      	mov	sp, r7
 8000560:	bdb0      	pop	{r4, r5, r7, pc}
 8000562:	bf00      	nop
 8000564:	080108ec 	.word	0x080108ec

08000568 <LL_C2_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <LL_C2_PWR_SetPowerMode+0x28>)
 8000572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000576:	f023 0207 	bic.w	r2, r3, #7
 800057a:	4905      	ldr	r1, [pc, #20]	; (8000590 <LL_C2_PWR_SetPowerMode+0x28>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4313      	orrs	r3, r2
 8000580:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	58000400 	.word	0x58000400

08000594 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800059c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80005a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	608b      	str	r3, [r1, #8]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80005c0:	f000 f81c 	bl	80005fc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80005c4:	4903      	ldr	r1, [pc, #12]	; (80005d4 <APPE_Init+0x18>)
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 fcd4 	bl	8000f74 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80005cc:	f000 f824 	bl	8000618 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80005d0:	bf00      	nop
}
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200008ec 	.word	0x200008ec

080005d8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN FD */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
	switch  (GPIO_Pin)
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	2b08      	cmp	r3, #8
 80005e6:	d000      	beq.n	80005ea <HAL_GPIO_EXTI_Callback+0x12>
		case BTN0_Pin:
			UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
		break;
		default:

		break;
 80005e8:	e004      	b.n	80005f4 <HAL_GPIO_EXTI_Callback+0x1c>
			UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80005ea:	2100      	movs	r1, #0
 80005ec:	2002      	movs	r0, #2
 80005ee:	f00e ff3d 	bl	800f46c <UTIL_SEQ_SetTask>
		break;
 80005f2:	bf00      	nop
	}
	return;
 80005f4:	bf00      	nop
}
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000600:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000604:	f7ff ffc6 	bl	8000594 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000608:	f00e fdf0 	bl	800f1ec <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800060c:	2004      	movs	r0, #4
 800060e:	f7ff ffab 	bl	8000568 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000612:	bf00      	nop
}
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800061e:	f00d f849 	bl	800d6b4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000622:	4a11      	ldr	r2, [pc, #68]	; (8000668 <appe_Tl_Init+0x50>)
 8000624:	2100      	movs	r1, #0
 8000626:	2008      	movs	r0, #8
 8000628:	f00e ff00 	bl	800f42c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <appe_Tl_Init+0x54>)
 800062e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <appe_Tl_Init+0x58>)
 8000632:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000634:	463b      	mov	r3, r7
 8000636:	4619      	mov	r1, r3
 8000638:	480e      	ldr	r0, [pc, #56]	; (8000674 <appe_Tl_Init+0x5c>)
 800063a:	f00c fecb 	bl	800d3d4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <appe_Tl_Init+0x60>)
 8000640:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <appe_Tl_Init+0x64>)
 8000644:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <appe_Tl_Init+0x68>)
 8000648:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800064a:	f240 533c 	movw	r3, #1340	; 0x53c
 800064e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	4618      	mov	r0, r3
 8000656:	f00d f93f 	bl	800d8d8 <TL_MM_Init>

  TL_Enable();
 800065a:	f00d f825 	bl	800d6a8 <TL_Enable>

  return;
 800065e:	bf00      	nop
}
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	0800d40d 	.word	0x0800d40d
 800066c:	20030724 	.word	0x20030724
 8000670:	08000685 	.word	0x08000685
 8000674:	0800069b 	.word	0x0800069b
 8000678:	2003093c 	.word	0x2003093c
 800067c:	20030830 	.word	0x20030830
 8000680:	200301e8 	.word	0x200301e8

08000684 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800068e:	bf00      	nop
}
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80006a2:	f7ff ff45 	bl	8000530 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80006a6:	f00d fad7 	bl	800dc58 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80006aa:	2100      	movs	r1, #0
 80006ac:	2001      	movs	r0, #1
 80006ae:	f00e fdaf 	bl	800f210 <UTIL_LPM_SetOffMode>
  return;
 80006b2:	bf00      	nop
}
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80006be:	bf00      	nop
}
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80006d2:	f04f 30ff 	mov.w	r0, #4294967295
 80006d6:	f00e fdc9 	bl	800f26c <UTIL_SEQ_Run>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80006ea:	2100      	movs	r1, #0
 80006ec:	2008      	movs	r0, #8
 80006ee:	f00e febd 	bl	800f46c <UTIL_SEQ_SetTask>
  return;
 80006f2:	bf00      	nop
}
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000702:	2002      	movs	r0, #2
 8000704:	f00e ff18 	bl	800f538 <UTIL_SEQ_SetEvt>
  return;
 8000708:	bf00      	nop
}
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000718:	2002      	movs	r0, #2
 800071a:	f00e ff2b 	bl	800f574 <UTIL_SEQ_WaitEvt>
  return;
 800071e:	bf00      	nop
}
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <LL_EXTI_EnableIT_0_31+0x24>)
 8000732:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000736:	4905      	ldr	r1, [pc, #20]	; (800074c <LL_EXTI_EnableIT_0_31+0x24>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4313      	orrs	r3, r2
 800073c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	58000800 	.word	0x58000800

08000750 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4904      	ldr	r1, [pc, #16]	; (8000770 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4313      	orrs	r3, r2
 8000762:	600b      	str	r3, [r1, #0]

}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	58000800 	.word	0x58000800

08000774 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <ReadRtcSsrValue+0x3c>)
 800077c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800077e:	b29b      	uxth	r3, r3
 8000780:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <ReadRtcSsrValue+0x3c>)
 8000784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000786:	b29b      	uxth	r3, r3
 8000788:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800078a:	e005      	b.n	8000798 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <ReadRtcSsrValue+0x3c>)
 8000792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000794:	b29b      	uxth	r3, r3
 8000796:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	429a      	cmp	r2, r3
 800079e:	d1f5      	bne.n	800078c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80007a0:	683b      	ldr	r3, [r7, #0]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40002800 	.word	0x40002800

080007b4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	460a      	mov	r2, r1
 80007be:	71fb      	strb	r3, [r7, #7]
 80007c0:	4613      	mov	r3, r2
 80007c2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80007c4:	79ba      	ldrb	r2, [r7, #6]
 80007c6:	491d      	ldr	r1, [pc, #116]	; (800083c <LinkTimerAfter+0x88>)
 80007c8:	4613      	mov	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	4413      	add	r3, r2
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	440b      	add	r3, r1
 80007d2:	3315      	adds	r3, #21
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d009      	beq.n	80007f2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80007de:	7bfa      	ldrb	r2, [r7, #15]
 80007e0:	4916      	ldr	r1, [pc, #88]	; (800083c <LinkTimerAfter+0x88>)
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	440b      	add	r3, r1
 80007ec:	3314      	adds	r3, #20
 80007ee:	79fa      	ldrb	r2, [r7, #7]
 80007f0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80007f2:	79fa      	ldrb	r2, [r7, #7]
 80007f4:	4911      	ldr	r1, [pc, #68]	; (800083c <LinkTimerAfter+0x88>)
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	440b      	add	r3, r1
 8000800:	3315      	adds	r3, #21
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <LinkTimerAfter+0x88>)
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	3314      	adds	r3, #20
 8000816:	79ba      	ldrb	r2, [r7, #6]
 8000818:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800081a:	79ba      	ldrb	r2, [r7, #6]
 800081c:	4907      	ldr	r1, [pc, #28]	; (800083c <LinkTimerAfter+0x88>)
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3315      	adds	r3, #21
 800082a:	79fa      	ldrb	r2, [r7, #7]
 800082c:	701a      	strb	r2, [r3, #0]

  return;
 800082e:	bf00      	nop
}
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000228 	.word	0x20000228

08000840 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	460a      	mov	r2, r1
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	4613      	mov	r3, r2
 800084e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <LinkTimerBefore+0xb8>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	79ba      	ldrb	r2, [r7, #6]
 8000858:	429a      	cmp	r2, r3
 800085a:	d032      	beq.n	80008c2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800085c:	79ba      	ldrb	r2, [r7, #6]
 800085e:	4927      	ldr	r1, [pc, #156]	; (80008fc <LinkTimerBefore+0xbc>)
 8000860:	4613      	mov	r3, r2
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	4413      	add	r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	440b      	add	r3, r1
 800086a:	3314      	adds	r3, #20
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000870:	7bfa      	ldrb	r2, [r7, #15]
 8000872:	4922      	ldr	r1, [pc, #136]	; (80008fc <LinkTimerBefore+0xbc>)
 8000874:	4613      	mov	r3, r2
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	4413      	add	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	440b      	add	r3, r1
 800087e:	3315      	adds	r3, #21
 8000880:	79fa      	ldrb	r2, [r7, #7]
 8000882:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000884:	79fa      	ldrb	r2, [r7, #7]
 8000886:	491d      	ldr	r1, [pc, #116]	; (80008fc <LinkTimerBefore+0xbc>)
 8000888:	4613      	mov	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4413      	add	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	440b      	add	r3, r1
 8000892:	3315      	adds	r3, #21
 8000894:	79ba      	ldrb	r2, [r7, #6]
 8000896:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	4918      	ldr	r1, [pc, #96]	; (80008fc <LinkTimerBefore+0xbc>)
 800089c:	4613      	mov	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4413      	add	r3, r2
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	440b      	add	r3, r1
 80008a6:	3314      	adds	r3, #20
 80008a8:	7bfa      	ldrb	r2, [r7, #15]
 80008aa:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80008ac:	79ba      	ldrb	r2, [r7, #6]
 80008ae:	4913      	ldr	r1, [pc, #76]	; (80008fc <LinkTimerBefore+0xbc>)
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	440b      	add	r3, r1
 80008ba:	3314      	adds	r3, #20
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80008c0:	e014      	b.n	80008ec <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80008c2:	79fa      	ldrb	r2, [r7, #7]
 80008c4:	490d      	ldr	r1, [pc, #52]	; (80008fc <LinkTimerBefore+0xbc>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	3315      	adds	r3, #21
 80008d2:	79ba      	ldrb	r2, [r7, #6]
 80008d4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80008d6:	79ba      	ldrb	r2, [r7, #6]
 80008d8:	4908      	ldr	r1, [pc, #32]	; (80008fc <LinkTimerBefore+0xbc>)
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	440b      	add	r3, r1
 80008e4:	3314      	adds	r3, #20
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	701a      	strb	r2, [r3, #0]
  return;
 80008ea:	bf00      	nop
}
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	200002b8 	.word	0x200002b8
 80008fc:	20000228 	.word	0x20000228

08000900 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800090a:	4b4e      	ldr	r3, [pc, #312]	; (8000a44 <linkTimer+0x144>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b06      	cmp	r3, #6
 8000912:	d118      	bne.n	8000946 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000914:	4b4b      	ldr	r3, [pc, #300]	; (8000a44 <linkTimer+0x144>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b4b      	ldr	r3, [pc, #300]	; (8000a48 <linkTimer+0x148>)
 800091c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800091e:	4a49      	ldr	r2, [pc, #292]	; (8000a44 <linkTimer+0x144>)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	4949      	ldr	r1, [pc, #292]	; (8000a4c <linkTimer+0x14c>)
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	440b      	add	r3, r1
 8000932:	3315      	adds	r3, #21
 8000934:	2206      	movs	r2, #6
 8000936:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000938:	4b45      	ldr	r3, [pc, #276]	; (8000a50 <linkTimer+0x150>)
 800093a:	f04f 32ff 	mov.w	r2, #4294967295
 800093e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	81fb      	strh	r3, [r7, #14]
 8000944:	e078      	b.n	8000a38 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000946:	f000 f909 	bl	8000b5c <ReturnTimeElapsed>
 800094a:	4603      	mov	r3, r0
 800094c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800094e:	79fa      	ldrb	r2, [r7, #7]
 8000950:	493e      	ldr	r1, [pc, #248]	; (8000a4c <linkTimer+0x14c>)
 8000952:	4613      	mov	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	4413      	add	r3, r2
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	440b      	add	r3, r1
 800095c:	3308      	adds	r3, #8
 800095e:	6819      	ldr	r1, [r3, #0]
 8000960:	89fb      	ldrh	r3, [r7, #14]
 8000962:	79fa      	ldrb	r2, [r7, #7]
 8000964:	4419      	add	r1, r3
 8000966:	4839      	ldr	r0, [pc, #228]	; (8000a4c <linkTimer+0x14c>)
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	4403      	add	r3, r0
 8000972:	3308      	adds	r3, #8
 8000974:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	4934      	ldr	r1, [pc, #208]	; (8000a4c <linkTimer+0x14c>)
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	440b      	add	r3, r1
 8000984:	3308      	adds	r3, #8
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <linkTimer+0x144>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4619      	mov	r1, r3
 8000992:	4a2e      	ldr	r2, [pc, #184]	; (8000a4c <linkTimer+0x14c>)
 8000994:	460b      	mov	r3, r1
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	440b      	add	r3, r1
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	4413      	add	r3, r2
 800099e:	3308      	adds	r3, #8
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d337      	bcc.n	8000a18 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <linkTimer+0x144>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80009ae:	7b7a      	ldrb	r2, [r7, #13]
 80009b0:	4926      	ldr	r1, [pc, #152]	; (8000a4c <linkTimer+0x14c>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	440b      	add	r3, r1
 80009bc:	3315      	adds	r3, #21
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80009c2:	e013      	b.n	80009ec <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80009c4:	7b7a      	ldrb	r2, [r7, #13]
 80009c6:	4921      	ldr	r1, [pc, #132]	; (8000a4c <linkTimer+0x14c>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	440b      	add	r3, r1
 80009d2:	3315      	adds	r3, #21
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80009d8:	7b7a      	ldrb	r2, [r7, #13]
 80009da:	491c      	ldr	r1, [pc, #112]	; (8000a4c <linkTimer+0x14c>)
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	3315      	adds	r3, #21
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80009ec:	7b3b      	ldrb	r3, [r7, #12]
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d00b      	beq.n	8000a0a <linkTimer+0x10a>
 80009f2:	7b3a      	ldrb	r2, [r7, #12]
 80009f4:	4915      	ldr	r1, [pc, #84]	; (8000a4c <linkTimer+0x14c>)
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	440b      	add	r3, r1
 8000a00:	3308      	adds	r3, #8
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d2dc      	bcs.n	80009c4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000a0a:	7b7a      	ldrb	r2, [r7, #13]
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fecf 	bl	80007b4 <LinkTimerAfter>
 8000a16:	e00f      	b.n	8000a38 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <linkTimer+0x144>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff0c 	bl	8000840 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <linkTimer+0x144>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <linkTimer+0x148>)
 8000a30:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <linkTimer+0x144>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000a38:	89fb      	ldrh	r3, [r7, #14]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200002b8 	.word	0x200002b8
 8000a48:	200002b9 	.word	0x200002b9
 8000a4c:	20000228 	.word	0x20000228
 8000a50:	200002bc 	.word	0x200002bc

08000a54 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	460a      	mov	r2, r1
 8000a5e:	71fb      	strb	r3, [r7, #7]
 8000a60:	4613      	mov	r3, r2
 8000a62:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000a64:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <UnlinkTimer+0xf8>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	79fa      	ldrb	r2, [r7, #7]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d111      	bne.n	8000a94 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000a70:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <UnlinkTimer+0xf8>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <UnlinkTimer+0xfc>)
 8000a78:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	4935      	ldr	r1, [pc, #212]	; (8000b54 <UnlinkTimer+0x100>)
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	440b      	add	r3, r1
 8000a88:	3315      	adds	r3, #21
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <UnlinkTimer+0xf8>)
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e03e      	b.n	8000b12 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000a94:	79fa      	ldrb	r2, [r7, #7]
 8000a96:	492f      	ldr	r1, [pc, #188]	; (8000b54 <UnlinkTimer+0x100>)
 8000a98:	4613      	mov	r3, r2
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	440b      	add	r3, r1
 8000aa2:	3314      	adds	r3, #20
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000aa8:	79fa      	ldrb	r2, [r7, #7]
 8000aaa:	492a      	ldr	r1, [pc, #168]	; (8000b54 <UnlinkTimer+0x100>)
 8000aac:	4613      	mov	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	4413      	add	r3, r2
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	440b      	add	r3, r1
 8000ab6:	3315      	adds	r3, #21
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000abc:	79f9      	ldrb	r1, [r7, #7]
 8000abe:	7bfa      	ldrb	r2, [r7, #15]
 8000ac0:	4824      	ldr	r0, [pc, #144]	; (8000b54 <UnlinkTimer+0x100>)
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	440b      	add	r3, r1
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	4403      	add	r3, r0
 8000acc:	3315      	adds	r3, #21
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2d8      	uxtb	r0, r3
 8000ad2:	4920      	ldr	r1, [pc, #128]	; (8000b54 <UnlinkTimer+0x100>)
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	440b      	add	r3, r1
 8000ade:	3315      	adds	r3, #21
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d013      	beq.n	8000b12 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000aea:	79f9      	ldrb	r1, [r7, #7]
 8000aec:	7bba      	ldrb	r2, [r7, #14]
 8000aee:	4819      	ldr	r0, [pc, #100]	; (8000b54 <UnlinkTimer+0x100>)
 8000af0:	460b      	mov	r3, r1
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	440b      	add	r3, r1
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	4403      	add	r3, r0
 8000afa:	3314      	adds	r3, #20
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2d8      	uxtb	r0, r3
 8000b00:	4914      	ldr	r1, [pc, #80]	; (8000b54 <UnlinkTimer+0x100>)
 8000b02:	4613      	mov	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	440b      	add	r3, r1
 8000b0c:	3314      	adds	r3, #20
 8000b0e:	4602      	mov	r2, r0
 8000b10:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	490f      	ldr	r1, [pc, #60]	; (8000b54 <UnlinkTimer+0x100>)
 8000b16:	4613      	mov	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4413      	add	r3, r2
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	440b      	add	r3, r1
 8000b20:	330c      	adds	r3, #12
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <UnlinkTimer+0xf8>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2b06      	cmp	r3, #6
 8000b2e:	d107      	bne.n	8000b40 <UnlinkTimer+0xec>
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d104      	bne.n	8000b40 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <UnlinkTimer+0x104>)
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000b3e:	bf00      	nop
 8000b40:	bf00      	nop
}
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	200002b8 	.word	0x200002b8
 8000b50:	200002b9 	.word	0x200002b9
 8000b54:	20000228 	.word	0x20000228
 8000b58:	200002bc 	.word	0x200002bc

08000b5c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <ReturnTimeElapsed+0x70>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6a:	d026      	beq.n	8000bba <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000b6c:	f7ff fe02 	bl	8000774 <ReadRtcSsrValue>
 8000b70:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <ReturnTimeElapsed+0x70>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d805      	bhi.n	8000b88 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <ReturnTimeElapsed+0x70>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	e00a      	b.n	8000b9e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <ReturnTimeElapsed+0x74>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <ReturnTimeElapsed+0x70>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <ReturnTimeElapsed+0x78>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	fb02 f303 	mul.w	r3, r2, r3
 8000baa:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <ReturnTimeElapsed+0x7c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	40d3      	lsrs	r3, r2
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	e001      	b.n	8000bbe <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	b29b      	uxth	r3, r3
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200002bc 	.word	0x200002bc
 8000bd0:	200003d2 	.word	0x200003d2
 8000bd4:	200003d1 	.word	0x200003d1
 8000bd8:	200003d0 	.word	0x200003d0

08000bdc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d108      	bne.n	8000bfe <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000bec:	f7ff fdc2 	bl	8000774 <ReadRtcSsrValue>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <RestartWakeupCounter+0xa8>)
 8000bf4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f003 f9d3 	bl	8003fa2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000bfc:	e03e      	b.n	8000c7c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d803      	bhi.n	8000c0c <RestartWakeupCounter+0x30>
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <RestartWakeupCounter+0xac>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d002      	beq.n	8000c12 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000c12:	bf00      	nop
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <RestartWakeupCounter+0xb0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0f7      	beq.n	8000c14 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <RestartWakeupCounter+0xb0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <RestartWakeupCounter+0xb0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000c38:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <RestartWakeupCounter+0xb4>)
 8000c3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c40:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000c42:	2003      	movs	r0, #3
 8000c44:	f003 f9bb 	bl	8003fbe <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <RestartWakeupCounter+0xb8>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	0c1b      	lsrs	r3, r3, #16
 8000c4e:	041b      	lsls	r3, r3, #16
 8000c50:	88fa      	ldrh	r2, [r7, #6]
 8000c52:	4910      	ldr	r1, [pc, #64]	; (8000c94 <RestartWakeupCounter+0xb8>)
 8000c54:	4313      	orrs	r3, r2
 8000c56:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000c58:	f7ff fd8c 	bl	8000774 <ReadRtcSsrValue>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <RestartWakeupCounter+0xa8>)
 8000c60:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <RestartWakeupCounter+0xb0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <RestartWakeupCounter+0xb0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c74:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000c76:	f3af 8000 	nop.w
  return ;
 8000c7a:	bf00      	nop
}
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200002bc 	.word	0x200002bc
 8000c88:	200003d0 	.word	0x200003d0
 8000c8c:	200003cc 	.word	0x200003cc
 8000c90:	58000800 	.word	0x58000800
 8000c94:	40002800 	.word	0x40002800

08000c98 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000c9e:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <RescheduleTimerList+0x124>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000caa:	d108      	bne.n	8000cbe <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000cac:	bf00      	nop
 8000cae:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <RescheduleTimerList+0x128>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f7      	bne.n	8000cae <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000cbe:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <RescheduleTimerList+0x128>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <RescheduleTimerList+0x128>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cd0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000cd2:	4b3c      	ldr	r3, [pc, #240]	; (8000dc4 <RescheduleTimerList+0x12c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000cd8:	7bfa      	ldrb	r2, [r7, #15]
 8000cda:	493b      	ldr	r1, [pc, #236]	; (8000dc8 <RescheduleTimerList+0x130>)
 8000cdc:	4613      	mov	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	440b      	add	r3, r1
 8000ce6:	3308      	adds	r3, #8
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000cec:	f7ff ff36 	bl	8000b5c <ReturnTimeElapsed>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d205      	bcs.n	8000d08 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d00:	4b32      	ldr	r3, [pc, #200]	; (8000dcc <RescheduleTimerList+0x134>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e04d      	b.n	8000da4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	4a31      	ldr	r2, [pc, #196]	; (8000dd0 <RescheduleTimerList+0x138>)
 8000d0c:	8812      	ldrh	r2, [r2, #0]
 8000d0e:	b292      	uxth	r2, r2
 8000d10:	4413      	add	r3, r2
 8000d12:	461a      	mov	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d906      	bls.n	8000d28 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000d1a:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <RescheduleTimerList+0x138>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000d20:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <RescheduleTimerList+0x134>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e03d      	b.n	8000da4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <RescheduleTimerList+0x134>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d38:	e034      	b.n	8000da4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000d3a:	7bfa      	ldrb	r2, [r7, #15]
 8000d3c:	4922      	ldr	r1, [pc, #136]	; (8000dc8 <RescheduleTimerList+0x130>)
 8000d3e:	4613      	mov	r3, r2
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	4413      	add	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	440b      	add	r3, r1
 8000d48:	3308      	adds	r3, #8
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d20a      	bcs.n	8000d68 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	491c      	ldr	r1, [pc, #112]	; (8000dc8 <RescheduleTimerList+0x130>)
 8000d56:	4613      	mov	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	440b      	add	r3, r1
 8000d60:	3308      	adds	r3, #8
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e013      	b.n	8000d90 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	4917      	ldr	r1, [pc, #92]	; (8000dc8 <RescheduleTimerList+0x130>)
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	440b      	add	r3, r1
 8000d76:	3308      	adds	r3, #8
 8000d78:	6819      	ldr	r1, [r3, #0]
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	1ac9      	subs	r1, r1, r3
 8000d80:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <RescheduleTimerList+0x130>)
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	4403      	add	r3, r0
 8000d8c:	3308      	adds	r3, #8
 8000d8e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	490d      	ldr	r1, [pc, #52]	; (8000dc8 <RescheduleTimerList+0x130>)
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	440b      	add	r3, r1
 8000d9e:	3315      	adds	r3, #21
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d1c7      	bne.n	8000d3a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000daa:	89bb      	ldrh	r3, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff15 	bl	8000bdc <RestartWakeupCounter>

  return ;
 8000db2:	bf00      	nop
}
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40002800 	.word	0x40002800
 8000dc0:	200003cc 	.word	0x200003cc
 8000dc4:	200002b8 	.word	0x200002b8
 8000dc8:	20000228 	.word	0x20000228
 8000dcc:	200002c0 	.word	0x200002c0
 8000dd0:	200003d4 	.word	0x200003d4

08000dd4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000dda:	f3ef 8310 	mrs	r3, PRIMASK
 8000dde:	617b      	str	r3, [r7, #20]
  return(result);
 8000de0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000de6:	4b5e      	ldr	r3, [pc, #376]	; (8000f60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	22ca      	movs	r2, #202	; 0xca
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24
 8000df0:	4b5b      	ldr	r3, [pc, #364]	; (8000f60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2253      	movs	r2, #83	; 0x53
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000dfa:	4b59      	ldr	r3, [pc, #356]	; (8000f60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	4b57      	ldr	r3, [pc, #348]	; (8000f60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e0c:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000e0e:	4b55      	ldr	r3, [pc, #340]	; (8000f64 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000e16:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e1a:	4953      	ldr	r1, [pc, #332]	; (8000f68 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	440b      	add	r3, r1
 8000e26:	330c      	adds	r3, #12
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d170      	bne.n	8000f12 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000e30:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e34:	494c      	ldr	r1, [pc, #304]	; (8000f68 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000e44:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e48:	4947      	ldr	r1, [pc, #284]	; (8000f68 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	440b      	add	r3, r1
 8000e54:	3310      	adds	r3, #16
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000e5a:	4b44      	ldr	r3, [pc, #272]	; (8000f6c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d04e      	beq.n	8000f02 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000e64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e68:	493f      	ldr	r1, [pc, #252]	; (8000f68 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	440b      	add	r3, r1
 8000e74:	330d      	adds	r3, #13
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d125      	bne.n	8000eca <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000e7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e82:	2101      	movs	r1, #1
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fde5 	bl	8000a54 <UnlinkTimer>
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000e94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e98:	4933      	ldr	r1, [pc, #204]	; (8000f68 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	440b      	add	r3, r1
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000eac:	4611      	mov	r1, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fa40 	bl	8001334 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	22ca      	movs	r2, #202	; 0xca
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2253      	movs	r2, #83	; 0x53
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
 8000ec8:	e013      	b.n	8000ef2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000ed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f9a1 	bl	8001220 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	22ca      	movs	r2, #202	; 0xca
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2253      	movs	r2, #83	; 0x53
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	69b8      	ldr	r0, [r7, #24]
 8000efc:	f000 faa0 	bl	8001440 <HW_TS_RTC_Int_AppNot>
 8000f00:	e024      	b.n	8000f4c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000f02:	f7ff fec9 	bl	8000c98 <RescheduleTimerList>
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	f383 8810 	msr	PRIMASK, r3
 8000f10:	e01c      	b.n	8000f4c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000f12:	bf00      	nop
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0f7      	beq.n	8000f14 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f38:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	22ff      	movs	r2, #255	; 0xff
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000f56:	bf00      	nop
}
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200003cc 	.word	0x200003cc
 8000f64:	200002b8 	.word	0x200002b8
 8000f68:	20000228 	.word	0x20000228
 8000f6c:	200002c0 	.word	0x200002c0
 8000f70:	58000800 	.word	0x58000800

08000f74 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000f80:	4a61      	ldr	r2, [pc, #388]	; (8001108 <HW_TS_Init+0x194>)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f86:	4b60      	ldr	r3, [pc, #384]	; (8001108 <HW_TS_Init+0x194>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	22ca      	movs	r2, #202	; 0xca
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
 8000f90:	4b5d      	ldr	r3, [pc, #372]	; (8001108 <HW_TS_Init+0x194>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2253      	movs	r2, #83	; 0x53
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000f9a:	4b5c      	ldr	r3, [pc, #368]	; (800110c <HW_TS_Init+0x198>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	4a5b      	ldr	r2, [pc, #364]	; (800110c <HW_TS_Init+0x198>)
 8000fa0:	f043 0320 	orr.w	r3, r3, #32
 8000fa4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000fa6:	4b59      	ldr	r3, [pc, #356]	; (800110c <HW_TS_Init+0x198>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	f1c3 0304 	rsb	r3, r3, #4
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b55      	ldr	r3, [pc, #340]	; (8001110 <HW_TS_Init+0x19c>)
 8000fba:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000fbc:	4b53      	ldr	r3, [pc, #332]	; (800110c <HW_TS_Init+0x198>)
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000fc4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000fc8:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	fa92 f2a2 	rbit	r2, r2
 8000fd0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	fab2 f282 	clz	r2, r2
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	40d3      	lsrs	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b4c      	ldr	r3, [pc, #304]	; (8001114 <HW_TS_Init+0x1a0>)
 8000fe4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000fe6:	4b49      	ldr	r3, [pc, #292]	; (800110c <HW_TS_Init+0x198>)
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4b48      	ldr	r3, [pc, #288]	; (8001118 <HW_TS_Init+0x1a4>)
 8000ff8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000ffa:	4b47      	ldr	r3, [pc, #284]	; (8001118 <HW_TS_Init+0x1a4>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	4a44      	ldr	r2, [pc, #272]	; (8001114 <HW_TS_Init+0x1a0>)
 8001002:	7812      	ldrb	r2, [r2, #0]
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800100c:	4a40      	ldr	r2, [pc, #256]	; (8001110 <HW_TS_Init+0x19c>)
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	40d3      	lsrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800101a:	4293      	cmp	r3, r2
 800101c:	d904      	bls.n	8001028 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800101e:	4b3f      	ldr	r3, [pc, #252]	; (800111c <HW_TS_Init+0x1a8>)
 8001020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001024:	801a      	strh	r2, [r3, #0]
 8001026:	e003      	b.n	8001030 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b3b      	ldr	r3, [pc, #236]	; (800111c <HW_TS_Init+0x1a8>)
 800102e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001030:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001034:	f7ff fb8c 	bl	8000750 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001038:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800103c:	f7ff fb74 	bl	8000728 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d143      	bne.n	80010ce <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001046:	4b36      	ldr	r3, [pc, #216]	; (8001120 <HW_TS_Init+0x1ac>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800104c:	4b35      	ldr	r3, [pc, #212]	; (8001124 <HW_TS_Init+0x1b0>)
 800104e:	f04f 32ff 	mov.w	r2, #4294967295
 8001052:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001054:	2300      	movs	r3, #0
 8001056:	75fb      	strb	r3, [r7, #23]
 8001058:	e00c      	b.n	8001074 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800105a:	7dfa      	ldrb	r2, [r7, #23]
 800105c:	4932      	ldr	r1, [pc, #200]	; (8001128 <HW_TS_Init+0x1b4>)
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	330c      	adds	r3, #12
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	3301      	adds	r3, #1
 8001072:	75fb      	strb	r3, [r7, #23]
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	2b05      	cmp	r3, #5
 8001078:	d9ef      	bls.n	800105a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800107a:	4b2c      	ldr	r3, [pc, #176]	; (800112c <HW_TS_Init+0x1b8>)
 800107c:	2206      	movs	r2, #6
 800107e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HW_TS_Init+0x194>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <HW_TS_Init+0x194>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001092:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <HW_TS_Init+0x194>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HW_TS_Init+0x194>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80010a8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <HW_TS_Init+0x1bc>)
 80010ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010b0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80010b2:	2003      	movs	r0, #3
 80010b4:	f002 ff83 	bl	8003fbe <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HW_TS_Init+0x194>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HW_TS_Init+0x194>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	e00a      	b.n	80010e4 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HW_TS_Init+0x194>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80010de:	2003      	movs	r0, #3
 80010e0:	f002 ff5f 	bl	8003fa2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HW_TS_Init+0x194>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	22ff      	movs	r2, #255	; 0xff
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80010ee:	2200      	movs	r2, #0
 80010f0:	2103      	movs	r1, #3
 80010f2:	2003      	movs	r0, #3
 80010f4:	f002 ff13 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80010f8:	2003      	movs	r0, #3
 80010fa:	f002 ff2a 	bl	8003f52 <HAL_NVIC_EnableIRQ>

  return;
 80010fe:	bf00      	nop
}
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200003cc 	.word	0x200003cc
 800110c:	40002800 	.word	0x40002800
 8001110:	200003d0 	.word	0x200003d0
 8001114:	200003d1 	.word	0x200003d1
 8001118:	200003d2 	.word	0x200003d2
 800111c:	200003d4 	.word	0x200003d4
 8001120:	200002c0 	.word	0x200002c0
 8001124:	200002bc 	.word	0x200002bc
 8001128:	20000228 	.word	0x20000228
 800112c:	200002b8 	.word	0x200002b8
 8001130:	58000800 	.word	0x58000800

08001134 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001134:	b480      	push	{r7}
 8001136:	b08b      	sub	sp, #44	; 0x2c
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	4613      	mov	r3, r2
 8001142:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800114a:	f3ef 8310 	mrs	r3, PRIMASK
 800114e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001150:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001152:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001156:	e004      	b.n	8001162 <HW_TS_Create+0x2e>
  {
    loop++;
 8001158:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800115c:	3301      	adds	r3, #1
 800115e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001162:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001166:	2b05      	cmp	r3, #5
 8001168:	d80c      	bhi.n	8001184 <HW_TS_Create+0x50>
 800116a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800116e:	492b      	ldr	r1, [pc, #172]	; (800121c <HW_TS_Create+0xe8>)
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	330c      	adds	r3, #12
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1e9      	bne.n	8001158 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001188:	2b06      	cmp	r3, #6
 800118a:	d037      	beq.n	80011fc <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800118c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001190:	4922      	ldr	r1, [pc, #136]	; (800121c <HW_TS_Create+0xe8>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	330c      	adds	r3, #12
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80011ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011b0:	491a      	ldr	r1, [pc, #104]	; (800121c <HW_TS_Create+0xe8>)
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	3310      	adds	r3, #16
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80011c2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011c6:	4915      	ldr	r1, [pc, #84]	; (800121c <HW_TS_Create+0xe8>)
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	440b      	add	r3, r1
 80011d2:	330d      	adds	r3, #13
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80011d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011dc:	490f      	ldr	r1, [pc, #60]	; (800121c <HW_TS_Create+0xe8>)
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	440b      	add	r3, r1
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011f2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011fa:	e007      	b.n	800120c <HW_TS_Create+0xd8>
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001206:	2301      	movs	r3, #1
 8001208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800120c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001210:	4618      	mov	r0, r3
 8001212:	372c      	adds	r7, #44	; 0x2c
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	20000228 	.word	0x20000228

08001220 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800122a:	f3ef 8310 	mrs	r3, PRIMASK
 800122e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001230:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001232:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001236:	2003      	movs	r0, #3
 8001238:	f002 fe99 	bl	8003f6e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800123c:	4b37      	ldr	r3, [pc, #220]	; (800131c <HW_TS_Stop+0xfc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	22ca      	movs	r2, #202	; 0xca
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
 8001246:	4b35      	ldr	r3, [pc, #212]	; (800131c <HW_TS_Stop+0xfc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2253      	movs	r2, #83	; 0x53
 800124e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	4933      	ldr	r1, [pc, #204]	; (8001320 <HW_TS_Stop+0x100>)
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	330c      	adds	r3, #12
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d148      	bne.n	80012fa <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fbf1 	bl	8000a54 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <HW_TS_Stop+0x104>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001278:	7cfb      	ldrb	r3, [r7, #19]
 800127a:	2b06      	cmp	r3, #6
 800127c:	d135      	bne.n	80012ea <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HW_TS_Stop+0x108>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128a:	d108      	bne.n	800129e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800128c:	bf00      	nop
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <HW_TS_Stop+0xfc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f7      	bne.n	800128e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <HW_TS_Stop+0xfc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HW_TS_Stop+0xfc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012b0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80012b2:	bf00      	nop
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <HW_TS_Stop+0xfc>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f7      	beq.n	80012b4 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <HW_TS_Stop+0xfc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <HW_TS_Stop+0xfc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80012d8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <HW_TS_Stop+0x10c>)
 80012dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012e0:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80012e2:	2003      	movs	r0, #3
 80012e4:	f002 fe6b 	bl	8003fbe <HAL_NVIC_ClearPendingIRQ>
 80012e8:	e007      	b.n	80012fa <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HW_TS_Stop+0x110>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	7cfa      	ldrb	r2, [r7, #19]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d001      	beq.n	80012fa <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80012f6:	f7ff fccf 	bl	8000c98 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <HW_TS_Stop+0xfc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	22ff      	movs	r2, #255	; 0xff
 8001302:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001304:	2003      	movs	r0, #3
 8001306:	f002 fe24 	bl	8003f52 <HAL_NVIC_EnableIRQ>
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001314:	bf00      	nop
}
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200003cc 	.word	0x200003cc
 8001320:	20000228 	.word	0x20000228
 8001324:	200002b8 	.word	0x200002b8
 8001328:	40002800 	.word	0x40002800
 800132c:	58000800 	.word	0x58000800
 8001330:	200002b9 	.word	0x200002b9

08001334 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001340:	79fa      	ldrb	r2, [r7, #7]
 8001342:	493b      	ldr	r1, [pc, #236]	; (8001430 <HW_TS_Start+0xfc>)
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	330c      	adds	r3, #12
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d103      	bne.n	8001360 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff60 	bl	8001220 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001360:	f3ef 8310 	mrs	r3, PRIMASK
 8001364:	60fb      	str	r3, [r7, #12]
  return(result);
 8001366:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001368:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800136a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800136c:	2003      	movs	r0, #3
 800136e:	f002 fdfe 	bl	8003f6e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001372:	4b30      	ldr	r3, [pc, #192]	; (8001434 <HW_TS_Start+0x100>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	22ca      	movs	r2, #202	; 0xca
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
 800137c:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <HW_TS_Start+0x100>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2253      	movs	r2, #83	; 0x53
 8001384:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	4929      	ldr	r1, [pc, #164]	; (8001430 <HW_TS_Start+0xfc>)
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	440b      	add	r3, r1
 8001394:	330c      	adds	r3, #12
 8001396:	2202      	movs	r2, #2
 8001398:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	4924      	ldr	r1, [pc, #144]	; (8001430 <HW_TS_Start+0xfc>)
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	440b      	add	r3, r1
 80013a8:	3308      	adds	r3, #8
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80013ae:	79fa      	ldrb	r2, [r7, #7]
 80013b0:	491f      	ldr	r1, [pc, #124]	; (8001430 <HW_TS_Start+0xfc>)
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	440b      	add	r3, r1
 80013bc:	3304      	adds	r3, #4
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fa9b 	bl	8000900 <linkTimer>
 80013ca:	4603      	mov	r3, r0
 80013cc:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HW_TS_Start+0x104>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <HW_TS_Start+0x108>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	7c7a      	ldrb	r2, [r7, #17]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d002      	beq.n	80013e6 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80013e0:	f7ff fc5a 	bl	8000c98 <RescheduleTimerList>
 80013e4:	e013      	b.n	800140e <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	4911      	ldr	r1, [pc, #68]	; (8001430 <HW_TS_Start+0xfc>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	3308      	adds	r3, #8
 80013f6:	6819      	ldr	r1, [r3, #0]
 80013f8:	8a7b      	ldrh	r3, [r7, #18]
 80013fa:	79fa      	ldrb	r2, [r7, #7]
 80013fc:	1ac9      	subs	r1, r1, r3
 80013fe:	480c      	ldr	r0, [pc, #48]	; (8001430 <HW_TS_Start+0xfc>)
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4403      	add	r3, r0
 800140a:	3308      	adds	r3, #8
 800140c:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HW_TS_Start+0x100>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	22ff      	movs	r2, #255	; 0xff
 8001416:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001418:	2003      	movs	r0, #3
 800141a:	f002 fd9a 	bl	8003f52 <HAL_NVIC_EnableIRQ>
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001428:	bf00      	nop
}
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000228 	.word	0x20000228
 8001434:	200003cc 	.word	0x200003cc
 8001438:	200002b8 	.word	0x200002b8
 800143c:	200002b9 	.word	0x200002b9

08001440 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	460b      	mov	r3, r1
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4798      	blx	r3

  return;
 8001452:	bf00      	nop
}
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <LL_RCC_LSE_SetDriveCapability>:
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146a:	f023 0218 	bic.w	r2, r3, #24
 800146e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4313      	orrs	r3, r2
 8001476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800148e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4313      	orrs	r3, r2
 800149c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800149e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4013      	ands	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <draw>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void draw(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80014be:	2200      	movs	r2, #0
 80014c0:	4959      	ldr	r1, [pc, #356]	; (8001628 <draw+0x170>)
 80014c2:	485a      	ldr	r0, [pc, #360]	; (800162c <draw+0x174>)
 80014c4:	f006 fe92 	bl	80081ec <HAL_RTC_GetTime>

	char hourStr[5];
	char minuteStr[5];
	int min = time.Minutes;
 80014c8:	4b57      	ldr	r3, [pc, #348]	; (8001628 <draw+0x170>)
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	617b      	str	r3, [r7, #20]
	int hour = time.Hours;
 80014ce:	4b56      	ldr	r3, [pc, #344]	; (8001628 <draw+0x170>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	613b      	str	r3, [r7, #16]
	if(min < 9)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	dc06      	bgt.n	80014e8 <draw+0x30>
		sprintf(minuteStr, "0%d\0", min);
 80014da:	463b      	mov	r3, r7
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	4954      	ldr	r1, [pc, #336]	; (8001630 <draw+0x178>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00e f9f3 	bl	800f8cc <siprintf>
 80014e6:	e005      	b.n	80014f4 <draw+0x3c>
	else
		sprintf(minuteStr, "%d\0", min);
 80014e8:	463b      	mov	r3, r7
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4951      	ldr	r1, [pc, #324]	; (8001634 <draw+0x17c>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00e f9ec 	bl	800f8cc <siprintf>

	if(hour < 9)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	dc07      	bgt.n	800150a <draw+0x52>
		sprintf(hourStr, "0%d\0", hour);
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	494b      	ldr	r1, [pc, #300]	; (8001630 <draw+0x178>)
 8001502:	4618      	mov	r0, r3
 8001504:	f00e f9e2 	bl	800f8cc <siprintf>
 8001508:	e006      	b.n	8001518 <draw+0x60>
	else
		sprintf(hourStr, "%d\0", hour);
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4948      	ldr	r1, [pc, #288]	; (8001634 <draw+0x17c>)
 8001512:	4618      	mov	r0, r3
 8001514:	f00e f9da 	bl	800f8cc <siprintf>

     u8g_SetFont(&u8g,u8g_font_profont12);
 8001518:	4947      	ldr	r1, [pc, #284]	; (8001638 <draw+0x180>)
 800151a:	4848      	ldr	r0, [pc, #288]	; (800163c <draw+0x184>)
 800151c:	f001 fca6 	bl	8002e6c <u8g_SetFont>
     if(bleStatus == 1)
 8001520:	4b47      	ldr	r3, [pc, #284]	; (8001640 <draw+0x188>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d109      	bne.n	800153c <draw+0x84>
    	 u8g_DrawBitmap(&u8g, 0, 0, 1, 11, bluetoothIco);
 8001528:	4b46      	ldr	r3, [pc, #280]	; (8001644 <draw+0x18c>)
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	230b      	movs	r3, #11
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	4841      	ldr	r0, [pc, #260]	; (800163c <draw+0x184>)
 8001538:	f000 feed 	bl	8002316 <u8g_DrawBitmap>

     if(ledStatus == 0)
 800153c:	4b42      	ldr	r3, [pc, #264]	; (8001648 <draw+0x190>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10a      	bne.n	800155a <draw+0xa2>
    	 u8g_DrawBitmap(&u8g, 0, 79, 2, 17, LedOffIco);
 8001544:	4b41      	ldr	r3, [pc, #260]	; (800164c <draw+0x194>)
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	2311      	movs	r3, #17
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2302      	movs	r3, #2
 800154e:	224f      	movs	r2, #79	; 0x4f
 8001550:	2100      	movs	r1, #0
 8001552:	483a      	ldr	r0, [pc, #232]	; (800163c <draw+0x184>)
 8001554:	f000 fedf 	bl	8002316 <u8g_DrawBitmap>
 8001558:	e009      	b.n	800156e <draw+0xb6>
     else
    	 u8g_DrawBitmap(&u8g, 0, 79, 2, 17, LedOnIco);
 800155a:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <draw+0x198>)
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	2311      	movs	r3, #17
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2302      	movs	r3, #2
 8001564:	224f      	movs	r2, #79	; 0x4f
 8001566:	2100      	movs	r1, #0
 8001568:	4834      	ldr	r0, [pc, #208]	; (800163c <draw+0x184>)
 800156a:	f000 fed4 	bl	8002316 <u8g_DrawBitmap>

     if(menu == 0)
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <draw+0x19c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10a      	bne.n	800158c <draw+0xd4>
         u8g_DrawBitmap(&u8g, 4, 44, 2, 32, PenIco);
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <draw+0x1a0>)
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	2320      	movs	r3, #32
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2302      	movs	r3, #2
 8001580:	222c      	movs	r2, #44	; 0x2c
 8001582:	2104      	movs	r1, #4
 8001584:	482d      	ldr	r0, [pc, #180]	; (800163c <draw+0x184>)
 8001586:	f000 fec6 	bl	8002316 <u8g_DrawBitmap>
 800158a:	e02b      	b.n	80015e4 <draw+0x12c>
     else if(menu == 1)
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <draw+0x19c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d10a      	bne.n	80015aa <draw+0xf2>
    	 u8g_DrawBitmap(&u8g, 0, 47, 2, 21, UserIco);
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <draw+0x1a4>)
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	2315      	movs	r3, #21
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2302      	movs	r3, #2
 800159e:	222f      	movs	r2, #47	; 0x2f
 80015a0:	2100      	movs	r1, #0
 80015a2:	4826      	ldr	r0, [pc, #152]	; (800163c <draw+0x184>)
 80015a4:	f000 feb7 	bl	8002316 <u8g_DrawBitmap>
 80015a8:	e01c      	b.n	80015e4 <draw+0x12c>
     else if(menu == 2)
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <draw+0x19c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d10a      	bne.n	80015c8 <draw+0x110>
    	 u8g_DrawBitmap(&u8g, 0, 50, 2, 16, LikeIco);
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <draw+0x1a8>)
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	2310      	movs	r3, #16
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2302      	movs	r3, #2
 80015bc:	2232      	movs	r2, #50	; 0x32
 80015be:	2100      	movs	r1, #0
 80015c0:	481e      	ldr	r0, [pc, #120]	; (800163c <draw+0x184>)
 80015c2:	f000 fea8 	bl	8002316 <u8g_DrawBitmap>
 80015c6:	e00d      	b.n	80015e4 <draw+0x12c>
     else if(menu == 3)
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <draw+0x19c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d109      	bne.n	80015e4 <draw+0x12c>
    	 u8g_DrawBitmap(&u8g, 0, 50, 2, 16, SettingsIco);
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <draw+0x1ac>)
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	2310      	movs	r3, #16
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	2302      	movs	r3, #2
 80015da:	2232      	movs	r2, #50	; 0x32
 80015dc:	2100      	movs	r1, #0
 80015de:	4817      	ldr	r0, [pc, #92]	; (800163c <draw+0x184>)
 80015e0:	f000 fe99 	bl	8002316 <u8g_DrawBitmap>

     u8g_DrawBitmap(&u8g, 12, 0, 1, 11, BatIco);
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <draw+0x1b0>)
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	230b      	movs	r3, #11
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2301      	movs	r3, #1
 80015ee:	2200      	movs	r2, #0
 80015f0:	210c      	movs	r1, #12
 80015f2:	4812      	ldr	r0, [pc, #72]	; (800163c <draw+0x184>)
 80015f4:	f000 fe8f 	bl	8002316 <u8g_DrawBitmap>
     u8g_DrawStr(&u8g, 2, 22, hourStr);
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	2216      	movs	r2, #22
 80015fe:	2102      	movs	r1, #2
 8001600:	480e      	ldr	r0, [pc, #56]	; (800163c <draw+0x184>)
 8001602:	f001 fb6d 	bl	8002ce0 <u8g_DrawStr>
     u8g_DrawStr(&u8g, 2, 34, minuteStr);
 8001606:	463b      	mov	r3, r7
 8001608:	2222      	movs	r2, #34	; 0x22
 800160a:	2102      	movs	r1, #2
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <draw+0x184>)
 800160e:	f001 fb67 	bl	8002ce0 <u8g_DrawStr>
     // u8g_DrawBitmap(&u8g, 1, 80, 2, 15, HomeIco);

     counter++;
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <draw+0x1b4>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <draw+0x1b4>)
 800161c:	701a      	strb	r2, [r3, #0]
   //  u8g_DrawFrame(&u8g, 0, 0, 16, 96);
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000910 	.word	0x20000910
 800162c:	200008ec 	.word	0x200008ec
 8001630:	08010908 	.word	0x08010908
 8001634:	08010910 	.word	0x08010910
 8001638:	08010d0c 	.word	0x08010d0c
 800163c:	200003d8 	.word	0x200003d8
 8001640:	20000824 	.word	0x20000824
 8001644:	08010b18 	.word	0x08010b18
 8001648:	20000415 	.word	0x20000415
 800164c:	08010b9c 	.word	0x08010b9c
 8001650:	08010bc0 	.word	0x08010bc0
 8001654:	20000416 	.word	0x20000416
 8001658:	08010be4 	.word	0x08010be4
 800165c:	08010b30 	.word	0x08010b30
 8001660:	08010b5c 	.word	0x08010b5c
 8001664:	08010b7c 	.word	0x08010b7c
 8001668:	08010b24 	.word	0x08010b24
 800166c:	20000414 	.word	0x20000414

08001670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001674:	f002 fa72 	bl	8003b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001678:	f000 f83e 	bl	80016f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167c:	f000 fa40 	bl	8001b00 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001680:	f000 f9f0 	bl	8001a64 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001684:	f000 f8ec 	bl	8001860 <MX_I2C1_Init>
  MX_LPTIM1_Init();
 8001688:	f000 f92a 	bl	80018e0 <MX_LPTIM1_Init>
  MX_QUADSPI_Init();
 800168c:	f000 f95c 	bl	8001948 <MX_QUADSPI_Init>
  MX_RF_Init();
 8001690:	f000 f980 	bl	8001994 <MX_RF_Init>
  MX_RTC_Init();
 8001694:	f000 f986 	bl	80019a4 <MX_RTC_Init>
  MX_USB_Device_Init();
 8001698:	f00d f8a2 	bl	800e7e0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_LPTIM_Encoder_Start(&hlptim1, 3);
 800169c:	2103      	movs	r1, #3
 800169e:	4812      	ldr	r0, [pc, #72]	; (80016e8 <main+0x78>)
 80016a0:	f003 fb6e 	bl	8004d80 <HAL_LPTIM_Encoder_Start>
  HAL_LPTIM_Encoder_Start_IT(&hlptim1, 3);
 80016a4:	2103      	movs	r1, #3
 80016a6:	4810      	ldr	r0, [pc, #64]	; (80016e8 <main+0x78>)
 80016a8:	f003 fbb6 	bl	8004e18 <HAL_LPTIM_Encoder_Start_IT>
  u8g_InitComFn(&u8g, &u8g_dev_ssd1306_128x32_i2c, u8g_com_hw_i2c_fn); //here we init our u8glib driver
 80016ac:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <main+0x7c>)
 80016ae:	4910      	ldr	r1, [pc, #64]	; (80016f0 <main+0x80>)
 80016b0:	4810      	ldr	r0, [pc, #64]	; (80016f4 <main+0x84>)
 80016b2:	f001 fd46 	bl	8003142 <u8g_InitComFn>
  u8g_SetRot90(&u8g);
 80016b6:	480f      	ldr	r0, [pc, #60]	; (80016f4 <main+0x84>)
 80016b8:	f002 f846 	bl	8003748 <u8g_SetRot90>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 80016bc:	f7fe ff7e 	bl	80005bc <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //ssd1306_Init();
  while (1)
  {
	  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f00d fdd2 	bl	800f26c <UTIL_SEQ_Run>
	u8g_FirstPage(&u8g);
 80016c8:	480a      	ldr	r0, [pc, #40]	; (80016f4 <main+0x84>)
 80016ca:	f001 fd52 	bl	8003172 <u8g_FirstPage>
	do
	{
		draw();
 80016ce:	f7ff fef3 	bl	80014b8 <draw>
	}
	while (u8g_NextPage(&u8g));
 80016d2:	4808      	ldr	r0, [pc, #32]	; (80016f4 <main+0x84>)
 80016d4:	f001 fd5b 	bl	800318e <u8g_NextPage>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f7      	bne.n	80016ce <main+0x5e>
	u8g_Delay(10);
 80016de:	200a      	movs	r0, #10
 80016e0:	f002 f951 	bl	8003986 <u8g_Delay>
	  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80016e4:	e7ec      	b.n	80016c0 <main+0x50>
 80016e6:	bf00      	nop
 80016e8:	200008b4 	.word	0x200008b4
 80016ec:	08003a35 	.word	0x08003a35
 80016f0:	20000014 	.word	0x20000014
 80016f4:	200003d8 	.word	0x200003d8

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0ae      	sub	sp, #184	; 0xb8
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001702:	2248      	movs	r2, #72	; 0x48
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f00d fff3 	bl	800f6f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	615a      	str	r2, [r3, #20]
 800171e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2250      	movs	r2, #80	; 0x50
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f00d ffe3 	bl	800f6f2 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f023 0303 	bic.w	r3, r3, #3
 8001746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001750:	f004 fcf8 	bl	8006144 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff fe80 	bl	800145a <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <SystemClock_Config+0x160>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001762:	4a3d      	ldr	r2, [pc, #244]	; (8001858 <SystemClock_Config+0x160>)
 8001764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <SystemClock_Config+0x160>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001776:	2327      	movs	r3, #39	; 0x27
 8001778:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800177a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800177e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001780:	2301      	movs	r3, #1
 8001782:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001788:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800178a:	2301      	movs	r3, #1
 800178c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001790:	2340      	movs	r3, #64	; 0x40
 8001792:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800179c:	2360      	movs	r3, #96	; 0x60
 800179e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017ac:	4618      	mov	r0, r3
 80017ae:	f005 f951 	bl	8006a54 <HAL_RCC_OscConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017b8:	f000 fa00 	bl	8001bbc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80017bc:	236f      	movs	r3, #111	; 0x6f
 80017be:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80017c0:	2302      	movs	r3, #2
 80017c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017dc:	2101      	movs	r1, #1
 80017de:	4618      	mov	r0, r3
 80017e0:	f005 fccc 	bl	800717c <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80017ea:	f000 f9e7 	bl	8001bbc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80017ee:	f643 1315 	movw	r3, #14613	; 0x3915
 80017f2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80017f4:	2318      	movs	r3, #24
 80017f6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80017f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80017fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001802:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001804:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001808:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800180a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800180e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001814:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_HSI;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <SystemClock_Config+0x164>)
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800181e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001822:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001828:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800182a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800182e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001830:	2300      	movs	r3, #0
 8001832:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001834:	2300      	movs	r3, #0
 8001836:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	4618      	mov	r0, r3
 800183c:	f006 f8e8 	bl	8007a10 <HAL_RCCEx_PeriphCLKConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0x152>
  {
    Error_Handler();
 8001846:	f000 f9b9 	bl	8001bbc <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800184a:	f006 fa56 	bl	8007cfa <HAL_RCCEx_EnableMSIPLLMode>
}
 800184e:	bf00      	nop
 8001850:	37b8      	adds	r7, #184	; 0xb8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	58000400 	.word	0x58000400
 800185c:	000c0008 	.word	0x000c0008

08001860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <MX_I2C1_Init+0x74>)
 8001866:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <MX_I2C1_Init+0x78>)
 8001868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_I2C1_Init+0x74>)
 800186c:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <MX_I2C1_Init+0x7c>)
 800186e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <MX_I2C1_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_I2C1_Init+0x74>)
 8001878:	2201      	movs	r2, #1
 800187a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_I2C1_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_I2C1_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_I2C1_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_I2C1_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_I2C1_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800189a:	480e      	ldr	r0, [pc, #56]	; (80018d4 <MX_I2C1_Init+0x74>)
 800189c:	f002 fd62 	bl	8004364 <HAL_I2C_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018a6:	f000 f989 	bl	8001bbc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018aa:	2100      	movs	r1, #0
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <MX_I2C1_Init+0x74>)
 80018ae:	f003 f8c5 	bl	8004a3c <HAL_I2CEx_ConfigAnalogFilter>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018b8:	f000 f980 	bl	8001bbc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018bc:	2100      	movs	r1, #0
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_I2C1_Init+0x74>)
 80018c0:	f003 f907 	bl	8004ad2 <HAL_I2CEx_ConfigDigitalFilter>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018ca:	f000 f977 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200007d8 	.word	0x200007d8
 80018d8:	40005400 	.word	0x40005400
 80018dc:	00300f38 	.word	0x00300f38

080018e0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <MX_LPTIM1_Init+0x60>)
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <MX_LPTIM1_Init+0x64>)
 80018e8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <MX_LPTIM1_Init+0x60>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <MX_LPTIM1_Init+0x60>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING_FALLING;
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <MX_LPTIM1_Init+0x60>)
 80018f8:	2204      	movs	r2, #4
 80018fa:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MX_LPTIM1_Init+0x60>)
 80018fe:	2208      	movs	r2, #8
 8001900:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MX_LPTIM1_Init+0x60>)
 8001904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001908:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <MX_LPTIM1_Init+0x60>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_LPTIM1_Init+0x60>)
 8001912:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_LPTIM1_Init+0x60>)
 800191a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <MX_LPTIM1_Init+0x60>)
 8001922:	2200      	movs	r2, #0
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_LPTIM1_Init+0x60>)
 8001928:	2200      	movs	r2, #0
 800192a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <MX_LPTIM1_Init+0x60>)
 800192e:	f003 f993 	bl	8004c58 <HAL_LPTIM_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_LPTIM1_Init+0x5c>
  {
    Error_Handler();
 8001938:	f000 f940 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200008b4 	.word	0x200008b4
 8001944:	40007c00 	.word	0x40007c00

08001948 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_QUADSPI_Init+0x44>)
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <MX_QUADSPI_Init+0x48>)
 8001950:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_QUADSPI_Init+0x44>)
 8001954:	22ff      	movs	r2, #255	; 0xff
 8001956:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_QUADSPI_Init+0x44>)
 800195a:	2201      	movs	r2, #1
 800195c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_QUADSPI_Init+0x44>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_QUADSPI_Init+0x44>)
 8001966:	2201      	movs	r2, #1
 8001968:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <MX_QUADSPI_Init+0x44>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_QUADSPI_Init+0x44>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_QUADSPI_Init+0x44>)
 8001978:	f004 fc12 	bl	80061a0 <HAL_QSPI_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001982:	f000 f91b 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000928 	.word	0x20000928
 8001990:	a0001000 	.word	0xa0001000

08001994 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019b8:	2300      	movs	r3, #0
 80019ba:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <MX_RTC_Init+0xb8>)
 80019be:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <MX_RTC_Init+0xbc>)
 80019c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <MX_RTC_Init+0xb8>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <MX_RTC_Init+0xb8>)
 80019ca:	220f      	movs	r2, #15
 80019cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <MX_RTC_Init+0xb8>)
 80019d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80019d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <MX_RTC_Init+0xb8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019dc:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <MX_RTC_Init+0xb8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <MX_RTC_Init+0xb8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <MX_RTC_Init+0xb8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019ee:	481b      	ldr	r0, [pc, #108]	; (8001a5c <MX_RTC_Init+0xb8>)
 80019f0:	f006 fa9a 	bl	8007f28 <HAL_RTC_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80019fa:	f000 f8df 	bl	8001bbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 80019fe:	230c      	movs	r3, #12
 8001a00:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 20;
 8001a02:	2314      	movs	r3, #20
 8001a04:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480f      	ldr	r0, [pc, #60]	; (8001a5c <MX_RTC_Init+0xb8>)
 8001a1e:	f006 fb21 	bl	8008064 <HAL_RTC_SetTime>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_RTC_Init+0x88>
  {
    Error_Handler();
 8001a28:	f000 f8c8 	bl	8001bbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001a30:	2301      	movs	r3, #1
 8001a32:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4619      	mov	r1, r3
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <MX_RTC_Init+0xb8>)
 8001a44:	f006 fc2e 	bl	80082a4 <HAL_RTC_SetDate>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8001a4e:	f000 f8b5 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200008ec 	.word	0x200008ec
 8001a60:	40002800 	.word	0x40002800

08001a64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001a6a:	4a24      	ldr	r2, [pc, #144]	; (8001afc <MX_USART1_UART_Init+0x98>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a7c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001a8c:	220c      	movs	r2, #12
 8001a8e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aae:	4812      	ldr	r0, [pc, #72]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001ab0:	f006 fd52 	bl	8008558 <HAL_UART_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001aba:	f000 f87f 	bl	8001bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001abe:	2100      	movs	r1, #0
 8001ac0:	480d      	ldr	r0, [pc, #52]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001ac2:	f007 f94a 	bl	8008d5a <HAL_UARTEx_SetTxFifoThreshold>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001acc:	f000 f876 	bl	8001bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4809      	ldr	r0, [pc, #36]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001ad4:	f007 f97f 	bl	8008dd6 <HAL_UARTEx_SetRxFifoThreshold>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001ade:	f000 f86d 	bl	8001bbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_USART1_UART_Init+0x94>)
 8001ae4:	f007 f900 	bl	8008ce8 <HAL_UARTEx_DisableFifoMode>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001aee:	f000 f865 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000828 	.word	0x20000828
 8001afc:	40013800 	.word	0x40013800

08001b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b14:	2004      	movs	r0, #4
 8001b16:	f7ff fcb6 	bl	8001486 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f7ff fcb3 	bl	8001486 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7ff fcb0 	bl	8001486 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b26:	2008      	movs	r0, #8
 8001b28:	f7ff fcad 	bl	8001486 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2123      	movs	r1, #35	; 0x23
 8001b30:	481e      	ldr	r0, [pc, #120]	; (8001bac <MX_GPIO_Init+0xac>)
 8001b32:	f002 fbc3 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN0_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin;
 8001b36:	2308      	movs	r3, #8
 8001b38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_GPIO_Init+0xb0>)
 8001b3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN0_GPIO_Port, &GPIO_InitStruct);
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	481b      	ldr	r0, [pc, #108]	; (8001bb4 <MX_GPIO_Init+0xb4>)
 8001b48:	f002 fa48 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b4c:	2310      	movs	r3, #16
 8001b4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4815      	ldr	r0, [pc, #84]	; (8001bb4 <MX_GPIO_Init+0xb4>)
 8001b5e:	f002 fa3d 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD1_Pin;
 8001b62:	2323      	movs	r3, #35	; 0x23
 8001b64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	480d      	ldr	r0, [pc, #52]	; (8001bac <MX_GPIO_Init+0xac>)
 8001b78:	f002 fa30 	bl	8003fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 B3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|B3_Pin;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <MX_GPIO_Init+0xb8>)
 8001b8e:	f002 fa25 	bl	8003fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2009      	movs	r0, #9
 8001b98:	f002 f9c1 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b9c:	2009      	movs	r0, #9
 8001b9e:	f002 f9d8 	bl	8003f52 <HAL_NVIC_EnableIRQ>

}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	48000400 	.word	0x48000400
 8001bb0:	10210000 	.word	0x10210000
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	48000c00 	.word	0x48000c00

08001bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_AHB2_GRP1_EnableClock>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c10:	68fb      	ldr	r3, [r7, #12]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b085      	sub	sp, #20
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c74:	68fb      	ldr	r3, [r7, #12]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b085      	sub	sp, #20
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001cb8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001cbc:	f7ff ffaf 	bl	8001c1e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	202e      	movs	r0, #46	; 0x2e
 8001cc6:	f002 f92a 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001cca:	202e      	movs	r0, #46	; 0x2e
 8001ccc:	f002 f941 	bl	8003f52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_I2C_MspInit+0x5c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d118      	bne.n	8001d28 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f7ff ff78 	bl	8001bec <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cfc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d02:	2312      	movs	r3, #18
 8001d04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	4619      	mov	r1, r3
 8001d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1c:	f002 f95e 	bl	8003fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d20:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001d24:	f7ff ff94 	bl	8001c50 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40005400 	.word	0x40005400

08001d34 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_LPTIM_MspInit+0x68>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d11e      	bne.n	8001d94 <HAL_LPTIM_MspInit+0x60>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001d56:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001d5a:	f7ff ff79 	bl	8001c50 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5e:	2004      	movs	r0, #4
 8001d60:	f7ff ff44 	bl	8001bec <LL_AHB2_GRP1_EnableClock>
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    PC2     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001d64:	2305      	movs	r3, #5
 8001d66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001d74:	2301      	movs	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4808      	ldr	r0, [pc, #32]	; (8001da0 <HAL_LPTIM_MspInit+0x6c>)
 8001d80:	f002 f92c 	bl	8003fdc <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	202f      	movs	r0, #47	; 0x2f
 8001d8a:	f002 f8c8 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001d8e:	202f      	movs	r0, #47	; 0x2f
 8001d90:	f002 f8df 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001d94:	bf00      	nop
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40007c00 	.word	0x40007c00
 8001da0:	48000800 	.word	0x48000800

08001da4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a19      	ldr	r2, [pc, #100]	; (8001e28 <HAL_QSPI_MspInit+0x84>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d12b      	bne.n	8001e1e <HAL_QSPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001dc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dca:	f7ff ff28 	bl	8001c1e <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f7ff ff0c 	bl	8001bec <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f7ff ff09 	bl	8001bec <LL_AHB2_GRP1_EnableClock>
    PA2     ------> QUADSPI_BK1_NCS
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    PA7     ------> QUADSPI_BK1_IO2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001dec:	230a      	movs	r3, #10
 8001dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	4619      	mov	r1, r3
 8001df6:	480d      	ldr	r0, [pc, #52]	; (8001e2c <HAL_QSPI_MspInit+0x88>)
 8001df8:	f002 f8f0 	bl	8003fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8001dfc:	23cc      	movs	r3, #204	; 0xcc
 8001dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e0c:	230a      	movs	r3, #10
 8001e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4619      	mov	r1, r3
 8001e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1a:	f002 f8df 	bl	8003fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3720      	adds	r7, #32
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	a0001000 	.word	0xa0001000
 8001e2c:	48000400 	.word	0x48000400

08001e30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a06      	ldr	r2, [pc, #24]	; (8001e58 <HAL_RTC_MspInit+0x28>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d105      	bne.n	8001e4e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e42:	f7ff fec2 	bl	8001bca <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001e46:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e4a:	f7ff ff01 	bl	8001c50 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40002800 	.word	0x40002800

08001e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <HAL_UART_MspInit+0x58>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d116      	bne.n	8001eac <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e82:	f7ff fefe 	bl	8001c82 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	2002      	movs	r0, #2
 8001e88:	f7ff feb0 	bl	8001bec <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e8c:	23c0      	movs	r3, #192	; 0xc0
 8001e8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <HAL_UART_MspInit+0x5c>)
 8001ea8:	f002 f898 	bl	8003fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001eac:	bf00      	nop
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40013800 	.word	0x40013800
 8001eb8:	48000400 	.word	0x48000400

08001ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <HardFault_Handler+0x4>

08001ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <MemManage_Handler+0x4>

08001ed6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <BusFault_Handler+0x4>

08001edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <UsageFault_Handler+0x4>

08001ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f10:	f001 fe7e 	bl	8003c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001f1c:	2008      	movs	r0, #8
 8001f1e:	f002 f9e5 	bl	80042ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <USB_LP_IRQHandler+0x10>)
 8001f2e:	f003 faac 	bl	800548a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20001e44 	.word	0x20001e44

08001f3c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001f40:	f002 f9ec 	bl	800431c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <LPTIM1_IRQHandler+0x18>)
 8001f4e:	f002 ffd2 	bl	8004ef6 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  menu = LPTIM1->CNT;
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <LPTIM1_IRQHandler+0x1c>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <LPTIM1_IRQHandler+0x20>)
 8001f5a:	701a      	strb	r2, [r3, #0]
//	ssd1306_Fill(Black);
//	ssd1306_SetCursor(0, 0);
//	ssd1306_WriteString(str, Font_6x8, White);
//	ssd1306_UpdateScreen();
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200008b4 	.word	0x200008b4
 8001f64:	40007c00 	.word	0x40007c00
 8001f68:	20000416 	.word	0x20000416

08001f6c <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 8001f70:	f7fe ff30 	bl	8000dd4 <HW_TS_RTC_Wakeup_Handler>
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 8001f7c:	f00c fae0 	bl	800e540 <HW_IPCC_Rx_Handler>
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 8001f88:	f00c fb12 	bl	800e5b0 <HW_IPCC_Tx_Handler>
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	e00a      	b.n	8001fb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fa2:	f3af 8000 	nop.w
 8001fa6:	4601      	mov	r1, r0
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	b2ca      	uxtb	r2, r1
 8001fb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dbf0      	blt.n	8001fa2 <_read+0x12>
	}

return len;
 8001fc0:	687b      	ldr	r3, [r7, #4]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e009      	b.n	8001ff0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	60ba      	str	r2, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	dbf1      	blt.n	8001fdc <_write+0x12>
	}
	return len;
 8001ff8:	687b      	ldr	r3, [r7, #4]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_close>:

int _close(int file)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
	return -1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800202a:	605a      	str	r2, [r3, #4]
	return 0;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_isatty>:

int _isatty(int file)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
	return 1;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
	return 0;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002074:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <_sbrk+0x5c>)
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <_sbrk+0x60>)
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <_sbrk+0x64>)
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <_sbrk+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	429a      	cmp	r2, r3
 800209a:	d207      	bcs.n	80020ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800209c:	f00d faf4 	bl	800f688 <__errno>
 80020a0:	4602      	mov	r2, r0
 80020a2:	230c      	movs	r3, #12
 80020a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	e009      	b.n	80020c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <_sbrk+0x64>)
 80020bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20030000 	.word	0x20030000
 80020cc:	00000400 	.word	0x00000400
 80020d0:	20000418 	.word	0x20000418
 80020d4:	200020c0 	.word	0x200020c0

080020d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <SystemInit+0xa0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80020e2:	4b25      	ldr	r3, [pc, #148]	; (8002178 <SystemInit+0xa0>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	4a23      	ldr	r2, [pc, #140]	; (8002178 <SystemInit+0xa0>)
 80020ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800210a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <SystemInit+0xa4>)
 8002118:	4013      	ands	r3, r2
 800211a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002124:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002128:	f023 0305 	bic.w	r3, r3, #5
 800212c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002138:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <SystemInit+0xa8>)
 800214a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <SystemInit+0xa8>)
 8002152:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800215e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002162:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00
 800217c:	faf6fefb 	.word	0xfaf6fefb
 8002180:	22041000 	.word	0x22041000

08002184 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	4a47      	ldr	r2, [pc, #284]	; (80022b4 <SystemCoreClockUpdate+0x130>)
 8002198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b0c      	cmp	r3, #12
 80021aa:	d867      	bhi.n	800227c <SystemCoreClockUpdate+0xf8>
 80021ac:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <SystemCoreClockUpdate+0x30>)
 80021ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b2:	bf00      	nop
 80021b4:	080021e9 	.word	0x080021e9
 80021b8:	0800227d 	.word	0x0800227d
 80021bc:	0800227d 	.word	0x0800227d
 80021c0:	0800227d 	.word	0x0800227d
 80021c4:	080021f1 	.word	0x080021f1
 80021c8:	0800227d 	.word	0x0800227d
 80021cc:	0800227d 	.word	0x0800227d
 80021d0:	0800227d 	.word	0x0800227d
 80021d4:	080021f9 	.word	0x080021f9
 80021d8:	0800227d 	.word	0x0800227d
 80021dc:	0800227d 	.word	0x0800227d
 80021e0:	0800227d 	.word	0x0800227d
 80021e4:	08002201 	.word	0x08002201
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80021e8:	4a33      	ldr	r2, [pc, #204]	; (80022b8 <SystemCoreClockUpdate+0x134>)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	6013      	str	r3, [r2, #0]
      break;
 80021ee:	e049      	b.n	8002284 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80021f0:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <SystemCoreClockUpdate+0x134>)
 80021f2:	4a32      	ldr	r2, [pc, #200]	; (80022bc <SystemCoreClockUpdate+0x138>)
 80021f4:	601a      	str	r2, [r3, #0]
      break;
 80021f6:	e045      	b.n	8002284 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80021f8:	4b2f      	ldr	r3, [pc, #188]	; (80022b8 <SystemCoreClockUpdate+0x134>)
 80021fa:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <SystemCoreClockUpdate+0x13c>)
 80021fc:	601a      	str	r2, [r3, #0]
      break;
 80021fe:	e041      	b.n	8002284 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	3301      	adds	r3, #1
 800221a:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d105      	bne.n	800222e <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8002222:	4a26      	ldr	r2, [pc, #152]	; (80022bc <SystemCoreClockUpdate+0x138>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e00d      	b.n	800224a <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d105      	bne.n	8002240 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8002234:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <SystemCoreClockUpdate+0x13c>)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	fbb2 f3f3 	udiv	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	e004      	b.n	800224a <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800224a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fb02 f303 	mul.w	r3, r2, r3
 800225c:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0f5b      	lsrs	r3, r3, #29
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	3301      	adds	r3, #1
 800226c:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <SystemCoreClockUpdate+0x134>)
 8002278:	6013      	str	r3, [r2, #0]
      break;
 800227a:	e003      	b.n	8002284 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 800227c:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <SystemCoreClockUpdate+0x134>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	6013      	str	r3, [r2, #0]
      break;
 8002282:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <SystemCoreClockUpdate+0x140>)
 8002292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002296:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <SystemCoreClockUpdate+0x134>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <SystemCoreClockUpdate+0x134>)
 80022a4:	6013      	str	r3, [r2, #0]

}
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	08010c84 	.word	0x08010c84
 80022b8:	20000004 	.word	0x20000004
 80022bc:	00f42400 	.word	0x00f42400
 80022c0:	01e84800 	.word	0x01e84800
 80022c4:	08010c24 	.word	0x08010c24

080022c8 <u8g_DrawHBitmap>:
*/

#include "u8g.h"

void u8g_DrawHBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const uint8_t *bitmap)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	4608      	mov	r0, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	70fb      	strb	r3, [r7, #3]
 80022da:	460b      	mov	r3, r1
 80022dc:	70bb      	strb	r3, [r7, #2]
 80022de:	4613      	mov	r3, r2
 80022e0:	707b      	strb	r3, [r7, #1]
  while( cnt > 0 )
 80022e2:	e011      	b.n	8002308 <u8g_DrawHBitmap+0x40>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, *bitmap);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	78ba      	ldrb	r2, [r7, #2]
 80022ea:	78f9      	ldrb	r1, [r7, #3]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2300      	movs	r3, #0
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 ff63 	bl	80031bc <u8g_Draw8Pixel>
    bitmap++;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	3301      	adds	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
    cnt--;
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	3b01      	subs	r3, #1
 8002300:	707b      	strb	r3, [r7, #1]
    x+=8;
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	3308      	adds	r3, #8
 8002306:	70fb      	strb	r3, [r7, #3]
  while( cnt > 0 )
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ea      	bne.n	80022e4 <u8g_DrawHBitmap+0x1c>
  }
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <u8g_DrawBitmap>:

void u8g_DrawBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const uint8_t *bitmap)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af02      	add	r7, sp, #8
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	4608      	mov	r0, r1
 8002320:	4611      	mov	r1, r2
 8002322:	461a      	mov	r2, r3
 8002324:	4603      	mov	r3, r0
 8002326:	70fb      	strb	r3, [r7, #3]
 8002328:	460b      	mov	r3, r1
 800232a:	70bb      	strb	r3, [r7, #2]
 800232c:	4613      	mov	r3, r2
 800232e:	707b      	strb	r3, [r7, #1]
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8002330:	787b      	ldrb	r3, [r7, #1]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	b2d8      	uxtb	r0, r3
 8002336:	78ba      	ldrb	r2, [r7, #2]
 8002338:	78f9      	ldrb	r1, [r7, #3]
 800233a:	7c3b      	ldrb	r3, [r7, #16]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	4603      	mov	r3, r0
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f81f 	bl	8002384 <u8g_IsBBXIntersection>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d017      	beq.n	800237c <u8g_DrawBitmap+0x66>
    return;
  while( h > 0 )
 800234c:	e012      	b.n	8002374 <u8g_DrawBitmap+0x5e>
  {
    u8g_DrawHBitmap(u8g, x, y, cnt, bitmap);
 800234e:	7878      	ldrb	r0, [r7, #1]
 8002350:	78ba      	ldrb	r2, [r7, #2]
 8002352:	78f9      	ldrb	r1, [r7, #3]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	4603      	mov	r3, r0
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffb4 	bl	80022c8 <u8g_DrawHBitmap>
    bitmap += cnt;
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4413      	add	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
    y++;
 8002368:	78bb      	ldrb	r3, [r7, #2]
 800236a:	3301      	adds	r3, #1
 800236c:	70bb      	strb	r3, [r7, #2]
    h--;
 800236e:	7c3b      	ldrb	r3, [r7, #16]
 8002370:	3b01      	subs	r3, #1
 8002372:	743b      	strb	r3, [r7, #16]
  while( h > 0 )
 8002374:	7c3b      	ldrb	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1e9      	bne.n	800234e <u8g_DrawBitmap+0x38>
 800237a:	e000      	b.n	800237e <u8g_DrawBitmap+0x68>
    return;
 800237c:	bf00      	nop
  }
}
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8002384:	b490      	push	{r4, r7}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	4603      	mov	r3, r0
 8002394:	70fb      	strb	r3, [r7, #3]
 8002396:	460b      	mov	r3, r1
 8002398:	70bb      	strb	r3, [r7, #2]
 800239a:	4613      	mov	r3, r2
 800239c:	707b      	strb	r3, [r7, #1]
  register u8g_uint_t tmp;
  tmp = y;
 800239e:	78bc      	ldrb	r4, [r7, #2]
  tmp += h;
 80023a0:	7e3b      	ldrb	r3, [r7, #24]
 80023a2:	4423      	add	r3, r4
 80023a4:	b2dc      	uxtb	r4, r3
  tmp--;
 80023a6:	4623      	mov	r3, r4
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b2dc      	uxtb	r4, r3
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80023b8:	73fa      	strb	r2, [r7, #15]
 80023ba:	73bb      	strb	r3, [r7, #14]
 80023bc:	78bb      	ldrb	r3, [r7, #2]
 80023be:	737b      	strb	r3, [r7, #13]
 80023c0:	4623      	mov	r3, r4
 80023c2:	733b      	strb	r3, [r7, #12]
  if ( v0 <= a1 )
 80023c4:	7bba      	ldrb	r2, [r7, #14]
 80023c6:	7b7b      	ldrb	r3, [r7, #13]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d30d      	bcc.n	80023e8 <u8g_IsBBXIntersection+0x64>
    if ( v1 >= a0 )
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	7b3b      	ldrb	r3, [r7, #12]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d801      	bhi.n	80023d8 <u8g_IsBBXIntersection+0x54>
      return 1;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e014      	b.n	8002402 <u8g_IsBBXIntersection+0x7e>
      if ( v0 > v1 )
 80023d8:	7b7a      	ldrb	r2, [r7, #13]
 80023da:	7b3b      	ldrb	r3, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d901      	bls.n	80023e4 <u8g_IsBBXIntersection+0x60>
	return 1;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e00e      	b.n	8002402 <u8g_IsBBXIntersection+0x7e>
	return 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e00c      	b.n	8002402 <u8g_IsBBXIntersection+0x7e>
    if ( v1 >= a0 )
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	7b3b      	ldrb	r3, [r7, #12]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d807      	bhi.n	8002400 <u8g_IsBBXIntersection+0x7c>
      if ( v0 > v1 )
 80023f0:	7b7a      	ldrb	r2, [r7, #13]
 80023f2:	7b3b      	ldrb	r3, [r7, #12]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d901      	bls.n	80023fc <u8g_IsBBXIntersection+0x78>
	return 1;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e002      	b.n	8002402 <u8g_IsBBXIntersection+0x7e>
	return 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e000      	b.n	8002402 <u8g_IsBBXIntersection+0x7e>
      return 0;
 8002400:	2300      	movs	r3, #0
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <u8g_IsBBXIntersection+0x86>
    return 0; 
 8002406:	2300      	movs	r3, #0
 8002408:	e032      	b.n	8002470 <u8g_IsBBXIntersection+0xec>
  
  tmp = x;
 800240a:	78fc      	ldrb	r4, [r7, #3]
  tmp += w;
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	4423      	add	r3, r4
 8002410:	b2dc      	uxtb	r4, r3
  tmp--;
 8002412:	4623      	mov	r3, r4
 8002414:	3b01      	subs	r3, #1
 8002416:	b2dc      	uxtb	r4, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002424:	72fa      	strb	r2, [r7, #11]
 8002426:	72bb      	strb	r3, [r7, #10]
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	727b      	strb	r3, [r7, #9]
 800242c:	4623      	mov	r3, r4
 800242e:	723b      	strb	r3, [r7, #8]
  if ( v0 <= a1 )
 8002430:	7aba      	ldrb	r2, [r7, #10]
 8002432:	7a7b      	ldrb	r3, [r7, #9]
 8002434:	429a      	cmp	r2, r3
 8002436:	d30d      	bcc.n	8002454 <u8g_IsBBXIntersection+0xd0>
    if ( v1 >= a0 )
 8002438:	7afa      	ldrb	r2, [r7, #11]
 800243a:	7a3b      	ldrb	r3, [r7, #8]
 800243c:	429a      	cmp	r2, r3
 800243e:	d801      	bhi.n	8002444 <u8g_IsBBXIntersection+0xc0>
      return 1;
 8002440:	2301      	movs	r3, #1
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8002442:	e014      	b.n	800246e <u8g_IsBBXIntersection+0xea>
      if ( v0 > v1 )
 8002444:	7a7a      	ldrb	r2, [r7, #9]
 8002446:	7a3b      	ldrb	r3, [r7, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	d901      	bls.n	8002450 <u8g_IsBBXIntersection+0xcc>
	return 1;
 800244c:	2301      	movs	r3, #1
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 800244e:	e00e      	b.n	800246e <u8g_IsBBXIntersection+0xea>
	return 0;
 8002450:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8002452:	e00c      	b.n	800246e <u8g_IsBBXIntersection+0xea>
    if ( v1 >= a0 )
 8002454:	7afa      	ldrb	r2, [r7, #11]
 8002456:	7a3b      	ldrb	r3, [r7, #8]
 8002458:	429a      	cmp	r2, r3
 800245a:	d807      	bhi.n	800246c <u8g_IsBBXIntersection+0xe8>
      if ( v0 > v1 )
 800245c:	7a7a      	ldrb	r2, [r7, #9]
 800245e:	7a3b      	ldrb	r3, [r7, #8]
 8002460:	429a      	cmp	r2, r3
 8002462:	d901      	bls.n	8002468 <u8g_IsBBXIntersection+0xe4>
	return 1;
 8002464:	2301      	movs	r3, #1
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8002466:	e002      	b.n	800246e <u8g_IsBBXIntersection+0xea>
	return 0;
 8002468:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 800246a:	e000      	b.n	800246e <u8g_IsBBXIntersection+0xea>
      return 0;
 800246c:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 800246e:	bf00      	nop
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bc90      	pop	{r4, r7}
 8002478:	4770      	bx	lr

0800247a <u8g_InitCom>:
*/

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 800247a:	b590      	push	{r4, r7, lr}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	4613      	mov	r3, r2
 8002486:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	689c      	ldr	r4, [r3, #8]
 800248c:	79fa      	ldrb	r2, [r7, #7]
 800248e:	2300      	movs	r3, #0
 8002490:	2101      	movs	r1, #1
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	47a0      	blx	r4
 8002496:	4603      	mov	r3, r0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	bd90      	pop	{r4, r7, pc}

080024a0 <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	689c      	ldr	r4, [r3, #8]
 80024b2:	79fa      	ldrb	r2, [r7, #7]
 80024b4:	2300      	movs	r3, #0
 80024b6:	2103      	movs	r1, #3
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	47a0      	blx	r4
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd90      	pop	{r4, r7, pc}

080024c4 <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	689c      	ldr	r4, [r3, #8]
 80024d2:	2300      	movs	r3, #0
 80024d4:	2200      	movs	r2, #0
 80024d6:	2104      	movs	r1, #4
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	47a0      	blx	r4
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd90      	pop	{r4, r7, pc}

080024e4 <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689c      	ldr	r4, [r3, #8]
 80024f2:	2300      	movs	r3, #0
 80024f4:	2201      	movs	r2, #1
 80024f6:	2104      	movs	r1, #4
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	47a0      	blx	r4
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bd90      	pop	{r4, r7, pc}

08002504 <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	689c      	ldr	r4, [r3, #8]
 8002516:	79fa      	ldrb	r2, [r7, #7]
 8002518:	2300      	movs	r3, #0
 800251a:	2102      	movs	r1, #2
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	47a0      	blx	r4
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bd90      	pop	{r4, r7, pc}

08002528 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	689c      	ldr	r4, [r3, #8]
 800253a:	79fa      	ldrb	r2, [r7, #7]
 800253c:	2300      	movs	r3, #0
 800253e:	2105      	movs	r1, #5
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	47a0      	blx	r4
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bd90      	pop	{r4, r7, pc}

0800254e <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 800254e:	b590      	push	{r4, r7, lr}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	4613      	mov	r3, r2
 800255c:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	689c      	ldr	r4, [r3, #8]
 8002562:	79fa      	ldrb	r2, [r7, #7]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2106      	movs	r1, #6
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	47a0      	blx	r4
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bd90      	pop	{r4, r7, pc}

08002576 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
  uint8_t is_escape = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	75fb      	strb	r3, [r7, #23]
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	75bb      	strb	r3, [r7, #22]
    if ( is_escape == 0 )
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d110      	bne.n	80025b4 <u8g_WriteEscSeqP+0x3e>
    {
      if ( value != 255 )
 8002592:	7dbb      	ldrb	r3, [r7, #22]
 8002594:	2bff      	cmp	r3, #255	; 0xff
 8002596:	d00a      	beq.n	80025ae <u8g_WriteEscSeqP+0x38>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8002598:	7dbb      	ldrb	r3, [r7, #22]
 800259a:	461a      	mov	r2, r3
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f7ff ffc2 	bl	8002528 <u8g_WriteByte>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d160      	bne.n	800266c <u8g_WriteEscSeqP+0xf6>
          return 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e064      	b.n	8002678 <u8g_WriteEscSeqP+0x102>
      }
      else
      {
        is_escape = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
 80025b2:	e05b      	b.n	800266c <u8g_WriteEscSeqP+0xf6>
      }
    }
    else
    {
      if ( value == 255 )
 80025b4:	7dbb      	ldrb	r3, [r7, #22]
 80025b6:	2bff      	cmp	r3, #255	; 0xff
 80025b8:	d10a      	bne.n	80025d0 <u8g_WriteEscSeqP+0x5a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 80025ba:	7dbb      	ldrb	r3, [r7, #22]
 80025bc:	461a      	mov	r2, r3
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff ffb1 	bl	8002528 <u8g_WriteByte>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d14d      	bne.n	8002668 <u8g_WriteEscSeqP+0xf2>
          return 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e053      	b.n	8002678 <u8g_WriteEscSeqP+0x102>
      }
      else if ( value == 254 )
 80025d0:	7dbb      	ldrb	r3, [r7, #22]
 80025d2:	2bfe      	cmp	r3, #254	; 0xfe
 80025d4:	d04e      	beq.n	8002674 <u8g_WriteEscSeqP+0xfe>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 80025d6:	7dbb      	ldrb	r3, [r7, #22]
 80025d8:	2bef      	cmp	r3, #239	; 0xef
 80025da:	d845      	bhi.n	8002668 <u8g_WriteEscSeqP+0xf2>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 80025dc:	7dbb      	ldrb	r3, [r7, #22]
 80025de:	2bdf      	cmp	r3, #223	; 0xdf
 80025e0:	d909      	bls.n	80025f6 <u8g_WriteEscSeqP+0x80>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 80025e2:	7dbb      	ldrb	r3, [r7, #22]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f7ff ff88 	bl	8002504 <u8g_SetAddress>
 80025f4:	e038      	b.n	8002668 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xd0 )
 80025f6:	7dbb      	ldrb	r3, [r7, #22]
 80025f8:	2bcf      	cmp	r3, #207	; 0xcf
 80025fa:	d909      	bls.n	8002610 <u8g_WriteEscSeqP+0x9a>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 80025fc:	7dbb      	ldrb	r3, [r7, #22]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f7ff ff49 	bl	80024a0 <u8g_SetChipSelect>
 800260e:	e02b      	b.n	8002668 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xc0 )
 8002610:	7dbb      	ldrb	r3, [r7, #22]
 8002612:	2bbf      	cmp	r3, #191	; 0xbf
 8002614:	d91c      	bls.n	8002650 <u8g_WriteEscSeqP+0xda>
      {
        u8g_SetResetLow(u8g, dev);
 8002616:	68b9      	ldr	r1, [r7, #8]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7ff ff53 	bl	80024c4 <u8g_SetResetLow>
        value &= 0x0f;
 800261e:	7dbb      	ldrb	r3, [r7, #22]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	75bb      	strb	r3, [r7, #22]
        value <<= 4;
 8002626:	7dbb      	ldrb	r3, [r7, #22]
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	75bb      	strb	r3, [r7, #22]
        value+=2;
 800262c:	7dbb      	ldrb	r3, [r7, #22]
 800262e:	3302      	adds	r3, #2
 8002630:	75bb      	strb	r3, [r7, #22]
        u8g_Delay(value);
 8002632:	7dbb      	ldrb	r3, [r7, #22]
 8002634:	b29b      	uxth	r3, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f001 f9a5 	bl	8003986 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7ff ff50 	bl	80024e4 <u8g_SetResetHigh>
        u8g_Delay(value);
 8002644:	7dbb      	ldrb	r3, [r7, #22]
 8002646:	b29b      	uxth	r3, r3
 8002648:	4618      	mov	r0, r3
 800264a:	f001 f99c 	bl	8003986 <u8g_Delay>
 800264e:	e00b      	b.n	8002668 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xbe )
 8002650:	7dbb      	ldrb	r3, [r7, #22]
 8002652:	2bbd      	cmp	r3, #189	; 0xbd
 8002654:	d808      	bhi.n	8002668 <u8g_WriteEscSeqP+0xf2>
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 8002656:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800265a:	2b00      	cmp	r3, #0
 800265c:	db04      	blt.n	8002668 <u8g_WriteEscSeqP+0xf2>
      {
        u8g_Delay(value);
 800265e:	7dbb      	ldrb	r3, [r7, #22]
 8002660:	b29b      	uxth	r3, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f001 f98f 	bl	8003986 <u8g_Delay>
      }
      is_escape = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	75fb      	strb	r3, [r7, #23]
    }
    esc_seq++;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3301      	adds	r3, #1
 8002670:	607b      	str	r3, [r7, #4]
    value = u8g_pgm_read(esc_seq);
 8002672:	e788      	b.n	8002586 <u8g_WriteEscSeqP+0x10>
        break;
 8002674:	bf00      	nop
  }
  return 1;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <u8g_com_null_fn>:
*/

#include "u8g.h"

uint8_t u8g_com_null_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	72fb      	strb	r3, [r7, #11]
 800268e:	4613      	mov	r3, r2
 8002690:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002692:	7afb      	ldrb	r3, [r7, #11]
 8002694:	2b06      	cmp	r3, #6
 8002696:	d811      	bhi.n	80026bc <u8g_com_null_fn+0x3c>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <u8g_com_null_fn+0x20>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026bd 	.word	0x080026bd
 80026a4:	080026bd 	.word	0x080026bd
 80026a8:	080026bd 	.word	0x080026bd
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	080026bd 	.word	0x080026bd
 80026b4:	080026bd 	.word	0x080026bd
 80026b8:	080026bd 	.word	0x080026bd
    case U8G_COM_MSG_WRITE_BYTE:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
 80026bc:	2301      	movs	r3, #1
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop

080026cc <u8g_dev_ssd1306_128x32_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x32_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	71fb      	strb	r3, [r7, #7]
  switch(msg)
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	3b0a      	subs	r3, #10
 80026e0:	2b0b      	cmp	r3, #11
 80026e2:	d85b      	bhi.n	800279c <u8g_dev_ssd1306_128x32_fn+0xd0>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <u8g_dev_ssd1306_128x32_fn+0x20>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	0800271d 	.word	0x0800271d
 80026f0:	0800279d 	.word	0x0800279d
 80026f4:	0800279d 	.word	0x0800279d
 80026f8:	0800279d 	.word	0x0800279d
 80026fc:	0800279d 	.word	0x0800279d
 8002700:	0800279d 	.word	0x0800279d
 8002704:	08002781 	.word	0x08002781
 8002708:	0800278f 	.word	0x0800278f
 800270c:	0800279d 	.word	0x0800279d
 8002710:	0800279d 	.word	0x0800279d
 8002714:	0800279d 	.word	0x0800279d
 8002718:	08002733 	.word	0x08002733
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 800271c:	2202      	movs	r2, #2
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff feaa 	bl	800247a <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_init_seq);
 8002726:	4a23      	ldr	r2, [pc, #140]	; (80027b4 <u8g_dev_ssd1306_128x32_fn+0xe8>)
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f7ff ff23 	bl	8002576 <u8g_WriteEscSeqP>
      break;
 8002730:	e034      	b.n	800279c <u8g_dev_ssd1306_128x32_fn+0xd0>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	617b      	str	r3, [r7, #20]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_data_start);    
 8002738:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <u8g_dev_ssd1306_128x32_fn+0xec>)
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff ff1a 	bl	8002576 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page);	/* select current page (SSD1306) */
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	791b      	ldrb	r3, [r3, #4]
 8002746:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800274a:	b2db      	uxtb	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff fee9 	bl	8002528 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);					/* data mode */
 8002756:	2201      	movs	r2, #1
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff fed2 	bl	8002504 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	68f9      	ldr	r1, [r7, #12]
 8002764:	6978      	ldr	r0, [r7, #20]
 8002766:	f000 fe51 	bl	800340c <u8g_pb_WriteBuffer>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <u8g_dev_ssd1306_128x32_fn+0xa8>
          return 0;
 8002770:	2300      	movs	r3, #0
 8002772:	e01a      	b.n	80027aa <u8g_dev_ssd1306_128x32_fn+0xde>
        u8g_SetChipSelect(u8g, dev, 0);
 8002774:	2200      	movs	r2, #0
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fe91 	bl	80024a0 <u8g_SetChipSelect>
      }
      break;
 800277e:	e00d      	b.n	800279c <u8g_dev_ssd1306_128x32_fn+0xd0>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8002780:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <u8g_dev_ssd1306_128x32_fn+0xf0>)
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff fef6 	bl	8002576 <u8g_WriteEscSeqP>
      return 1;
 800278a:	2301      	movs	r3, #1
 800278c:	e00d      	b.n	80027aa <u8g_dev_ssd1306_128x32_fn+0xde>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 800278e:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <u8g_dev_ssd1306_128x32_fn+0xf4>)
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7ff feef 	bl	8002576 <u8g_WriteEscSeqP>
      return 1;
 8002798:	2301      	movs	r3, #1
 800279a:	e006      	b.n	80027aa <u8g_dev_ssd1306_128x32_fn+0xde>
}
  
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 800279c:	79fa      	ldrb	r2, [r7, #7]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fef0 	bl	8003588 <u8g_dev_pb8v1_base_fn>
 80027a8:	4603      	mov	r3, r0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	08010cc4 	.word	0x08010cc4
 80027b8:	08010cec 	.word	0x08010cec
 80027bc:	08010cf4 	.word	0x08010cf4
 80027c0:	08010d00 	.word	0x08010d00

080027c4 <u8g_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	607b      	str	r3, [r7, #4]
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	781b      	ldrb	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	607b      	str	r3, [r7, #4]
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	81fb      	strh	r3, [r7, #14]
    font++;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3301      	adds	r3, #1
 8002806:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8002808:	89fb      	ldrh	r3, [r7, #14]
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	81fb      	strh	r3, [r7, #14]
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	b29a      	uxth	r2, r3
 8002814:	89fb      	ldrh	r3, [r7, #14]
 8002816:	4413      	add	r3, r2
 8002818:	81fb      	strh	r3, [r7, #14]
    return pos;
 800281a:	89fb      	ldrh	r3, [r7, #14]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 0);
 8002830:	2100      	movs	r1, #0
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ffc6 	bl	80027c4 <u8g_font_get_byte>
 8002838:	4603      	mov	r3, r0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  switch(u8g_font_GetFormat(font))
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffec 	bl	8002828 <u8g_font_GetFormat>
 8002850:	4603      	mov	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	d005      	beq.n	8002862 <u8g_font_GetFontGlyphStructureSize+0x20>
 8002856:	2b02      	cmp	r3, #2
 8002858:	d005      	beq.n	8002866 <u8g_font_GetFontGlyphStructureSize+0x24>
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <u8g_font_GetFontGlyphStructureSize+0x28>
  {
    case 0: return 6;
 800285e:	2306      	movs	r3, #6
 8002860:	e004      	b.n	800286c <u8g_font_GetFontGlyphStructureSize+0x2a>
    case 1: return 3;
 8002862:	2303      	movs	r3, #3
 8002864:	e002      	b.n	800286c <u8g_font_GetFontGlyphStructureSize+0x2a>
    case 2: return 6;
 8002866:	2306      	movs	r3, #6
 8002868:	e000      	b.n	800286c <u8g_font_GetFontGlyphStructureSize+0x2a>
  }
  return 3;
 800286a:	2303      	movs	r3, #3
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <u8g_font_GetCapitalAHeight>:
{
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 5);
 800287c:	2105      	movs	r1, #5
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ffa0 	bl	80027c4 <u8g_font_get_byte>
 8002884:	4603      	mov	r3, r0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 6);
 8002896:	2106      	movs	r1, #6
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ffa5 	bl	80027e8 <u8g_font_get_word>
 800289e:	4603      	mov	r3, r0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 8);
 80028b0:	2108      	movs	r1, #8
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ff98 	bl	80027e8 <u8g_font_get_word>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 10);
 80028ca:	210a      	movs	r1, #10
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff79 	bl	80027c4 <u8g_font_get_byte>
 80028d2:	4603      	mov	r3, r0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 11);
 80028e4:	210b      	movs	r1, #11
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ff6c 	bl	80027c4 <u8g_font_get_byte>
 80028ec:	4603      	mov	r3, r0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 12);
 80028fe:	210c      	movs	r1, #12
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff5f 	bl	80027c4 <u8g_font_get_byte>
 8002906:	4603      	mov	r3, r0
 8002908:	b25b      	sxtb	r3, r3
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 13);
 800291a:	210d      	movs	r1, #13
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff51 	bl	80027c4 <u8g_font_get_byte>
 8002922:	4603      	mov	r3, r0
 8002924:	b25b      	sxtb	r3, r3
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 14);
 8002936:	210e      	movs	r1, #14
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff43 	bl	80027c4 <u8g_font_get_byte>
 800293e:	4603      	mov	r3, r0
 8002940:	b25b      	sxtb	r3, r3
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 15);
 8002952:	210f      	movs	r1, #15
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ff35 	bl	80027c4 <u8g_font_get_byte>
 800295a:	4603      	mov	r3, r0
 800295c:	b25b      	sxtb	r3, r3
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 16);
 800296e:	2110      	movs	r1, #16
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff ff27 	bl	80027c4 <u8g_font_get_byte>
 8002976:	4603      	mov	r3, r0
 8002978:	b25b      	sxtb	r3, r3
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <u8g_font_GetGlyphDataStart>:


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff58 	bl	8002842 <u8g_font_GetFontGlyphStructureSize>
 8002992:	4603      	mov	r3, r0
 8002994:	461a      	mov	r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	4413      	add	r3, r2
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff39 	bl	8002828 <u8g_font_GetFormat>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <u8g_CopyGlyphDataToCache+0x1e>
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d11b      	bne.n	80029f8 <u8g_CopyGlyphDataToCache+0x56>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	77da      	strb	r2, [r3, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	785a      	ldrb	r2, [r3, #1]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f883 2020 	strb.w	r2, [r3, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	3303      	adds	r3, #3
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b25a      	sxtb	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	771a      	strb	r2, [r3, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	3304      	adds	r3, #4
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b25a      	sxtb	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	775a      	strb	r2, [r3, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	3305      	adds	r3, #5
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	b25a      	sxtb	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	779a      	strb	r2, [r3, #30]
      break;
 80029f6:	e034      	b.n	8002a62 <u8g_CopyGlyphDataToCache+0xc0>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_y =  tmp & 15;
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	b25a      	sxtb	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	779a      	strb	r2, [r3, #30]
      u8g->glyph_y-=2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	3b02      	subs	r3, #2
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	b25a      	sxtb	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	779a      	strb	r2, [r3, #30]
      tmp >>= 4;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_x =  tmp;
 8002a24:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	775a      	strb	r2, [r3, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	785b      	ldrb	r3, [r3, #1]
 8002a30:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_height =  tmp & 15;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f883 2020 	strb.w	r2, [r3, #32]
      tmp >>= 4;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_width =  tmp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	77da      	strb	r2, [r3, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	789b      	ldrb	r3, [r3, #2]
 8002a50:	73fb      	strb	r3, [r7, #15]
      tmp >>= 4;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_dx = tmp;
 8002a58:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	771a      	strb	r2, [r3, #28]
    
      
      break;
 8002a60:	bf00      	nop
  }
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  u8g->glyph_dx = 0;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
  u8g->glyph_width = 0;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	77da      	strb	r2, [r3, #31]
  u8g->glyph_height = 0;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2020 	strb.w	r2, [r3, #32]
  u8g->glyph_x = 0;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	775a      	strb	r2, [r3, #29]
  u8g->glyph_y = 0;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	779a      	strb	r2, [r3, #30]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	70fb      	strb	r3, [r7, #3]
  uint8_t *p = (uint8_t *)(u8g->font);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	617b      	str	r3, [r7, #20]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff feb7 	bl	8002828 <u8g_font_GetFormat>
 8002aba:	4603      	mov	r3, r0
 8002abc:	743b      	strb	r3, [r7, #16]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff febd 	bl	8002842 <u8g_font_GetFontGlyphStructureSize>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	73fb      	strb	r3, [r7, #15]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 8002acc:	23ff      	movs	r3, #255	; 0xff
 8002ace:	747b      	strb	r3, [r7, #17]

  if ( font_format == 1 )
 8002ad0:	7c3b      	ldrb	r3, [r7, #16]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <u8g_GetGlyph+0x3c>
    mask = 15;
 8002ad6:	230f      	movs	r3, #15
 8002ad8:	747b      	strb	r3, [r7, #17]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff feef 	bl	80028c2 <u8g_font_GetFontStartEncoding>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	74fb      	strb	r3, [r7, #19]
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fef5 	bl	80028dc <u8g_font_GetFontEndEncoding>
 8002af2:	4603      	mov	r3, r0
 8002af4:	73bb      	strb	r3, [r7, #14]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fed4 	bl	80028a8 <u8g_font_GetEncoding97Pos>
 8002b00:	4603      	mov	r3, r0
 8002b02:	81bb      	strh	r3, [r7, #12]
  if ( requested_encoding >= 97 && pos > 0 )
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	2b60      	cmp	r3, #96	; 0x60
 8002b08:	d909      	bls.n	8002b1e <u8g_GetGlyph+0x80>
 8002b0a:	89bb      	ldrh	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <u8g_GetGlyph+0x80>
  {
    p+= pos;
 8002b10:	89bb      	ldrh	r3, [r7, #12]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4413      	add	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
    start = 97;
 8002b18:	2361      	movs	r3, #97	; 0x61
 8002b1a:	74fb      	strb	r3, [r7, #19]
 8002b1c:	e016      	b.n	8002b4c <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff feb3 	bl	800288e <u8g_font_GetEncoding65Pos>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	81bb      	strh	r3, [r7, #12]
    if ( requested_encoding >= 65 && pos > 0 )
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	2b40      	cmp	r3, #64	; 0x40
 8002b30:	d909      	bls.n	8002b46 <u8g_GetGlyph+0xa8>
 8002b32:	89bb      	ldrh	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <u8g_GetGlyph+0xa8>
    {
      p+= pos;
 8002b38:	89bb      	ldrh	r3, [r7, #12]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
      start = 65;
 8002b40:	2341      	movs	r3, #65	; 0x41
 8002b42:	74fb      	strb	r3, [r7, #19]
 8002b44:	e002      	b.n	8002b4c <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	3311      	adds	r3, #17
 8002b4a:	617b      	str	r3, [r7, #20]
  }
  
  if ( requested_encoding > end )
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	7bbb      	ldrb	r3, [r7, #14]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d904      	bls.n	8002b5e <u8g_GetGlyph+0xc0>
  {
    u8g_FillEmptyGlyphCache(u8g);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff88 	bl	8002a6a <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e032      	b.n	8002bc4 <u8g_GetGlyph+0x126>
  }
  
  i = start;
 8002b5e:	7cfb      	ldrb	r3, [r7, #19]
 8002b60:	74bb      	strb	r3, [r7, #18]
  if ( i <= end )
 8002b62:	7cba      	ldrb	r2, [r7, #18]
 8002b64:	7bbb      	ldrb	r3, [r7, #14]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d828      	bhi.n	8002bbc <u8g_GetGlyph+0x11e>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2bff      	cmp	r3, #255	; 0xff
 8002b70:	d103      	bne.n	8002b7a <u8g_GetGlyph+0xdc>
      {
        p += 1;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	e017      	b.n	8002baa <u8g_GetGlyph+0x10c>
      }
      else
      {
        if ( i == requested_encoding )
 8002b7a:	7cba      	ldrb	r2, [r7, #18]
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d105      	bne.n	8002b8e <u8g_GetGlyph+0xf0>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
 8002b82:	6979      	ldr	r1, [r7, #20]
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff0c 	bl	80029a2 <u8g_CopyGlyphDataToCache>
          return p;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	e01a      	b.n	8002bc4 <u8g_GetGlyph+0x126>
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3302      	adds	r3, #2
 8002b92:	781a      	ldrb	r2, [r3, #0]
 8002b94:	7c7b      	ldrb	r3, [r7, #17]
 8002b96:	4013      	ands	r3, r2
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]
        p += data_structure_size;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
      }
      if ( i == end )
 8002baa:	7cba      	ldrb	r2, [r7, #18]
 8002bac:	7bbb      	ldrb	r3, [r7, #14]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d003      	beq.n	8002bba <u8g_GetGlyph+0x11c>
        break;
      i++;
 8002bb2:	7cbb      	ldrb	r3, [r7, #18]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	74bb      	strb	r3, [r7, #18]
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8002bb8:	e7d7      	b.n	8002b6a <u8g_GetGlyph+0xcc>
        break;
 8002bba:	bf00      	nop
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff54 	bl	8002a6a <u8g_FillEmptyGlyphCache>
    
  return NULL;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	70fb      	strb	r3, [r7, #3]
 8002bde:	460b      	mov	r3, r1
 8002be0:	70bb      	strb	r3, [r7, #2]
 8002be2:	4613      	mov	r3, r2
 8002be4:	707b      	strb	r3, [r7, #1]
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8002be6:	787b      	ldrb	r3, [r7, #1]
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ff57 	bl	8002a9e <u8g_GetGlyph>
 8002bf0:	60f8      	str	r0, [r7, #12]
    if ( g == NULL  )
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <u8g_draw_glyph+0x30>
      return 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e06d      	b.n	8002cd8 <u8g_draw_glyph+0x10c>
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff febd 	bl	8002982 <u8g_font_GetGlyphDataStart>
 8002c08:	6178      	str	r0, [r7, #20]
  }
  
  w = u8g->glyph_width;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7fdb      	ldrb	r3, [r3, #31]
 8002c0e:	72fb      	strb	r3, [r7, #11]
  h = u8g->glyph_height;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c16:	72bb      	strb	r3, [r7, #10]
  
  x += u8g->glyph_x;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	4413      	add	r3, r2
 8002c24:	70fb      	strb	r3, [r7, #3]
  y -= u8g->glyph_y;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	78ba      	ldrb	r2, [r7, #2]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	70bb      	strb	r3, [r7, #2]
  y--;
 8002c34:	78bb      	ldrb	r3, [r7, #2]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	70bb      	strb	r3, [r7, #2]
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8002c3a:	78ba      	ldrb	r2, [r7, #2]
 8002c3c:	7abb      	ldrb	r3, [r7, #10]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	7af8      	ldrb	r0, [r7, #11]
 8002c48:	78f9      	ldrb	r1, [r7, #3]
 8002c4a:	7abb      	ldrb	r3, [r7, #10]
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	4603      	mov	r3, r0
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff fb97 	bl	8002384 <u8g_IsBBXIntersection>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d103      	bne.n	8002c64 <u8g_draw_glyph+0x98>
    return u8g->glyph_dx;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002c62:	e039      	b.n	8002cd8 <u8g_draw_glyph+0x10c>

  /* now, w is reused as bytes per line */
  w += 7;
 8002c64:	7afb      	ldrb	r3, [r7, #11]
 8002c66:	3307      	adds	r3, #7
 8002c68:	72fb      	strb	r3, [r7, #11]
  w /= 8;
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
 8002c6c:	08db      	lsrs	r3, r3, #3
 8002c6e:	72fb      	strb	r3, [r7, #11]
  
  iy = y;
 8002c70:	78bb      	ldrb	r3, [r7, #2]
 8002c72:	743b      	strb	r3, [r7, #16]
  iy -= h;
 8002c74:	7c3a      	ldrb	r2, [r7, #16]
 8002c76:	7abb      	ldrb	r3, [r7, #10]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	743b      	strb	r3, [r7, #16]
  iy++;
 8002c7c:	7c3b      	ldrb	r3, [r7, #16]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	743b      	strb	r3, [r7, #16]

  for( j = 0; j < h; j++ )
 8002c82:	2300      	movs	r3, #0
 8002c84:	74bb      	strb	r3, [r7, #18]
 8002c86:	e020      	b.n	8002cca <u8g_draw_glyph+0xfe>
  {
    ix = x;
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	74fb      	strb	r3, [r7, #19]
 8002c90:	e011      	b.n	8002cb6 <u8g_draw_glyph+0xea>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	7c3a      	ldrb	r2, [r7, #16]
 8002c98:	7c79      	ldrb	r1, [r7, #17]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa8c 	bl	80031bc <u8g_Draw8Pixel>
      data++;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
      ix+=8;
 8002caa:	7c7b      	ldrb	r3, [r7, #17]
 8002cac:	3308      	adds	r3, #8
 8002cae:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	74fb      	strb	r3, [r7, #19]
 8002cb6:	7cfa      	ldrb	r2, [r7, #19]
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d3e9      	bcc.n	8002c92 <u8g_draw_glyph+0xc6>
    }
    iy++;
 8002cbe:	7c3b      	ldrb	r3, [r7, #16]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	743b      	strb	r3, [r7, #16]
  for( j = 0; j < h; j++ )
 8002cc4:	7cbb      	ldrb	r3, [r7, #18]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	74bb      	strb	r3, [r7, #18]
 8002cca:	7cba      	ldrb	r2, [r7, #18]
 8002ccc:	7abb      	ldrb	r3, [r7, #10]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d3da      	bcc.n	8002c88 <u8g_draw_glyph+0xbc>
  }
  return u8g->glyph_dx;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f993 301c 	ldrsb.w	r3, [r3, #28]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	72fb      	strb	r3, [r7, #11]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	72bb      	strb	r3, [r7, #10]
  u8g_uint_t t = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	75fb      	strb	r3, [r7, #23]
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	4798      	blx	r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	7abb      	ldrb	r3, [r7, #10]
 8002d04:	4413      	add	r3, r2
 8002d06:	72bb      	strb	r3, [r7, #10]
  
  while( *s != '\0' )
 8002d08:	e013      	b.n	8002d32 <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	7aba      	ldrb	r2, [r7, #10]
 8002d10:	7af9      	ldrb	r1, [r7, #11]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff ff5a 	bl	8002bcc <u8g_draw_glyph>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	75bb      	strb	r3, [r7, #22]
    x += d;
 8002d1c:	7dba      	ldrb	r2, [r7, #22]
 8002d1e:	7afb      	ldrb	r3, [r7, #11]
 8002d20:	4413      	add	r3, r2
 8002d22:	72fb      	strb	r3, [r7, #11]
    t += d;
 8002d24:	7dba      	ldrb	r2, [r7, #22]
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	4413      	add	r3, r2
 8002d2a:	75fb      	strb	r3, [r7, #23]
    s++;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	607b      	str	r3, [r7, #4]
  while( *s != '\0' )
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e7      	bne.n	8002d0a <u8g_DrawStr+0x2a>
  }
  return t;
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint16_t ls;
  if ( u8g->font == NULL )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d06b      	beq.n	8002e2c <u8g_UpdateRefHeight+0xe8>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d114      	bne.n	8002d88 <u8g_UpdateRefHeight+0x44>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fd86 	bl	8002874 <u8g_font_GetCapitalAHeight>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	b25a      	sxtb	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fdbd 	bl	80028f6 <u8g_font_GetLowerGDescent>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8002d86:	e02d      	b.n	8002de4 <u8g_UpdateRefHeight+0xa0>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d114      	bne.n	8002dbc <u8g_UpdateRefHeight+0x78>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fdd7 	bl	800294a <u8g_font_GetFontXAscent>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fddb 	bl	8002966 <u8g_font_GetFontXDescent>
 8002db0:	4603      	mov	r3, r0
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8002dba:	e013      	b.n	8002de4 <u8g_UpdateRefHeight+0xa0>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fda6 	bl	8002912 <u8g_font_GetFontAscent>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fdaa 	bl	800292e <u8g_font_GetFontDescent>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	81fb      	strh	r3, [r7, #14]
  if ( u8g->font_line_spacing_factor != 64 )
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002e00:	2b40      	cmp	r3, #64	; 0x40
 8002e02:	d00d      	beq.n	8002e20 <u8g_UpdateRefHeight+0xdc>
  {
    ls &= 255;
 8002e04:	89fb      	ldrh	r3, [r7, #14]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	81fb      	strh	r3, [r7, #14]
    ls *= u8g->font_line_spacing_factor;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	89fa      	ldrh	r2, [r7, #14]
 8002e14:	fb12 f303 	smulbb	r3, r2, r3
 8002e18:	81fb      	strh	r3, [r7, #14]
    ls >>= 6;
 8002e1a:	89fb      	ldrh	r3, [r7, #14]
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	81fb      	strh	r3, [r7, #14]
  }
  u8g->line_spacing = ls;
 8002e20:	89fb      	ldrh	r3, [r7, #14]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002e2a:	e000      	b.n	8002e2e <u8g_UpdateRefHeight+0xea>
    return;
 8002e2c:	bf00      	nop
}
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <u8g_font_calc_vref_font>:

/*========================================================================*/
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return 0;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <u8g_SetFontPosBaseline+0x1c>)
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	08002e35 	.word	0x08002e35

08002e6c <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  if ( u8g->font != font )
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d008      	beq.n	8002e92 <u8g_SetFont+0x26>
  {
    u8g->font = font;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	609a      	str	r2, [r3, #8]
    u8g_UpdateRefHeight(u8g);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ff5c 	bl	8002d44 <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ffdd 	bl	8002e4c <u8g_SetFontPosBaseline>
  }
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002e9a:	b590      	push	{r4, r7, lr}
 8002e9c:	b085      	sub	sp, #20
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	71fb      	strb	r3, [r7, #7]
  return dev->dev_fn(u8g, dev, msg, arg); 
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	681c      	ldr	r4, [r3, #0]
 8002eae:	79fa      	ldrb	r2, [r7, #7]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	47a0      	blx	r4
 8002eb8:	4603      	mov	r3, r0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd90      	pop	{r4, r7, pc}

08002ec2 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed0:	2002      	movs	r0, #2
 8002ed2:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	220a      	movs	r2, #10
 8002ed8:	6839      	ldr	r1, [r7, #0]
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ffdd 	bl	8002e9a <u8g_call_dev_fn>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	2003      	movs	r0, #3
 8002eea:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	4798      	blx	r3
  return r;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	2001      	movs	r0, #1
 8002f16:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2214      	movs	r2, #20
 8002f1c:	6839      	ldr	r1, [r7, #0]
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ffbb 	bl	8002e9a <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3338      	adds	r3, #56	; 0x38
 8002f28:	2217      	movs	r2, #23
 8002f2a:	6839      	ldr	r1, [r7, #0]
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ffb4 	bl	8002e9a <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	2000      	movs	r0, #0
 8002f38:	4798      	blx	r3
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	2002      	movs	r0, #2
 8002f52:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	2001      	movs	r0, #1
 8002f5a:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2215      	movs	r2, #21
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ff99 	bl	8002e9a <u8g_call_dev_fn>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	73fb      	strb	r3, [r7, #15]
  if ( r != 0 )
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <u8g_NextPageLL+0x3e>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3338      	adds	r3, #56	; 0x38
 8002f76:	2217      	movs	r2, #23
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ff8d 	bl	8002e9a <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	2000      	movs	r0, #0
 8002f86:	4798      	blx	r3
  return r;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	71fb      	strb	r3, [r7, #7]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	71bb      	strb	r3, [r7, #6]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	332d      	adds	r3, #45	; 0x2d
 8002fac:	617b      	str	r3, [r7, #20]
  arg->x = x;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	79fa      	ldrb	r2, [r7, #7]
 8002fb2:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	79ba      	ldrb	r2, [r7, #6]
 8002fb8:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002fc0:	70da      	strb	r2, [r3, #3]
  arg->pixel = pixel;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002fc8:	709a      	strb	r2, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	223b      	movs	r2, #59	; 0x3b
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff ff62 	bl	8002e9a <u8g_call_dev_fn>
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 8002fe8:	f107 030f 	add.w	r3, r7, #15
 8002fec:	2246      	movs	r2, #70	; 0x46
 8002fee:	6839      	ldr	r1, [r7, #0]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff52 	bl	8002e9a <u8g_call_dev_fn>
  return r;
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 800300a:	f107 030f 	add.w	r3, r7, #15
 800300e:	2247      	movs	r2, #71	; 0x47
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ff41 	bl	8002e9a <u8g_call_dev_fn>
  return r;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 800302c:	2300      	movs	r3, #0
 800302e:	2248      	movs	r2, #72	; 0x48
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ff31 	bl	8002e9a <u8g_call_dev_fn>
 8003038:	4603      	mov	r3, r0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ffc4 	bl	8002fde <u8g_GetWidthLL>
 8003056:	4603      	mov	r3, r0
 8003058:	461a      	mov	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	701a      	strb	r2, [r3, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ffcb 	bl	8003000 <u8g_GetHeightLL>
 800306a:	4603      	mov	r3, r0
 800306c:	461a      	mov	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	705a      	strb	r2, [r3, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4619      	mov	r1, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ffd2 	bl	8003022 <u8g_GetModeLL>
 800307e:	4603      	mov	r3, r0
 8003080:	461a      	mov	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	74da      	strb	r2, [r3, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3338      	adds	r3, #56	; 0x38
 800308e:	2217      	movs	r2, #23
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff02 	bl	8002e9a <u8g_call_dev_fn>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <u8g_init_data>:

static void u8g_init_data(u8g_t *u8g)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  u8g->font = NULL;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  u8g->cursor_font = NULL;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	60da      	str	r2, [r3, #12]
  u8g->cursor_bg_color = 0;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	745a      	strb	r2, [r3, #17]
  u8g->cursor_fg_color = 1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	741a      	strb	r2, [r3, #16]
  u8g->cursor_encoding = 34;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2222      	movs	r2, #34	; 0x22
 80030c4:	749a      	strb	r2, [r3, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	619a      	str	r2, [r3, #24]
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);
 80030cc:	2101      	movs	r1, #1
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f891 	bl	80031f6 <u8g_SetColorIndex>

  u8g_SetFontPosBaseline(u8g);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff feb9 	bl	8002e4c <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8g->font_ref_descent = 0;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2240      	movs	r2, #64	; 0x40
 80030f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  u8g->line_spacing = 0;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  u8g->state_cb = u8g_state_dummy_cb;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a02      	ldr	r2, [pc, #8]	; (8003110 <u8g_init_data+0x70>)
 8003106:	635a      	str	r2, [r3, #52]	; 0x34

}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	08003971 	.word	0x08003971

08003114 <u8g_Begin>:

uint8_t u8g_Begin(u8g_t *u8g)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4619      	mov	r1, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff fecd 	bl	8002ec2 <u8g_InitLL>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <u8g_Begin+0x1e>
    return 0;
 800312e:	2300      	movs	r3, #0
 8003130:	e003      	b.n	800313a <u8g_Begin+0x26>
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff ff85 	bl	8003042 <u8g_UpdateDimension>
  return 1;
 8003138:	2301      	movs	r3, #1
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
  u8g_init_data(u8g);
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff ffa6 	bl	80030a0 <u8g_init_data>
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	605a      	str	r2, [r3, #4]
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	609a      	str	r2, [r3, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff ffd6 	bl	8003114 <u8g_Begin>
 8003168:	4603      	mov	r3, r0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  u8g_FirstPageLL(u8g, u8g->dev);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff febc 	bl	8002efe <u8g_FirstPageLL>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <u8g_NextPage+0x18>
  {
    u8g->cursor_fn(u8g);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4619      	mov	r1, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fec8 	bl	8002f42 <u8g_NextPageLL>
 80031b2:	4603      	mov	r3, r0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	4608      	mov	r0, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	461a      	mov	r2, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	70fb      	strb	r3, [r7, #3]
 80031ce:	460b      	mov	r3, r1
 80031d0:	70bb      	strb	r3, [r7, #2]
 80031d2:	4613      	mov	r3, r2
 80031d4:	707b      	strb	r3, [r7, #1]
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	78b8      	ldrb	r0, [r7, #2]
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	7c3b      	ldrb	r3, [r7, #16]
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	787b      	ldrb	r3, [r7, #1]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	4603      	mov	r3, r0
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff fed2 	bl	8002f92 <u8g_Draw8PixelLL>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <u8g_SetColorIndex>:
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	70fb      	strb	r3, [r7, #3]
  u8g->arg_pixel.color = idx;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  p->page_y0 = 0;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	709a      	strb	r2, [r3, #2]
  p->page_y1 = p->page_height;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	781a      	ldrb	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	70da      	strb	r2, [r3, #3]
  p->page_y1--;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	78db      	ldrb	r3, [r3, #3]
 8003230:	3b01      	subs	r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	70da      	strb	r2, [r3, #3]
  p->page = 0;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	711a      	strb	r2, [r3, #4]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
 800324a:	b490      	push	{r4, r7}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	789a      	ldrb	r2, [r3, #2]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	4413      	add	r3, r2
 800325c:	b2da      	uxtb	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	709a      	strb	r2, [r3, #2]
  if ( p->page_y0 >= p->total_height )
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	789a      	ldrb	r2, [r3, #2]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	785b      	ldrb	r3, [r3, #1]
 800326a:	429a      	cmp	r2, r3
 800326c:	d301      	bcc.n	8003272 <u8g_page_Next+0x28>
    return 0;
 800326e:	2300      	movs	r3, #0
 8003270:	e018      	b.n	80032a4 <u8g_page_Next+0x5a>
  p->page++;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	791b      	ldrb	r3, [r3, #4]
 8003276:	3301      	adds	r3, #1
 8003278:	b2da      	uxtb	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	78dc      	ldrb	r4, [r3, #3]
  y1 += p->page_height;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	4423      	add	r3, r4
 8003288:	b2dc      	uxtb	r4, r3
  if ( y1 >= p->total_height )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	785b      	ldrb	r3, [r3, #1]
 800328e:	429c      	cmp	r4, r3
 8003290:	d304      	bcc.n	800329c <u8g_page_Next+0x52>
  {
    y1 = p->total_height;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	785c      	ldrb	r4, [r3, #1]
    y1--;
 8003296:	4623      	mov	r3, r4
 8003298:	3b01      	subs	r3, #1
 800329a:	b2dc      	uxtb	r4, r3
  }
  p->page_y1 = y1;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4622      	mov	r2, r4
 80032a0:	70da      	strb	r2, [r3, #3]
  
  return 1;
 80032a2:	2301      	movs	r3, #1
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc90      	pop	{r4, r7}
 80032ac:	4770      	bx	lr

080032ae <u8g_pb_Clear>:
*/

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b085      	sub	sp, #20
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = (uint8_t *)b->buf;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60fb      	str	r3, [r7, #12]
  uint8_t *end_ptr = ptr;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	60bb      	str	r3, [r7, #8]
  end_ptr += b->width;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	795b      	ldrb	r3, [r3, #5]
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4413      	add	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]
  do
  {
    *ptr++ = 0;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	60fa      	str	r2, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
  } while( ptr != end_ptr );
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d1f6      	bne.n	80032cc <u8g_pb_Clear+0x1e>
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	70fb      	strb	r3, [r7, #3]
 80032f6:	4613      	mov	r3, r2
 80032f8:	70bb      	strb	r3, [r7, #2]
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	78db      	ldrb	r3, [r3, #3]
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	429a      	cmp	r2, r3
 8003302:	bf94      	ite	ls
 8003304:	2301      	movls	r3, #1
 8003306:	2300      	movhi	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	73fb      	strb	r3, [r7, #15]
  c2 = v1 >= pb->p.page_y0;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	789b      	ldrb	r3, [r3, #2]
 8003310:	78ba      	ldrb	r2, [r7, #2]
 8003312:	429a      	cmp	r2, r3
 8003314:	bf2c      	ite	cs
 8003316:	2301      	movcs	r3, #1
 8003318:	2300      	movcc	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	73bb      	strb	r3, [r7, #14]
  c3 = v0 > v1;
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	78bb      	ldrb	r3, [r7, #2]
 8003322:	429a      	cmp	r2, r3
 8003324:	bf8c      	ite	hi
 8003326:	2301      	movhi	r3, #1
 8003328:	2300      	movls	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	737b      	strb	r3, [r7, #13]
  if ( c2 && c3 )
    return 1;
  return 0;
  */
  
  tmp = c1;
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	733b      	strb	r3, [r7, #12]
  c1 &= c2;
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	7bbb      	ldrb	r3, [r7, #14]
 8003336:	4013      	ands	r3, r2
 8003338:	73fb      	strb	r3, [r7, #15]
  c2 &= c3;
 800333a:	7bba      	ldrb	r2, [r7, #14]
 800333c:	7b7b      	ldrb	r3, [r7, #13]
 800333e:	4013      	ands	r3, r2
 8003340:	73bb      	strb	r3, [r7, #14]
  c3 &= tmp;
 8003342:	7b7a      	ldrb	r2, [r7, #13]
 8003344:	7b3b      	ldrb	r3, [r7, #12]
 8003346:	4013      	ands	r3, r2
 8003348:	737b      	strb	r3, [r7, #13]
  c1 |= c2;
 800334a:	7bfa      	ldrb	r2, [r7, #15]
 800334c:	7bbb      	ldrb	r3, [r7, #14]
 800334e:	4313      	orrs	r3, r2
 8003350:	73fb      	strb	r3, [r7, #15]
  c1 |= c3;
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	7b7b      	ldrb	r3, [r7, #13]
 8003356:	4313      	orrs	r3, r2
 8003358:	73fb      	strb	r3, [r7, #15]
  return c1 & 1;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	b2db      	uxtb	r3, r3
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  box->x0 = 0;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
  box->y0 = pb->p.page_y0;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	789a      	ldrb	r2, [r3, #2]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	705a      	strb	r2, [r3, #1]
  box->x1 = pb->width;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	795a      	ldrb	r2, [r3, #5]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	709a      	strb	r2, [r3, #2]
  box->x1--;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	789b      	ldrb	r3, [r3, #2]
 8003392:	3b01      	subs	r3, #1
 8003394:	b2da      	uxtb	r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	709a      	strb	r2, [r3, #2]
  box->y1 = pb->p.page_y1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	78da      	ldrb	r2, [r3, #3]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	70da      	strb	r2, [r3, #3]
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	785b      	ldrb	r3, [r3, #1]
 80033be:	73fb      	strb	r3, [r7, #15]
  v1 = v0;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	73bb      	strb	r3, [r7, #14]
  switch( arg_pixel->dir )
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	78db      	ldrb	r3, [r3, #3]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d813      	bhi.n	80033f4 <u8g_pb_Is8PixelVisible+0x44>
 80033cc:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <u8g_pb_Is8PixelVisible+0x24>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	080033f5 	.word	0x080033f5
 80033d8:	080033e5 	.word	0x080033e5
 80033dc:	080033f5 	.word	0x080033f5
 80033e0:	080033ed 	.word	0x080033ed
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 80033e4:	7bbb      	ldrb	r3, [r7, #14]
 80033e6:	3308      	adds	r3, #8
 80033e8:	73bb      	strb	r3, [r7, #14]
      break;
 80033ea:	e003      	b.n	80033f4 <u8g_pb_Is8PixelVisible+0x44>
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	3b08      	subs	r3, #8
 80033f0:	73fb      	strb	r3, [r7, #15]
      break;
 80033f2:	bf00      	nop
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 80033f4:	7bba      	ldrb	r2, [r7, #14]
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff ff75 	bl	80032ea <u8g_pb_IsYIntersection>
 8003400:	4603      	mov	r3, r0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop

0800340c <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	795a      	ldrb	r2, [r3, #5]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	68b8      	ldr	r0, [r7, #8]
 8003424:	f7ff f893 	bl	800254e <u8g_WriteSequence>
 8003428:	4603      	mov	r3, r0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8003432:	b490      	push	{r4, r7}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	4608      	mov	r0, r1
 800343c:	4611      	mov	r1, r2
 800343e:	461a      	mov	r2, r3
 8003440:	4603      	mov	r3, r0
 8003442:	70fb      	strb	r3, [r7, #3]
 8003444:	460b      	mov	r3, r1
 8003446:	70bb      	strb	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	60fb      	str	r3, [r7, #12]
  
  y -= b->p.page_y0;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	789b      	ldrb	r3, [r3, #2]
 8003456:	78ba      	ldrb	r2, [r7, #2]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	70bb      	strb	r3, [r7, #2]
  mask = 1;
 800345c:	2401      	movs	r4, #1
  y &= 0x07;
 800345e:	78bb      	ldrb	r3, [r7, #2]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	70bb      	strb	r3, [r7, #2]
  mask <<= y;
 8003466:	4622      	mov	r2, r4
 8003468:	78bb      	ldrb	r3, [r7, #2]
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	b2dc      	uxtb	r4, r3
  ptr += x;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4413      	add	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  if ( color_index )
 8003478:	787b      	ldrb	r3, [r7, #1]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d006      	beq.n	800348c <u8g_pb8v1_set_pixel+0x5a>
  {
    *ptr |= mask;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	4323      	orrs	r3, r4
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	701a      	strb	r2, [r3, #0]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 800348a:	e007      	b.n	800349c <u8g_pb8v1_set_pixel+0x6a>
    mask ^=0xff;
 800348c:	43e3      	mvns	r3, r4
 800348e:	b2dc      	uxtb	r4, r3
    *ptr &= mask;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	4023      	ands	r3, r4
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	701a      	strb	r2, [r3, #0]
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc90      	pop	{r4, r7}
 80034a4:	4770      	bx	lr

080034a6 <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  if ( arg_pixel->y < b->p.page_y0 )
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	785a      	ldrb	r2, [r3, #1]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	789b      	ldrb	r3, [r3, #2]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d315      	bcc.n	80034e8 <u8g_pb8v1_SetPixel+0x42>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	785a      	ldrb	r2, [r3, #1]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	78db      	ldrb	r3, [r3, #3]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d811      	bhi.n	80034ec <u8g_pb8v1_SetPixel+0x46>
    return;
  if ( arg_pixel->x >= b->width )
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	795b      	ldrb	r3, [r3, #5]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d20d      	bcs.n	80034f0 <u8g_pb8v1_SetPixel+0x4a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	7819      	ldrb	r1, [r3, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	785a      	ldrb	r2, [r3, #1]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	791b      	ldrb	r3, [r3, #4]
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ffa6 	bl	8003432 <u8g_pb8v1_set_pixel>
 80034e6:	e004      	b.n	80034f2 <u8g_pb8v1_SetPixel+0x4c>
    return;
 80034e8:	bf00      	nop
 80034ea:	e002      	b.n	80034f2 <u8g_pb8v1_SetPixel+0x4c>
    return;
 80034ec:	bf00      	nop
 80034ee:	e000      	b.n	80034f2 <u8g_pb8v1_SetPixel+0x4c>
    return;
 80034f0:	bf00      	nop
}
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  register uint8_t pixel = arg_pixel->pixel;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	789c      	ldrb	r4, [r3, #2]
  u8g_uint_t dx = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
  u8g_uint_t dy = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	73bb      	strb	r3, [r7, #14]
  
  switch( arg_pixel->dir )
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	78db      	ldrb	r3, [r3, #3]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d81a      	bhi.n	800354c <u8g_pb8v1_Set8PixelOpt2+0x54>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <u8g_pb8v1_Set8PixelOpt2+0x24>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	0800352d 	.word	0x0800352d
 8003520:	08003535 	.word	0x08003535
 8003524:	0800353d 	.word	0x0800353d
 8003528:	08003545 	.word	0x08003545
  {
    case 0: dx++; break;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	3301      	adds	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
 8003532:	e00b      	b.n	800354c <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 1: dy++; break;
 8003534:	7bbb      	ldrb	r3, [r7, #14]
 8003536:	3301      	adds	r3, #1
 8003538:	73bb      	strb	r3, [r7, #14]
 800353a:	e007      	b.n	800354c <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 2: dx--; break;
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	3b01      	subs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
 8003542:	e003      	b.n	800354c <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 3: dy--; break;
 8003544:	7bbb      	ldrb	r3, [r7, #14]
 8003546:	3b01      	subs	r3, #1
 8003548:	73bb      	strb	r3, [r7, #14]
 800354a:	bf00      	nop
  }
  
  do
  {
    if ( pixel & 128 )
 800354c:	b263      	sxtb	r3, r4
 800354e:	2b00      	cmp	r3, #0
 8003550:	da03      	bge.n	800355a <u8g_pb8v1_Set8PixelOpt2+0x62>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8003552:	6839      	ldr	r1, [r7, #0]
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ffa6 	bl	80034a6 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	4413      	add	r3, r2
 8003562:	b2da      	uxtb	r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	701a      	strb	r2, [r3, #0]
    arg_pixel->y += dy;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	785a      	ldrb	r2, [r3, #1]
 800356c:	7bbb      	ldrb	r3, [r7, #14]
 800356e:	4413      	add	r3, r2
 8003570:	b2da      	uxtb	r2, r3
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	705a      	strb	r2, [r3, #1]
    pixel <<= 1;
 8003576:	0063      	lsls	r3, r4, #1
 8003578:	b2dc      	uxtb	r4, r3
  } while( pixel != 0  );
 800357a:	2c00      	cmp	r4, #0
 800357c:	d1e6      	bne.n	800354c <u8g_pb8v1_Set8PixelOpt2+0x54>
  
}
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bd90      	pop	{r4, r7, pc}
 8003586:	bf00      	nop

08003588 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	71fb      	strb	r3, [r7, #7]
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	617b      	str	r3, [r7, #20]
  switch(msg)
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	3b0a      	subs	r3, #10
 80035a2:	2b3e      	cmp	r3, #62	; 0x3e
 80035a4:	f200 80ba 	bhi.w	800371c <u8g_dev_pb8v1_base_fn+0x194>
 80035a8:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <u8g_dev_pb8v1_base_fn+0x28>)
 80035aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ae:	bf00      	nop
 80035b0:	0800371d 	.word	0x0800371d
 80035b4:	0800371d 	.word	0x0800371d
 80035b8:	0800371d 	.word	0x0800371d
 80035bc:	0800371d 	.word	0x0800371d
 80035c0:	0800371d 	.word	0x0800371d
 80035c4:	0800371d 	.word	0x0800371d
 80035c8:	0800371d 	.word	0x0800371d
 80035cc:	0800371d 	.word	0x0800371d
 80035d0:	0800371d 	.word	0x0800371d
 80035d4:	0800371d 	.word	0x0800371d
 80035d8:	080036cf 	.word	0x080036cf
 80035dc:	080036df 	.word	0x080036df
 80035e0:	0800371d 	.word	0x0800371d
 80035e4:	080036f9 	.word	0x080036f9
 80035e8:	0800371d 	.word	0x0800371d
 80035ec:	0800371d 	.word	0x0800371d
 80035f0:	0800371d 	.word	0x0800371d
 80035f4:	0800371d 	.word	0x0800371d
 80035f8:	0800371d 	.word	0x0800371d
 80035fc:	0800371d 	.word	0x0800371d
 8003600:	0800371d 	.word	0x0800371d
 8003604:	0800371d 	.word	0x0800371d
 8003608:	0800371d 	.word	0x0800371d
 800360c:	0800371d 	.word	0x0800371d
 8003610:	0800371d 	.word	0x0800371d
 8003614:	0800371d 	.word	0x0800371d
 8003618:	0800371d 	.word	0x0800371d
 800361c:	0800371d 	.word	0x0800371d
 8003620:	0800371d 	.word	0x0800371d
 8003624:	0800371d 	.word	0x0800371d
 8003628:	0800371d 	.word	0x0800371d
 800362c:	0800371d 	.word	0x0800371d
 8003630:	0800371d 	.word	0x0800371d
 8003634:	0800371d 	.word	0x0800371d
 8003638:	0800371d 	.word	0x0800371d
 800363c:	0800371d 	.word	0x0800371d
 8003640:	0800371d 	.word	0x0800371d
 8003644:	0800371d 	.word	0x0800371d
 8003648:	0800371d 	.word	0x0800371d
 800364c:	0800371d 	.word	0x0800371d
 8003650:	080036c5 	.word	0x080036c5
 8003654:	0800371d 	.word	0x0800371d
 8003658:	0800371d 	.word	0x0800371d
 800365c:	0800371d 	.word	0x0800371d
 8003660:	0800371d 	.word	0x0800371d
 8003664:	0800371d 	.word	0x0800371d
 8003668:	0800371d 	.word	0x0800371d
 800366c:	0800371d 	.word	0x0800371d
 8003670:	0800371d 	.word	0x0800371d
 8003674:	080036ad 	.word	0x080036ad
 8003678:	0800371d 	.word	0x0800371d
 800367c:	0800371d 	.word	0x0800371d
 8003680:	0800371d 	.word	0x0800371d
 8003684:	0800371d 	.word	0x0800371d
 8003688:	0800371d 	.word	0x0800371d
 800368c:	0800371d 	.word	0x0800371d
 8003690:	0800371d 	.word	0x0800371d
 8003694:	0800371d 	.word	0x0800371d
 8003698:	0800371d 	.word	0x0800371d
 800369c:	0800371d 	.word	0x0800371d
 80036a0:	08003703 	.word	0x08003703
 80036a4:	0800370d 	.word	0x0800370d
 80036a8:	08003717 	.word	0x08003717
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 80036ac:	6839      	ldr	r1, [r7, #0]
 80036ae:	6978      	ldr	r0, [r7, #20]
 80036b0:	f7ff fe7e 	bl	80033b0 <u8g_pb_Is8PixelVisible>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d02f      	beq.n	800371a <u8g_dev_pb8v1_base_fn+0x192>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 80036ba:	6839      	ldr	r1, [r7, #0]
 80036bc:	6978      	ldr	r0, [r7, #20]
 80036be:	f7ff ff1b 	bl	80034f8 <u8g_pb8v1_Set8PixelOpt2>
      break;
 80036c2:	e02a      	b.n	800371a <u8g_dev_pb8v1_base_fn+0x192>
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 80036c4:	6839      	ldr	r1, [r7, #0]
 80036c6:	6978      	ldr	r0, [r7, #20]
 80036c8:	f7ff feed 	bl	80034a6 <u8g_pb8v1_SetPixel>
      break;
 80036cc:	e026      	b.n	800371c <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 80036ce:	6978      	ldr	r0, [r7, #20]
 80036d0:	f7ff fded 	bl	80032ae <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fd9d 	bl	8003216 <u8g_page_First>
      break;
 80036dc:	e01e      	b.n	800371c <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fdb2 	bl	800324a <u8g_page_Next>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <u8g_dev_pb8v1_base_fn+0x168>
        return 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e016      	b.n	800371e <u8g_dev_pb8v1_base_fn+0x196>
      u8g_pb_Clear(pb);
 80036f0:	6978      	ldr	r0, [r7, #20]
 80036f2:	f7ff fddc 	bl	80032ae <u8g_pb_Clear>
      break;
 80036f6:	e011      	b.n	800371c <u8g_dev_pb8v1_base_fn+0x194>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f7ff fe37 	bl	800336e <u8g_pb_GetPageBox>
      break;
 8003700:	e00c      	b.n	800371c <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	795a      	ldrb	r2, [r3, #5]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	701a      	strb	r2, [r3, #0]
      break;
 800370a:	e007      	b.n	800371c <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	785a      	ldrb	r2, [r3, #1]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	701a      	strb	r2, [r3, #0]
      break;
 8003714:	e002      	b.n	800371c <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 8003716:	2301      	movs	r3, #1
 8003718:	e001      	b.n	800371e <u8g_dev_pb8v1_base_fn+0x196>
      break;
 800371a:	bf00      	nop
  }
  return 1;
 800371c:	2301      	movs	r3, #1
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop

08003728 <u8g_dev_rot_dummy_fn>:
uint8_t u8g_dev_rot90_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg);
uint8_t u8g_dev_rot180_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg);
uint8_t u8g_dev_rot270_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg);

uint8_t u8g_dev_rot_dummy_fn(void *u8g, void *dev, uint8_t msg, void *arg)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	71fb      	strb	r3, [r7, #7]
  return 0;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <u8g_SetRot90>:
  u8g->dev = u8g_dev_rot.dev_mem;
  u8g_UpdateDimension(u8g);
}

void u8g_SetRot90(u8g_t *u8g)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if ( u8g->dev != &u8g_dev_rot )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a09      	ldr	r2, [pc, #36]	; (800377c <u8g_SetRot90+0x34>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d006      	beq.n	8003768 <u8g_SetRot90+0x20>
  {
    u8g_dev_rot.dev_mem = u8g->dev;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4a07      	ldr	r2, [pc, #28]	; (800377c <u8g_SetRot90+0x34>)
 8003760:	6053      	str	r3, [r2, #4]
    u8g->dev = &u8g_dev_rot;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a05      	ldr	r2, [pc, #20]	; (800377c <u8g_SetRot90+0x34>)
 8003766:	605a      	str	r2, [r3, #4]
  }
  u8g_dev_rot.dev_fn = u8g_dev_rot90_fn;
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <u8g_SetRot90+0x34>)
 800376a:	4a05      	ldr	r2, [pc, #20]	; (8003780 <u8g_SetRot90+0x38>)
 800376c:	601a      	str	r2, [r3, #0]
  u8g_UpdateDimension(u8g);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff fc67 	bl	8003042 <u8g_UpdateDimension>
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000020 	.word	0x20000020
 8003780:	08003785 	.word	0x08003785

08003784 <u8g_dev_rot90_fn>:
  u8g_dev_rot.dev_fn = u8g_dev_rot270_fn;
  u8g_UpdateDimension(u8g);
}

uint8_t u8g_dev_rot90_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  u8g_dev_t *rotation_chain = (u8g_dev_t *)(dev->dev_mem);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	61fb      	str	r3, [r7, #28]
  switch(msg)
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	3b17      	subs	r3, #23
 800379e:	2b30      	cmp	r3, #48	; 0x30
 80037a0:	d864      	bhi.n	800386c <u8g_dev_rot90_fn+0xe8>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <u8g_dev_rot90_fn+0x24>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	0800387d 	.word	0x0800387d
 80037ac:	0800386d 	.word	0x0800386d
 80037b0:	0800386d 	.word	0x0800386d
 80037b4:	0800386d 	.word	0x0800386d
 80037b8:	0800386d 	.word	0x0800386d
 80037bc:	0800386d 	.word	0x0800386d
 80037c0:	0800386d 	.word	0x0800386d
 80037c4:	0800386d 	.word	0x0800386d
 80037c8:	0800386d 	.word	0x0800386d
 80037cc:	0800386d 	.word	0x0800386d
 80037d0:	0800386d 	.word	0x0800386d
 80037d4:	0800386d 	.word	0x0800386d
 80037d8:	0800386d 	.word	0x0800386d
 80037dc:	0800386d 	.word	0x0800386d
 80037e0:	0800386d 	.word	0x0800386d
 80037e4:	0800386d 	.word	0x0800386d
 80037e8:	0800386d 	.word	0x0800386d
 80037ec:	0800386d 	.word	0x0800386d
 80037f0:	0800386d 	.word	0x0800386d
 80037f4:	0800386d 	.word	0x0800386d
 80037f8:	0800386d 	.word	0x0800386d
 80037fc:	080038d3 	.word	0x080038d3
 8003800:	0800390f 	.word	0x0800390f
 8003804:	0800386d 	.word	0x0800386d
 8003808:	0800386d 	.word	0x0800386d
 800380c:	0800386d 	.word	0x0800386d
 8003810:	0800386d 	.word	0x0800386d
 8003814:	080038d3 	.word	0x080038d3
 8003818:	0800386d 	.word	0x0800386d
 800381c:	0800386d 	.word	0x0800386d
 8003820:	0800386d 	.word	0x0800386d
 8003824:	0800386d 	.word	0x0800386d
 8003828:	0800386d 	.word	0x0800386d
 800382c:	0800386d 	.word	0x0800386d
 8003830:	0800386d 	.word	0x0800386d
 8003834:	0800386d 	.word	0x0800386d
 8003838:	0800390f 	.word	0x0800390f
 800383c:	0800386d 	.word	0x0800386d
 8003840:	0800386d 	.word	0x0800386d
 8003844:	0800386d 	.word	0x0800386d
 8003848:	0800386d 	.word	0x0800386d
 800384c:	0800386d 	.word	0x0800386d
 8003850:	0800386d 	.word	0x0800386d
 8003854:	0800386d 	.word	0x0800386d
 8003858:	0800386d 	.word	0x0800386d
 800385c:	0800386d 	.word	0x0800386d
 8003860:	0800386d 	.word	0x0800386d
 8003864:	080038af 	.word	0x080038af
 8003868:	080038c1 	.word	0x080038c1
    case U8G_DEV_MSG_PAGE_FIRST:
    case U8G_DEV_MSG_PAGE_NEXT:
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
    case U8G_DEV_MSG_SET_XY_CB:
    */
      return u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
 800386c:	79fa      	ldrb	r2, [r7, #7]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	69f9      	ldr	r1, [r7, #28]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff fb11 	bl	8002e9a <u8g_call_dev_fn>
 8003878:	4603      	mov	r3, r0
 800387a:	e074      	b.n	8003966 <u8g_dev_rot90_fn+0x1e2>
      }
      return u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
#endif /* U8G_DEV_MSG_IS_BBX_INTERSECTION */
    case U8G_DEV_MSG_GET_PAGE_BOX:
      /* get page size from next device in the chain */
      u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
 800387c:	79fa      	ldrb	r2, [r7, #7]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	69f9      	ldr	r1, [r7, #28]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fb09 	bl	8002e9a <u8g_call_dev_fn>
      {
	u8g_box_t new_box;
	//new_box.x0 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y1 - 1;
	//new_box.x1 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y0 - 1;
	
	new_box.x0 = ((u8g_box_t *)arg)->y0;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	753b      	strb	r3, [r7, #20]
	new_box.x1 = ((u8g_box_t *)arg)->y1;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	78db      	ldrb	r3, [r3, #3]
 8003892:	75bb      	strb	r3, [r7, #22]
	new_box.y0 = ((u8g_box_t *)arg)->x0;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	757b      	strb	r3, [r7, #21]
	new_box.y1 = ((u8g_box_t *)arg)->x1;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	789b      	ldrb	r3, [r3, #2]
 800389e:	75fb      	strb	r3, [r7, #23]
	*((u8g_box_t *)arg) = new_box;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	6010      	str	r0, [r2, #0]
	//printf("post x: %3d..%3d y: %3d..%3d\n", ((u8g_box_t *)arg)->x0, ((u8g_box_t *)arg)->x1, ((u8g_box_t *)arg)->y0, ((u8g_box_t *)arg)->y1);
      }
      break;
 80038ac:	e05a      	b.n	8003964 <u8g_dev_rot90_fn+0x1e0>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = u8g_GetHeightLL(u8g,rotation_chain);
 80038ae:	69f9      	ldr	r1, [r7, #28]
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff fba5 	bl	8003000 <u8g_GetHeightLL>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	701a      	strb	r2, [r3, #0]
      break;
 80038be:	e051      	b.n	8003964 <u8g_dev_rot90_fn+0x1e0>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = u8g_GetWidthLL(u8g, rotation_chain);
 80038c0:	69f9      	ldr	r1, [r7, #28]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f7ff fb8b 	bl	8002fde <u8g_GetWidthLL>
 80038c8:	4603      	mov	r3, r0
 80038ca:	461a      	mov	r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	701a      	strb	r2, [r3, #0]
      break;
 80038d0:	e048      	b.n	8003964 <u8g_dev_rot90_fn+0x1e0>
    case U8G_DEV_MSG_SET_PIXEL:
    case U8G_DEV_MSG_SET_TPIXEL:
      {
        u8g_uint_t x, y;
        y = ((u8g_dev_arg_pixel_t *)arg)->x;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	767b      	strb	r3, [r7, #25]
        x = u8g_GetWidthLL(u8g, rotation_chain);
 80038d8:	69f9      	ldr	r1, [r7, #28]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff fb7f 	bl	8002fde <u8g_GetWidthLL>
 80038e0:	4603      	mov	r3, r0
 80038e2:	763b      	strb	r3, [r7, #24]
        x -= ((u8g_dev_arg_pixel_t *)arg)->y; 
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	785b      	ldrb	r3, [r3, #1]
 80038e8:	7e3a      	ldrb	r2, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	763b      	strb	r3, [r7, #24]
        x--;
 80038ee:	7e3b      	ldrb	r3, [r7, #24]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	763b      	strb	r3, [r7, #24]
        ((u8g_dev_arg_pixel_t *)arg)->x = x;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	7e3a      	ldrb	r2, [r7, #24]
 80038f8:	701a      	strb	r2, [r3, #0]
        ((u8g_dev_arg_pixel_t *)arg)->y = y;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	7e7a      	ldrb	r2, [r7, #25]
 80038fe:	705a      	strb	r2, [r3, #1]
      }
      u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
 8003900:	79fa      	ldrb	r2, [r7, #7]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	69f9      	ldr	r1, [r7, #28]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7ff fac7 	bl	8002e9a <u8g_call_dev_fn>
      break;
 800390c:	e02a      	b.n	8003964 <u8g_dev_rot90_fn+0x1e0>
    case U8G_DEV_MSG_SET_8PIXEL:
    case U8G_DEV_MSG_SET_4TPIXEL:
      {
        u8g_uint_t x, y;
	//uint16_t x,y;
        y = ((u8g_dev_arg_pixel_t *)arg)->x;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	76fb      	strb	r3, [r7, #27]
        x = u8g_GetWidthLL(u8g, rotation_chain);
 8003914:	69f9      	ldr	r1, [r7, #28]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f7ff fb61 	bl	8002fde <u8g_GetWidthLL>
 800391c:	4603      	mov	r3, r0
 800391e:	76bb      	strb	r3, [r7, #26]
        x -= ((u8g_dev_arg_pixel_t *)arg)->y; 
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	785b      	ldrb	r3, [r3, #1]
 8003924:	7eba      	ldrb	r2, [r7, #26]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	76bb      	strb	r3, [r7, #26]
        x--;
 800392a:	7ebb      	ldrb	r3, [r7, #26]
 800392c:	3b01      	subs	r3, #1
 800392e:	76bb      	strb	r3, [r7, #26]
        ((u8g_dev_arg_pixel_t *)arg)->x = x;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	7eba      	ldrb	r2, [r7, #26]
 8003934:	701a      	strb	r2, [r3, #0]
        ((u8g_dev_arg_pixel_t *)arg)->y = y;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	7efa      	ldrb	r2, [r7, #27]
 800393a:	705a      	strb	r2, [r3, #1]
        ((u8g_dev_arg_pixel_t *)arg)->dir+=1;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	78db      	ldrb	r3, [r3, #3]
 8003940:	3301      	adds	r3, #1
 8003942:	b2da      	uxtb	r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	70da      	strb	r2, [r3, #3]
        ((u8g_dev_arg_pixel_t *)arg)->dir &= 3;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	78db      	ldrb	r3, [r3, #3]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	b2da      	uxtb	r2, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	70da      	strb	r2, [r3, #3]
      }
      u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
 8003956:	79fa      	ldrb	r2, [r7, #7]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	69f9      	ldr	r1, [r7, #28]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7ff fa9c 	bl	8002e9a <u8g_call_dev_fn>
      break;
 8003962:	bf00      	nop
  }
  return 1;
 8003964:	2301      	movs	r3, #1
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop

08003970 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	71fb      	strb	r3, [r7, #7]
  /* the dummy procedure does nothing */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <u8g_Delay>:
#include "u8g_arm.h"  
   
static uint8_t control = 0;  
void u8g_Delay(uint16_t val)  
{  
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	80fb      	strh	r3, [r7, #6]
  
 HAL_Delay(val);  
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f968 	bl	8003c68 <HAL_Delay>
}  
 8003998:	bf00      	nop
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <u8g_xMicroDelay>:

void u8g_xMicroDelay(uint16_t val) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	80fb      	strh	r3, [r7, #6]
  static uint32_t i, j;
  static uint32_t freq;
  freq = HAL_RCC_GetSysClockFreq() / 1000000;
 80039aa:	f003 fd23 	bl	80073f4 <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <u8g_xMicroDelay+0x68>)
 80039b2:	fba3 2302 	umull	r2, r3, r3, r2
 80039b6:	0c9b      	lsrs	r3, r3, #18
 80039b8:	4a14      	ldr	r2, [pc, #80]	; (8003a0c <u8g_xMicroDelay+0x6c>)
 80039ba:	6013      	str	r3, [r2, #0]

  for (i = 0; i < val;) {
 80039bc:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <u8g_xMicroDelay+0x70>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	e018      	b.n	80039f6 <u8g_xMicroDelay+0x56>
    for (j = 0; j < freq; ++j) {
 80039c4:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <u8g_xMicroDelay+0x74>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	e009      	b.n	80039e0 <u8g_xMicroDelay+0x40>
      ++j;
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <u8g_xMicroDelay+0x74>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	4a10      	ldr	r2, [pc, #64]	; (8003a14 <u8g_xMicroDelay+0x74>)
 80039d4:	6013      	str	r3, [r2, #0]
    for (j = 0; j < freq; ++j) {
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <u8g_xMicroDelay+0x74>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3301      	adds	r3, #1
 80039dc:	4a0d      	ldr	r2, [pc, #52]	; (8003a14 <u8g_xMicroDelay+0x74>)
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <u8g_xMicroDelay+0x74>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <u8g_xMicroDelay+0x6c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d3ef      	bcc.n	80039cc <u8g_xMicroDelay+0x2c>
    }
    ++i;
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <u8g_xMicroDelay+0x70>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <u8g_xMicroDelay+0x70>)
 80039f4:	6013      	str	r3, [r2, #0]
  for (i = 0; i < val;) {
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <u8g_xMicroDelay+0x70>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d8e1      	bhi.n	80039c4 <u8g_xMicroDelay+0x24>
  }
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	431bde83 	.word	0x431bde83
 8003a0c:	20000480 	.word	0x20000480
 8003a10:	20000484 	.word	0x20000484
 8003a14:	20000488 	.word	0x20000488

08003a18 <u8g_MicroDelay>:

void u8g_MicroDelay(void)  
{  
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  u8g_xMicroDelay(1); 
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	f7ff ffbf 	bl	80039a0 <u8g_xMicroDelay>
}  
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <u8g_10MicroDelay>:
  
void u8g_10MicroDelay(void)  
{  
 8003a26:	b580      	push	{r7, lr}
 8003a28:	af00      	add	r7, sp, #0
  u8g_xMicroDelay(10);  
 8003a2a:	200a      	movs	r0, #10
 8003a2c:	f7ff ffb8 	bl	80039a0 <u8g_xMicroDelay>
}  
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <u8g_com_hw_i2c_fn>:
  
  
uint8_t u8g_com_hw_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)  
{  
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af04      	add	r7, sp, #16
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	72fb      	strb	r3, [r7, #11]
 8003a42:	4613      	mov	r3, r2
 8003a44:	72bb      	strb	r3, [r7, #10]
 switch(msg)  
 8003a46:	7afb      	ldrb	r3, [r7, #11]
 8003a48:	2b07      	cmp	r3, #7
 8003a4a:	d846      	bhi.n	8003ada <u8g_com_hw_i2c_fn+0xa6>
 8003a4c:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <u8g_com_hw_i2c_fn+0x20>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003adb 	.word	0x08003adb
 8003a58:	08003a75 	.word	0x08003a75
 8003a5c:	08003a7b 	.word	0x08003a7b
 8003a60:	08003adb 	.word	0x08003adb
 8003a64:	08003adb 	.word	0x08003adb
 8003a68:	08003a95 	.word	0x08003a95
 8003a6c:	08003ab7 	.word	0x08003ab7
 8003a70:	08003ab7 	.word	0x08003ab7
 {  
  case U8G_COM_MSG_STOP:  
   break;  
  
  case U8G_COM_MSG_INIT:  
   u8g_MicroDelay();  
 8003a74:	f7ff ffd0 	bl	8003a18 <u8g_MicroDelay>
   break;  
 8003a78:	e02f      	b.n	8003ada <u8g_com_hw_i2c_fn+0xa6>
  
  case U8G_COM_MSG_ADDRESS:           /* define cmd (arg_val = 0) or data mode (arg_val = 1) */  
   u8g_10MicroDelay();  
 8003a7a:	f7ff ffd4 	bl	8003a26 <u8g_10MicroDelay>
   if (arg_val == 0)  
 8003a7e:	7abb      	ldrb	r3, [r7, #10]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d103      	bne.n	8003a8c <u8g_com_hw_i2c_fn+0x58>
   {  
        control = 0;  
 8003a84:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <u8g_com_hw_i2c_fn+0xb0>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
   }  
   else  
   {  
        control = 0x40;  
   }  
   break;  
 8003a8a:	e026      	b.n	8003ada <u8g_com_hw_i2c_fn+0xa6>
        control = 0x40;  
 8003a8c:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <u8g_com_hw_i2c_fn+0xb0>)
 8003a8e:	2240      	movs	r2, #64	; 0x40
 8003a90:	701a      	strb	r2, [r3, #0]
   break;  
 8003a92:	e022      	b.n	8003ada <u8g_com_hw_i2c_fn+0xa6>
  
  case U8G_COM_MSG_WRITE_BYTE:  
  {  
    HAL_I2C_Mem_Write(&I2C_HANDLER, DEVICE_ADDRESS, control, 1, &arg_val, 1, I2C_TIMEOUT);    
 8003a94:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <u8g_com_hw_i2c_fn+0xb0>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a9e:	9302      	str	r3, [sp, #8]
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	f107 030a 	add.w	r3, r7, #10
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	2301      	movs	r3, #1
 8003aac:	2178      	movs	r1, #120	; 0x78
 8003aae:	480e      	ldr	r0, [pc, #56]	; (8003ae8 <u8g_com_hw_i2c_fn+0xb4>)
 8003ab0:	f000 fce8 	bl	8004484 <HAL_I2C_Mem_Write>
  }  
   break;  
 8003ab4:	e011      	b.n	8003ada <u8g_com_hw_i2c_fn+0xa6>
  
  case U8G_COM_MSG_WRITE_SEQ:  
  case U8G_COM_MSG_WRITE_SEQ_P:  
  {  
    HAL_I2C_Mem_Write(&I2C_HANDLER, DEVICE_ADDRESS, control, 1, arg_ptr, arg_val, I2C_TIMEOUT); 
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <u8g_com_hw_i2c_fn+0xb0>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	b299      	uxth	r1, r3
 8003abc:	7abb      	ldrb	r3, [r7, #10]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ac4:	9202      	str	r2, [sp, #8]
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2301      	movs	r3, #1
 8003ace:	460a      	mov	r2, r1
 8003ad0:	2178      	movs	r1, #120	; 0x78
 8003ad2:	4805      	ldr	r0, [pc, #20]	; (8003ae8 <u8g_com_hw_i2c_fn+0xb4>)
 8003ad4:	f000 fcd6 	bl	8004484 <HAL_I2C_Mem_Write>
  }  
   break;  
 8003ad8:	bf00      	nop
 }  
 return 1;  
 8003ada:	2301      	movs	r3, #1
}  
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	2000047c 	.word	0x2000047c
 8003ae8:	200007d8 	.word	0x200007d8

08003aec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003aec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003aee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003af0:	3304      	adds	r3, #4

08003af2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003af2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003af4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003af6:	d3f9      	bcc.n	8003aec <CopyDataInit>
  bx lr
 8003af8:	4770      	bx	lr

08003afa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003afa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003afc:	3004      	adds	r0, #4

08003afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003afe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003b00:	d3fb      	bcc.n	8003afa <FillZerobss>
  bx lr
 8003b02:	4770      	bx	lr

08003b04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b04:	480c      	ldr	r0, [pc, #48]	; (8003b38 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003b06:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003b08:	f7fe fae6 	bl	80020d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003b0c:	480b      	ldr	r0, [pc, #44]	; (8003b3c <LoopForever+0x8>)
 8003b0e:	490c      	ldr	r1, [pc, #48]	; (8003b40 <LoopForever+0xc>)
 8003b10:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <LoopForever+0x10>)
 8003b12:	2300      	movs	r3, #0
 8003b14:	f7ff ffed 	bl	8003af2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003b18:	480b      	ldr	r0, [pc, #44]	; (8003b48 <LoopForever+0x14>)
 8003b1a:	490c      	ldr	r1, [pc, #48]	; (8003b4c <LoopForever+0x18>)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f7ff ffee 	bl	8003afe <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003b22:	480b      	ldr	r0, [pc, #44]	; (8003b50 <LoopForever+0x1c>)
 8003b24:	490b      	ldr	r1, [pc, #44]	; (8003b54 <LoopForever+0x20>)
 8003b26:	2300      	movs	r3, #0
 8003b28:	f7ff ffe9 	bl	8003afe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003b2c:	f00b fdb2 	bl	800f694 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003b30:	f7fd fd9e 	bl	8001670 <main>

08003b34 <LoopForever>:

LoopForever:
  b LoopForever
 8003b34:	e7fe      	b.n	8003b34 <LoopForever>
 8003b36:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003b38:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003b3c:	20000004 	.word	0x20000004
 8003b40:	20000228 	.word	0x20000228
 8003b44:	08011968 	.word	0x08011968
  INIT_BSS _sbss, _ebss
 8003b48:	200003b0 	.word	0x200003b0
 8003b4c:	200020bc 	.word	0x200020bc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003b50:	200301e0 	.word	0x200301e0
 8003b54:	20030a57 	.word	0x20030a57

08003b58 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b58:	e7fe      	b.n	8003b58 <ADC1_IRQHandler>
	...

08003b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <HAL_Init+0x3c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <HAL_Init+0x3c>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b72:	2003      	movs	r0, #3
 8003b74:	f000 f9c8 	bl	8003f08 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f000 f80f 	bl	8003b9c <HAL_InitTick>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	71fb      	strb	r3, [r7, #7]
 8003b88:	e001      	b.n	8003b8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b8a:	f7fe f893 	bl	8001cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	58004000 	.word	0x58004000

08003b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <HAL_InitTick+0x6c>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d024      	beq.n	8003bfa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003bb0:	f003 fc8a 	bl	80074c8 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <HAL_InitTick+0x6c>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f9de 	bl	8003f8a <HAL_SYSTICK_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10f      	bne.n	8003bf4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b0f      	cmp	r3, #15
 8003bd8:	d809      	bhi.n	8003bee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	f04f 30ff 	mov.w	r0, #4294967295
 8003be2:	f000 f99c 	bl	8003f1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003be6:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <HAL_InitTick+0x70>)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e007      	b.n	8003bfe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
 8003bf2:	e004      	b.n	8003bfe <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e001      	b.n	8003bfe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000030 	.word	0x20000030
 8003c0c:	2000002c 	.word	0x2000002c

08003c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_IncTick+0x20>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_IncTick+0x24>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <HAL_IncTick+0x24>)
 8003c22:	6013      	str	r3, [r2, #0]
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000030 	.word	0x20000030
 8003c34:	2000096c 	.word	0x2000096c

08003c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <HAL_GetTick+0x14>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	2000096c 	.word	0x2000096c

08003c50 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003c54:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <HAL_GetTickPrio+0x14>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	2000002c 	.word	0x2000002c

08003c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8003c70:	f7ff ffe2 	bl	8003c38 <HAL_GetTick>
 8003c74:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d005      	beq.n	8003c8e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <HAL_Delay+0x40>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8003c8e:	bf00      	nop
 8003c90:	f7ff ffd2 	bl	8003c38 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d8f7      	bhi.n	8003c90 <HAL_Delay+0x28>
    {
    }
  }
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000030 	.word	0x20000030

08003cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cde:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	60d3      	str	r3, [r2, #12]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <__NVIC_GetPriorityGrouping+0x18>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	f003 0307 	and.w	r3, r3, #7
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	db0b      	blt.n	8003d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	f003 021f 	and.w	r2, r3, #31
 8003d28:	4907      	ldr	r1, [pc, #28]	; (8003d48 <__NVIC_EnableIRQ+0x38>)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	2001      	movs	r0, #1
 8003d32:	fa00 f202 	lsl.w	r2, r0, r2
 8003d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	e000e100 	.word	0xe000e100

08003d4c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	db10      	blt.n	8003d80 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	f003 021f 	and.w	r2, r3, #31
 8003d64:	4909      	ldr	r1, [pc, #36]	; (8003d8c <__NVIC_DisableIRQ+0x40>)
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d72:	3320      	adds	r3, #32
 8003d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003d7c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000e100 	.word	0xe000e100

08003d90 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	db0c      	blt.n	8003dbc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	f003 021f 	and.w	r2, r3, #31
 8003da8:	4907      	ldr	r1, [pc, #28]	; (8003dc8 <__NVIC_SetPendingIRQ+0x38>)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2001      	movs	r0, #1
 8003db2:	fa00 f202 	lsl.w	r2, r0, r2
 8003db6:	3340      	adds	r3, #64	; 0x40
 8003db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000e100 	.word	0xe000e100

08003dcc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	db0c      	blt.n	8003df8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	f003 021f 	and.w	r2, r3, #31
 8003de4:	4907      	ldr	r1, [pc, #28]	; (8003e04 <__NVIC_ClearPendingIRQ+0x38>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2001      	movs	r0, #1
 8003dee:	fa00 f202 	lsl.w	r2, r0, r2
 8003df2:	3360      	adds	r3, #96	; 0x60
 8003df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000e100 	.word	0xe000e100

08003e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	6039      	str	r1, [r7, #0]
 8003e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	db0a      	blt.n	8003e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	490c      	ldr	r1, [pc, #48]	; (8003e54 <__NVIC_SetPriority+0x4c>)
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	0112      	lsls	r2, r2, #4
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e30:	e00a      	b.n	8003e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4908      	ldr	r1, [pc, #32]	; (8003e58 <__NVIC_SetPriority+0x50>)
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	3b04      	subs	r3, #4
 8003e40:	0112      	lsls	r2, r2, #4
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	440b      	add	r3, r1
 8003e46:	761a      	strb	r2, [r3, #24]
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000e100 	.word	0xe000e100
 8003e58:	e000ed00 	.word	0xe000ed00

08003e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f1c3 0307 	rsb	r3, r3, #7
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	bf28      	it	cs
 8003e7a:	2304      	movcs	r3, #4
 8003e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3304      	adds	r3, #4
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d902      	bls.n	8003e8c <NVIC_EncodePriority+0x30>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3b03      	subs	r3, #3
 8003e8a:	e000      	b.n	8003e8e <NVIC_EncodePriority+0x32>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	f04f 32ff 	mov.w	r2, #4294967295
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	43d9      	mvns	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb4:	4313      	orrs	r3, r2
         );
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3724      	adds	r7, #36	; 0x24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed4:	d301      	bcc.n	8003eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e00f      	b.n	8003efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eda:	4a0a      	ldr	r2, [pc, #40]	; (8003f04 <SysTick_Config+0x40>)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ee2:	210f      	movs	r1, #15
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	f7ff ff8e 	bl	8003e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <SysTick_Config+0x40>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ef2:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <SysTick_Config+0x40>)
 8003ef4:	2207      	movs	r2, #7
 8003ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	e000e010 	.word	0xe000e010

08003f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fecb 	bl	8003cac <__NVIC_SetPriorityGrouping>
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f2c:	f7ff fee2 	bl	8003cf4 <__NVIC_GetPriorityGrouping>
 8003f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff ff90 	bl	8003e5c <NVIC_EncodePriority>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff5f 	bl	8003e08 <__NVIC_SetPriority>
}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fed5 	bl	8003d10 <__NVIC_EnableIRQ>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	4603      	mov	r3, r0
 8003f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff fee5 	bl	8003d4c <__NVIC_DisableIRQ>
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff ff96 	bl	8003ec4 <SysTick_Config>
 8003f98:	4603      	mov	r3, r0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	4603      	mov	r3, r0
 8003faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff feed 	bl	8003d90 <__NVIC_SetPendingIRQ>
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fefd 	bl	8003dcc <__NVIC_ClearPendingIRQ>
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fea:	e14c      	b.n	8004286 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 813e 	beq.w	8004280 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d00b      	beq.n	8004024 <HAL_GPIO_Init+0x48>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d007      	beq.n	8004024 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004018:	2b11      	cmp	r3, #17
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b12      	cmp	r3, #18
 8004022:	d130      	bne.n	8004086 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	2203      	movs	r2, #3
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4013      	ands	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800405a:	2201      	movs	r2, #1
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	f003 0201 	and.w	r2, r3, #1
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	2203      	movs	r2, #3
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4013      	ands	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_Init+0xea>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b12      	cmp	r3, #18
 80040c4:	d123      	bne.n	800410e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	08da      	lsrs	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3208      	adds	r2, #8
 80040ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	220f      	movs	r2, #15
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4013      	ands	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	08da      	lsrs	r2, r3, #3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3208      	adds	r2, #8
 8004108:	6939      	ldr	r1, [r7, #16]
 800410a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	2203      	movs	r2, #3
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4013      	ands	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f003 0203 	and.w	r2, r3, #3
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8098 	beq.w	8004280 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004150:	4a54      	ldr	r2, [pc, #336]	; (80042a4 <HAL_GPIO_Init+0x2c8>)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	089b      	lsrs	r3, r3, #2
 8004156:	3302      	adds	r3, #2
 8004158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	220f      	movs	r2, #15
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4013      	ands	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800417a:	d019      	beq.n	80041b0 <HAL_GPIO_Init+0x1d4>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a4a      	ldr	r2, [pc, #296]	; (80042a8 <HAL_GPIO_Init+0x2cc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d013      	beq.n	80041ac <HAL_GPIO_Init+0x1d0>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a49      	ldr	r2, [pc, #292]	; (80042ac <HAL_GPIO_Init+0x2d0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00d      	beq.n	80041a8 <HAL_GPIO_Init+0x1cc>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a48      	ldr	r2, [pc, #288]	; (80042b0 <HAL_GPIO_Init+0x2d4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d007      	beq.n	80041a4 <HAL_GPIO_Init+0x1c8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a47      	ldr	r2, [pc, #284]	; (80042b4 <HAL_GPIO_Init+0x2d8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <HAL_GPIO_Init+0x1c4>
 800419c:	2304      	movs	r3, #4
 800419e:	e008      	b.n	80041b2 <HAL_GPIO_Init+0x1d6>
 80041a0:	2307      	movs	r3, #7
 80041a2:	e006      	b.n	80041b2 <HAL_GPIO_Init+0x1d6>
 80041a4:	2303      	movs	r3, #3
 80041a6:	e004      	b.n	80041b2 <HAL_GPIO_Init+0x1d6>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e002      	b.n	80041b2 <HAL_GPIO_Init+0x1d6>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <HAL_GPIO_Init+0x1d6>
 80041b0:	2300      	movs	r3, #0
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	f002 0203 	and.w	r2, r2, #3
 80041b8:	0092      	lsls	r2, r2, #2
 80041ba:	4093      	lsls	r3, r2
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041c2:	4938      	ldr	r1, [pc, #224]	; (80042a4 <HAL_GPIO_Init+0x2c8>)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	089b      	lsrs	r3, r3, #2
 80041c8:	3302      	adds	r3, #2
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041d0:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <HAL_GPIO_Init+0x2dc>)
 80041d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	43db      	mvns	r3, r3
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4013      	ands	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041f6:	4a30      	ldr	r2, [pc, #192]	; (80042b8 <HAL_GPIO_Init+0x2dc>)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80041fe:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <HAL_GPIO_Init+0x2dc>)
 8004200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	43db      	mvns	r3, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004224:	4a24      	ldr	r2, [pc, #144]	; (80042b8 <HAL_GPIO_Init+0x2dc>)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800422c:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <HAL_GPIO_Init+0x2dc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	43db      	mvns	r3, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004250:	4a19      	ldr	r2, [pc, #100]	; (80042b8 <HAL_GPIO_Init+0x2dc>)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004256:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <HAL_GPIO_Init+0x2dc>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	43db      	mvns	r3, r3
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4013      	ands	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800427a:	4a0f      	ldr	r2, [pc, #60]	; (80042b8 <HAL_GPIO_Init+0x2dc>)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	3301      	adds	r3, #1
 8004284:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	f47f aeab 	bne.w	8003fec <HAL_GPIO_Init+0x10>
  }
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40010000 	.word	0x40010000
 80042a8:	48000400 	.word	0x48000400
 80042ac:	48000800 	.word	0x48000800
 80042b0:	48000c00 	.word	0x48000c00
 80042b4:	48001000 	.word	0x48001000
 80042b8:	58000800 	.word	0x58000800

080042bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
 80042c8:	4613      	mov	r3, r2
 80042ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042cc:	787b      	ldrb	r3, [r7, #1]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042d2:	887a      	ldrh	r2, [r7, #2]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042d8:	e002      	b.n	80042e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042da:	887a      	ldrh	r2, [r7, #2]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042f6:	4b08      	ldr	r3, [pc, #32]	; (8004318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d006      	beq.n	8004310 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004302:	4a05      	ldr	r2, [pc, #20]	; (8004318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fc f964 	bl	80005d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	58000800 	.word	0x58000800

0800431c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <HAL_HSEM_IRQHandler+0x30>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004328:	4b08      	ldr	r3, [pc, #32]	; (800434c <HAL_HSEM_IRQHandler+0x30>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	43db      	mvns	r3, r3
 8004330:	4906      	ldr	r1, [pc, #24]	; (800434c <HAL_HSEM_IRQHandler+0x30>)
 8004332:	4013      	ands	r3, r2
 8004334:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004336:	4a05      	ldr	r2, [pc, #20]	; (800434c <HAL_HSEM_IRQHandler+0x30>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f807 	bl	8004350 <HAL_HSEM_FreeCallback>
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	58001500 	.word	0x58001500

08004350 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e081      	b.n	800447a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fd fca2 	bl	8001cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2224      	movs	r2, #36	; 0x24
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0201 	bic.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d107      	bne.n	80043de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	e006      	b.n	80043ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d104      	bne.n	80043fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800440c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004410:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004420:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	ea42 0103 	orr.w	r1, r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	021a      	lsls	r2, r3, #8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69d9      	ldr	r1, [r3, #28]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1a      	ldr	r2, [r3, #32]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	4608      	mov	r0, r1
 800448e:	4611      	mov	r1, r2
 8004490:	461a      	mov	r2, r3
 8004492:	4603      	mov	r3, r0
 8004494:	817b      	strh	r3, [r7, #10]
 8004496:	460b      	mov	r3, r1
 8004498:	813b      	strh	r3, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	f040 80f9 	bne.w	800469e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_I2C_Mem_Write+0x34>
 80044b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0ed      	b.n	80046a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_I2C_Mem_Write+0x4e>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e0e6      	b.n	80046a0 <HAL_I2C_Mem_Write+0x21c>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044da:	f7ff fbad 	bl	8003c38 <HAL_GetTick>
 80044de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	2319      	movs	r3, #25
 80044e6:	2201      	movs	r2, #1
 80044e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f955 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0d1      	b.n	80046a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2221      	movs	r2, #33	; 0x21
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2240      	movs	r2, #64	; 0x40
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a3a      	ldr	r2, [r7, #32]
 8004516:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800451c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004524:	88f8      	ldrh	r0, [r7, #6]
 8004526:	893a      	ldrh	r2, [r7, #8]
 8004528:	8979      	ldrh	r1, [r7, #10]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	4603      	mov	r3, r0
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f8b9 	bl	80046ac <I2C_RequestMemoryWrite>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0a9      	b.n	80046a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	2bff      	cmp	r3, #255	; 0xff
 8004554:	d90e      	bls.n	8004574 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	22ff      	movs	r2, #255	; 0xff
 800455a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	b2da      	uxtb	r2, r3
 8004562:	8979      	ldrh	r1, [r7, #10]
 8004564:	2300      	movs	r3, #0
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fa37 	bl	80049e0 <I2C_TransferConfig>
 8004572:	e00f      	b.n	8004594 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004582:	b2da      	uxtb	r2, r3
 8004584:	8979      	ldrh	r1, [r7, #10]
 8004586:	2300      	movs	r3, #0
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fa26 	bl	80049e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f93f 	bl	800481c <I2C_WaitOnTXISFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e07b      	b.n	80046a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d034      	beq.n	800464c <HAL_I2C_Mem_Write+0x1c8>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d130      	bne.n	800464c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	2200      	movs	r2, #0
 80045f2:	2180      	movs	r1, #128	; 0x80
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f8d1 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e04d      	b.n	80046a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2bff      	cmp	r3, #255	; 0xff
 800460c:	d90e      	bls.n	800462c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	22ff      	movs	r2, #255	; 0xff
 8004612:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004618:	b2da      	uxtb	r2, r3
 800461a:	8979      	ldrh	r1, [r7, #10]
 800461c:	2300      	movs	r3, #0
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f9db 	bl	80049e0 <I2C_TransferConfig>
 800462a:	e00f      	b.n	800464c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463a:	b2da      	uxtb	r2, r3
 800463c:	8979      	ldrh	r1, [r7, #10]
 800463e:	2300      	movs	r3, #0
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f9ca 	bl	80049e0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d19e      	bne.n	8004594 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f91e 	bl	800489c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e01a      	b.n	80046a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2220      	movs	r2, #32
 8004670:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6859      	ldr	r1, [r3, #4]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <HAL_I2C_Mem_Write+0x224>)
 800467e:	400b      	ands	r3, r1
 8004680:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
  }
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	fe00e800 	.word	0xfe00e800

080046ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	817b      	strh	r3, [r7, #10]
 80046be:	460b      	mov	r3, r1
 80046c0:	813b      	strh	r3, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	8979      	ldrh	r1, [r7, #10]
 80046cc:	4b20      	ldr	r3, [pc, #128]	; (8004750 <I2C_RequestMemoryWrite+0xa4>)
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f983 	bl	80049e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	69b9      	ldr	r1, [r7, #24]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f89c 	bl	800481c <I2C_WaitOnTXISFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e02c      	b.n	8004748 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d105      	bne.n	8004700 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046f4:	893b      	ldrh	r3, [r7, #8]
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	629a      	str	r2, [r3, #40]	; 0x28
 80046fe:	e015      	b.n	800472c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004700:	893b      	ldrh	r3, [r7, #8]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	b29b      	uxth	r3, r3
 8004706:	b2da      	uxtb	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	69b9      	ldr	r1, [r7, #24]
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f882 	bl	800481c <I2C_WaitOnTXISFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e012      	b.n	8004748 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004722:	893b      	ldrh	r3, [r7, #8]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	2200      	movs	r2, #0
 8004734:	2180      	movs	r1, #128	; 0x80
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f830 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	80002000 	.word	0x80002000

08004754 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b02      	cmp	r3, #2
 8004768:	d103      	bne.n	8004772 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2200      	movs	r2, #0
 8004770:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b01      	cmp	r3, #1
 800477e:	d007      	beq.n	8004790 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	619a      	str	r2, [r3, #24]
  }
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ac:	e022      	b.n	80047f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d01e      	beq.n	80047f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7ff fa3f 	bl	8003c38 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d113      	bne.n	80047f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e00f      	b.n	8004814 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4013      	ands	r3, r2
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	429a      	cmp	r2, r3
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	429a      	cmp	r2, r3
 8004810:	d0cd      	beq.n	80047ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004828:	e02c      	b.n	8004884 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f870 	bl	8004914 <I2C_IsAcknowledgeFailed>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e02a      	b.n	8004894 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d01e      	beq.n	8004884 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7ff f9f7 	bl	8003c38 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d113      	bne.n	8004884 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e007      	b.n	8004894 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b02      	cmp	r3, #2
 8004890:	d1cb      	bne.n	800482a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048a8:	e028      	b.n	80048fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f830 	bl	8004914 <I2C_IsAcknowledgeFailed>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e026      	b.n	800490c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048be:	f7ff f9bb 	bl	8003c38 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d113      	bne.n	80048fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	f043 0220 	orr.w	r2, r3, #32
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e007      	b.n	800490c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b20      	cmp	r3, #32
 8004908:	d1cf      	bne.n	80048aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b10      	cmp	r3, #16
 800492c:	d151      	bne.n	80049d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800492e:	e022      	b.n	8004976 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d01e      	beq.n	8004976 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004938:	f7ff f97e 	bl	8003c38 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <I2C_IsAcknowledgeFailed+0x3a>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d113      	bne.n	8004976 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	f043 0220 	orr.w	r2, r3, #32
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e02e      	b.n	80049d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b20      	cmp	r3, #32
 8004982:	d1d5      	bne.n	8004930 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2210      	movs	r2, #16
 800498a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2220      	movs	r2, #32
 8004992:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff fedd 	bl	8004754 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6859      	ldr	r1, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <I2C_IsAcknowledgeFailed+0xc8>)
 80049a6:	400b      	ands	r3, r1
 80049a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f043 0204 	orr.w	r2, r3, #4
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	fe00e800 	.word	0xfe00e800

080049e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	460b      	mov	r3, r1
 80049ec:	817b      	strh	r3, [r7, #10]
 80049ee:	4613      	mov	r3, r2
 80049f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	0d5b      	lsrs	r3, r3, #21
 80049fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <I2C_TransferConfig+0x58>)
 8004a02:	430b      	orrs	r3, r1
 8004a04:	43db      	mvns	r3, r3
 8004a06:	ea02 0103 	and.w	r1, r2, r3
 8004a0a:	897b      	ldrh	r3, [r7, #10]
 8004a0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a10:	7a7b      	ldrb	r3, [r7, #9]
 8004a12:	041b      	lsls	r3, r3, #16
 8004a14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	03ff63ff 	.word	0x03ff63ff

08004a3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d138      	bne.n	8004ac4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e032      	b.n	8004ac6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2224      	movs	r2, #36	; 0x24
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0201 	bic.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6819      	ldr	r1, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
  }
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d139      	bne.n	8004b5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e033      	b.n	8004b5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2224      	movs	r2, #36	; 0x24
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0201 	bic.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e000      	b.n	8004b5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
  }
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <LL_RCC_SetLPTIMClockSource>:
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0c1b      	lsrs	r3, r3, #16
 8004b7e:	041b      	lsls	r3, r3, #16
 8004b80:	43db      	mvns	r3, r3
 8004b82:	401a      	ands	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <LL_RCC_GetLPTIMClockSource>:
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8004ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004baa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	0c1a      	lsrs	r2, r3, #16
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4313      	orrs	r3, r2
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <LL_APB1_GRP1_ForceReset>:
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <LL_APB1_GRP2_ForceReset>:
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8004bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <LL_APB1_GRP1_ReleaseReset>:
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8004c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c22:	4013      	ands	r3, r2
 8004c24:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <LL_APB1_GRP2_ReleaseReset>:
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8004c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	43db      	mvns	r3, r3
 8004c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c48:	4013      	ands	r3, r2
 8004c4a:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e082      	b.n	8004d70 <HAL_LPTIM_Init+0x118>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fd f858 	bl	8001d34 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d103      	bne.n	8004ca4 <HAL_LPTIM_Init+0x4c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0306 	bic.w	r3, r3, #6
 8004ca2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004cb6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d103      	bne.n	8004cc8 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 03d8 	bic.w	r3, r3, #216	; 0xd8
 8004cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <HAL_LPTIM_Init+0x120>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004cd8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004cde:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004ce4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004cea:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d107      	bne.n	8004d0a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004d02:	4313      	orrs	r3, r2
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d104      	bne.n	8004d1c <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <HAL_LPTIM_Init+0xe0>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8004d30:	4313      	orrs	r3, r2
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a0d      	ldr	r2, [pc, #52]	; (8004d7c <HAL_LPTIM_Init+0x124>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d108      	bne.n	8004d5c <HAL_LPTIM_Init+0x104>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	621a      	str	r2, [r3, #32]
 8004d5a:	e004      	b.n	8004d66 <HAL_LPTIM_Init+0x10e>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d64:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	ff19f1f8 	.word	0xff19f1f8
 8004d7c:	40007c00 	.word	0x40007c00

08004d80 <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f023 0306 	bic.w	r3, r3, #6
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2210      	movs	r2, #16
 8004dda:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004de4:	2110      	movs	r1, #16
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f974 	bl	80050d4 <LPTIM_WaitForFlag>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d101      	bne.n	8004df6 <HAL_LPTIM_Encoder_Start+0x76>
  {
    return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e00c      	b.n	8004e10 <HAL_LPTIM_Encoder_Start+0x90>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0204 	orr.w	r2, r2, #4
 8004e04:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_LPTIM_Encoder_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2202      	movs	r2, #2
 8004e26:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Configure edge sensitivity for encoder mode */
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f023 0306 	bic.w	r3, r3, #6
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2210      	movs	r2, #16
 8004e72:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004e7c:	2110      	movs	r1, #16
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f928 	bl	80050d4 <LPTIM_WaitForFlag>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d101      	bne.n	8004e8e <HAL_LPTIM_Encoder_Start_IT+0x76>
  {
    return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e02f      	b.n	8004eee <HAL_LPTIM_Encoder_Start_IT+0xd6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f950 	bl	8005134 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f90f 	bl	80050b8 <HAL_LPTIM_GetState>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d101      	bne.n	8004ea4 <HAL_LPTIM_Encoder_Start_IT+0x8c>
  {
    return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e024      	b.n	8004eee <HAL_LPTIM_Encoder_Start_IT+0xd6>
  }

  /* Enable "switch to down direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb2:	609a      	str	r2, [r3, #8]

  /* Enable "switch to up direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0220 	orr.w	r2, r2, #32
 8004ec2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0204 	orr.w	r2, r2, #4
 8004ee2:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b082      	sub	sp, #8
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d10d      	bne.n	8004f28 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d106      	bne.n	8004f28 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f882 	bl	800502c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d10d      	bne.n	8004f52 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d106      	bne.n	8004f52 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f877 	bl	8005040 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d10d      	bne.n	8004f7c <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d106      	bne.n	8004f7c <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2204      	movs	r2, #4
 8004f74:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f86c 	bl	8005054 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d10d      	bne.n	8004fa6 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d106      	bne.n	8004fa6 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f861 	bl	8005068 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d10d      	bne.n	8004fd0 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d106      	bne.n	8004fd0 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2210      	movs	r2, #16
 8004fc8:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f856 	bl	800507c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d10d      	bne.n	8004ffa <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	d106      	bne.n	8004ffa <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f84b 	bl	8005090 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d10d      	bne.n	8005024 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d106      	bne.n	8005024 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2240      	movs	r2, #64	; 0x40
 800501c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f840 	bl	80050a4 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80050c6:	b2db      	uxtb	r3, r3
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80050e2:	4b12      	ldr	r3, [pc, #72]	; (800512c <LPTIM_WaitForFlag+0x58>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a12      	ldr	r2, [pc, #72]	; (8005130 <LPTIM_WaitForFlag+0x5c>)
 80050e8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ec:	0b9b      	lsrs	r3, r3, #14
 80050ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	73fb      	strb	r3, [r7, #15]
    }
  }
  while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	4013      	ands	r3, r2
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d002      	beq.n	800511e <LPTIM_WaitForFlag+0x4a>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1ec      	bne.n	80050f8 <LPTIM_WaitForFlag+0x24>

  return result;
 800511e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	20000004 	.word	0x20000004
 8005130:	d1b71759 	.word	0xd1b71759

08005134 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8005140:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a60      	ldr	r2, [pc, #384]	; (80052c8 <LPTIM_Disable+0x194>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <LPTIM_Disable+0x20>
 800514c:	4a5f      	ldr	r2, [pc, #380]	; (80052cc <LPTIM_Disable+0x198>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d006      	beq.n	8005160 <LPTIM_Disable+0x2c>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005152:	e00b      	b.n	800516c <LPTIM_Disable+0x38>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005154:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8005158:	f7ff fd21 	bl	8004b9e <LL_RCC_GetLPTIMClockSource>
 800515c:	61f8      	str	r0, [r7, #28]
      break;
 800515e:	e005      	b.n	800516c <LPTIM_Disable+0x38>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005160:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005164:	f7ff fd1b 	bl	8004b9e <LL_RCC_GetLPTIMClockSource>
 8005168:	61f8      	str	r0, [r7, #28]
      break;
 800516a:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	60fb      	str	r3, [r7, #12]
#if defined(LPTIM_OR_OR)
  tmpOR = hlptim->Instance->OR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	60bb      	str	r3, [r7, #8]
#endif /* LPTIM_OR_OR */

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a4b      	ldr	r2, [pc, #300]	; (80052c8 <LPTIM_Disable+0x194>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <LPTIM_Disable+0x72>
 800519e:	4a4b      	ldr	r2, [pc, #300]	; (80052cc <LPTIM_Disable+0x198>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d009      	beq.n	80051b8 <LPTIM_Disable+0x84>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80051a4:	e00f      	b.n	80051c6 <LPTIM_Disable+0x92>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80051a6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80051aa:	f7ff fd0b 	bl	8004bc4 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80051ae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80051b2:	f7ff fd2b 	bl	8004c0c <LL_APB1_GRP1_ReleaseReset>
      break;
 80051b6:	e006      	b.n	80051c6 <LPTIM_Disable+0x92>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80051b8:	2020      	movs	r0, #32
 80051ba:	f7ff fd15 	bl	8004be8 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80051be:	2020      	movs	r0, #32
 80051c0:	f7ff fd37 	bl	8004c32 <LL_APB1_GRP2_ReleaseReset>
      break;
 80051c4:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <LPTIM_Disable+0x9e>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d05f      	beq.n	8005292 <LPTIM_Disable+0x15e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a3c      	ldr	r2, [pc, #240]	; (80052c8 <LPTIM_Disable+0x194>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <LPTIM_Disable+0xb0>
 80051dc:	4a3b      	ldr	r2, [pc, #236]	; (80052cc <LPTIM_Disable+0x198>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d005      	beq.n	80051ee <LPTIM_Disable+0xba>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80051e2:	e009      	b.n	80051f8 <LPTIM_Disable+0xc4>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80051e4:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80051e8:	f7ff fcbf 	bl	8004b6a <LL_RCC_SetLPTIMClockSource>
        break;
 80051ec:	e004      	b.n	80051f8 <LPTIM_Disable+0xc4>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80051ee:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80051f2:	f7ff fcba 	bl	8004b6a <LL_RCC_SetLPTIMClockSource>
        break;
 80051f6:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01a      	beq.n	8005234 <LPTIM_Disable+0x100>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0201 	orr.w	r2, r2, #1
 800520c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005216:	2108      	movs	r1, #8
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff ff5b 	bl	80050d4 <LPTIM_WaitForFlag>
 800521e:	4603      	mov	r3, r0
 8005220:	2b03      	cmp	r3, #3
 8005222:	d103      	bne.n	800522c <LPTIM_Disable+0xf8>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2203      	movs	r2, #3
 8005228:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2208      	movs	r2, #8
 8005232:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d01a      	beq.n	8005270 <LPTIM_Disable+0x13c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0201 	orr.w	r2, r2, #1
 8005248:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005252:	2110      	movs	r1, #16
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff ff3d 	bl	80050d4 <LPTIM_WaitForFlag>
 800525a:	4603      	mov	r3, r0
 800525c:	2b03      	cmp	r3, #3
 800525e:	d103      	bne.n	8005268 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2203      	movs	r2, #3
 8005264:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2210      	movs	r2, #16
 800526e:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <LPTIM_Disable+0x194>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <LPTIM_Disable+0x14e>
 800527a:	4a14      	ldr	r2, [pc, #80]	; (80052cc <LPTIM_Disable+0x198>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <LPTIM_Disable+0x156>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005280:	e008      	b.n	8005294 <LPTIM_Disable+0x160>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005282:	69f8      	ldr	r0, [r7, #28]
 8005284:	f7ff fc71 	bl	8004b6a <LL_RCC_SetLPTIMClockSource>
        break;
 8005288:	e004      	b.n	8005294 <LPTIM_Disable+0x160>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800528a:	69f8      	ldr	r0, [r7, #28]
 800528c:	f7ff fc6d 	bl	8004b6a <LL_RCC_SetLPTIMClockSource>
        break;
 8005290:	e000      	b.n	8005294 <LPTIM_Disable+0x160>
    }
  }
 8005292:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)
  hlptim->Instance->OR = tmpOR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 80052bc:	b662      	cpsie	i
#endif /* LPTIM_OR_OR */

  __enable_irq();
}
 80052be:	bf00      	nop
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40007c00 	.word	0x40007c00
 80052cc:	40009400 	.word	0x40009400

080052d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d2:	b08b      	sub	sp, #44	; 0x2c
 80052d4:	af06      	add	r7, sp, #24
 80052d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e0ad      	b.n	800543e <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f009 fc82 	bl	800ec00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2203      	movs	r2, #3
 8005300:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	f003 fe24 	bl	8008f56 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]
 8005312:	e035      	b.n	8005380 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	015b      	lsls	r3, r3, #5
 800531a:	4413      	add	r3, r2
 800531c:	3329      	adds	r3, #41	; 0x29
 800531e:	2201      	movs	r2, #1
 8005320:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	015b      	lsls	r3, r3, #5
 8005328:	4413      	add	r3, r2
 800532a:	3328      	adds	r3, #40	; 0x28
 800532c:	7bfa      	ldrb	r2, [r7, #15]
 800532e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	7bfa      	ldrb	r2, [r7, #15]
 8005334:	b291      	uxth	r1, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	015b      	lsls	r3, r3, #5
 800533a:	4413      	add	r3, r2
 800533c:	3336      	adds	r3, #54	; 0x36
 800533e:	460a      	mov	r2, r1
 8005340:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	015b      	lsls	r3, r3, #5
 8005348:	4413      	add	r3, r2
 800534a:	332b      	adds	r3, #43	; 0x2b
 800534c:	2200      	movs	r2, #0
 800534e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005350:	7bfb      	ldrb	r3, [r7, #15]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	015b      	lsls	r3, r3, #5
 8005356:	4413      	add	r3, r2
 8005358:	3338      	adds	r3, #56	; 0x38
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	015b      	lsls	r3, r3, #5
 8005364:	4413      	add	r3, r2
 8005366:	333c      	adds	r3, #60	; 0x3c
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	3302      	adds	r3, #2
 8005372:	015b      	lsls	r3, r3, #5
 8005374:	4413      	add	r3, r2
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	3301      	adds	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
 8005380:	7bfa      	ldrb	r2, [r7, #15]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	429a      	cmp	r2, r3
 8005388:	d3c4      	bcc.n	8005314 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
 800538e:	e031      	b.n	80053f4 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	015b      	lsls	r3, r3, #5
 8005396:	4413      	add	r3, r2
 8005398:	f203 1329 	addw	r3, r3, #297	; 0x129
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	015b      	lsls	r3, r3, #5
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80053ac:	7bfa      	ldrb	r2, [r7, #15]
 80053ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	015b      	lsls	r3, r3, #5
 80053b6:	4413      	add	r3, r2
 80053b8:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	015b      	lsls	r3, r3, #5
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	015b      	lsls	r3, r3, #5
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	330a      	adds	r3, #10
 80053e6:	015b      	lsls	r3, r3, #5
 80053e8:	4413      	add	r3, r2
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	3301      	adds	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
 80053f4:	7bfa      	ldrb	r2, [r7, #15]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d3c8      	bcc.n	8005390 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	687e      	ldr	r6, [r7, #4]
 8005406:	466d      	mov	r5, sp
 8005408:	f106 0410 	add.w	r4, r6, #16
 800540c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800540e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	1d33      	adds	r3, r6, #4
 8005416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005418:	6838      	ldr	r0, [r7, #0]
 800541a:	f003 fdb7 	bl	8008f8c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d102      	bne.n	800543c <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fe59 	bl	80060ee <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005446 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_PCD_Start+0x16>
 8005458:	2302      	movs	r3, #2
 800545a:	e012      	b.n	8005482 <HAL_PCD_Start+0x3c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f004 ff87 	bl	800a37c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f003 fd56 	bl	8008f24 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b082      	sub	sp, #8
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f004 ff87 	bl	800a3aa <USB_ReadInterrupts>
 800549c:	4603      	mov	r3, r0
 800549e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a6:	d102      	bne.n	80054ae <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fb33 	bl	8005b14 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f004 ff79 	bl	800a3aa <USB_ReadInterrupts>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c2:	d112      	bne.n	80054ea <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d6:	b292      	uxth	r2, r2
 80054d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f009 fc16 	bl	800ed0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80054e2:	2100      	movs	r1, #0
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f91e 	bl	8005726 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f004 ff5b 	bl	800a3aa <USB_ReadInterrupts>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054fe:	d10b      	bne.n	8005518 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005508:	b29a      	uxth	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005512:	b292      	uxth	r2, r2
 8005514:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f004 ff44 	bl	800a3aa <USB_ReadInterrupts>
 8005522:	4603      	mov	r3, r0
 8005524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800552c:	d10b      	bne.n	8005546 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005536:	b29a      	uxth	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005540:	b292      	uxth	r2, r2
 8005542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f004 ff2d 	bl	800a3aa <USB_ReadInterrupts>
 8005550:	4603      	mov	r3, r0
 8005552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555a:	d133      	bne.n	80055c4 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005564:	b29a      	uxth	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0204 	bic.w	r2, r2, #4
 800556e:	b292      	uxth	r2, r2
 8005570:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800557c:	b29a      	uxth	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0208 	bic.w	r2, r2, #8
 8005586:	b292      	uxth	r2, r2
 8005588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005592:	2b01      	cmp	r3, #1
 8005594:	d107      	bne.n	80055a6 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800559e:	2100      	movs	r1, #0
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f009 fda3 	bl	800f0ec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f009 fbea 	bl	800ed80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055be:	b292      	uxth	r2, r2
 80055c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f004 feee 	bl	800a3aa <USB_ReadInterrupts>
 80055ce:	4603      	mov	r3, r0
 80055d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d8:	d126      	bne.n	8005628 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0208 	orr.w	r2, r2, #8
 80055ec:	b292      	uxth	r2, r2
 80055ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005604:	b292      	uxth	r2, r2
 8005606:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0204 	orr.w	r2, r2, #4
 800561c:	b292      	uxth	r2, r2
 800561e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f009 fb92 	bl	800ed4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f004 febc 	bl	800a3aa <USB_ReadInterrupts>
 8005632:	4603      	mov	r3, r0
 8005634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005638:	2b80      	cmp	r3, #128	; 0x80
 800563a:	d13f      	bne.n	80056bc <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005644:	b29a      	uxth	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800564e:	b292      	uxth	r2, r2
 8005650:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800565a:	2b00      	cmp	r3, #0
 800565c:	d12b      	bne.n	80056b6 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005666:	b29a      	uxth	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0204 	orr.w	r2, r2, #4
 8005670:	b292      	uxth	r2, r2
 8005672:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800567e:	b29a      	uxth	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0208 	orr.w	r2, r2, #8
 8005688:	b292      	uxth	r2, r2
 800568a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800569e:	b29b      	uxth	r3, r3
 80056a0:	089b      	lsrs	r3, r3, #2
 80056a2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80056ac:	2101      	movs	r1, #1
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f009 fd1c 	bl	800f0ec <HAL_PCDEx_LPM_Callback>
 80056b4:	e002      	b.n	80056bc <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f009 fb48 	bl	800ed4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f004 fe72 	bl	800a3aa <USB_ReadInterrupts>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d0:	d10e      	bne.n	80056f0 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056e4:	b292      	uxth	r2, r2
 80056e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f009 fb01 	bl	800ecf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f004 fe58 	bl	800a3aa <USB_ReadInterrupts>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005704:	d10b      	bne.n	800571e <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800570e:	b29a      	uxth	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005718:	b292      	uxth	r2, r2
 800571a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_PCD_SetAddress+0x1a>
 800573c:	2302      	movs	r3, #2
 800573e:	e013      	b.n	8005768 <HAL_PCD_SetAddress+0x42>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	78fa      	ldrb	r2, [r7, #3]
 800574c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	78fa      	ldrb	r2, [r7, #3]
 8005756:	4611      	mov	r1, r2
 8005758:	4618      	mov	r0, r3
 800575a:	f004 fdfb 	bl	800a354 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	4608      	mov	r0, r1
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	70fb      	strb	r3, [r7, #3]
 8005782:	460b      	mov	r3, r1
 8005784:	803b      	strh	r3, [r7, #0]
 8005786:	4613      	mov	r3, r2
 8005788:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800578e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005792:	2b00      	cmp	r3, #0
 8005794:	da0b      	bge.n	80057ae <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005796:	78fb      	ldrb	r3, [r7, #3]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	015b      	lsls	r3, r3, #5
 800579e:	3328      	adds	r3, #40	; 0x28
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	4413      	add	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	705a      	strb	r2, [r3, #1]
 80057ac:	e00b      	b.n	80057c6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	015b      	lsls	r3, r3, #5
 80057b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	4413      	add	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057c6:	78fb      	ldrb	r3, [r7, #3]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80057d2:	883a      	ldrh	r2, [r7, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	78ba      	ldrb	r2, [r7, #2]
 80057dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d004      	beq.n	80057f0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80057f0:	78bb      	ldrb	r3, [r7, #2]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d102      	bne.n	80057fc <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_PCD_EP_Open+0x9a>
 8005806:	2302      	movs	r3, #2
 8005808:	e00e      	b.n	8005828 <HAL_PCD_EP_Open+0xb8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68f9      	ldr	r1, [r7, #12]
 8005818:	4618      	mov	r0, r3
 800581a:	f003 fbdb 	bl	8008fd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8005826:	7afb      	ldrb	r3, [r7, #11]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800583c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005840:	2b00      	cmp	r3, #0
 8005842:	da0b      	bge.n	800585c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	015b      	lsls	r3, r3, #5
 800584c:	3328      	adds	r3, #40	; 0x28
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	705a      	strb	r2, [r3, #1]
 800585a:	e00b      	b.n	8005874 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	015b      	lsls	r3, r3, #5
 8005864:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	b2da      	uxtb	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <HAL_PCD_EP_Close+0x5e>
 800588a:	2302      	movs	r3, #2
 800588c:	e00e      	b.n	80058ac <HAL_PCD_EP_Close+0x7c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	4618      	mov	r0, r3
 800589e:	f003 ff47 	bl	8009730 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	460b      	mov	r3, r1
 80058c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	015b      	lsls	r3, r3, #5
 80058cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ee:	7afb      	ldrb	r3, [r7, #11]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058fa:	7afb      	ldrb	r3, [r7, #11]
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	2b00      	cmp	r3, #0
 8005902:	d106      	bne.n	8005912 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6979      	ldr	r1, [r7, #20]
 800590a:	4618      	mov	r0, r3
 800590c:	f004 f8fd 	bl	8009b0a <USB_EPStartXfer>
 8005910:	e005      	b.n	800591e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6979      	ldr	r1, [r7, #20]
 8005918:	4618      	mov	r0, r3
 800591a:	f004 f8f6 	bl	8009b0a <USB_EPStartXfer>
  }

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	330a      	adds	r3, #10
 800593e:	015b      	lsls	r3, r3, #5
 8005940:	4413      	add	r3, r2
 8005942:	3304      	adds	r3, #4
 8005944:	681b      	ldr	r3, [r3, #0]
}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b086      	sub	sp, #24
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	460b      	mov	r3, r1
 8005960:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005962:	7afb      	ldrb	r3, [r7, #11]
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	015b      	lsls	r3, r3, #5
 800596a:	3328      	adds	r3, #40	; 0x28
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2200      	movs	r2, #0
 8005982:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2201      	movs	r2, #1
 8005988:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800598a:	7afb      	ldrb	r3, [r7, #11]
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	b2da      	uxtb	r2, r3
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005996:	7afb      	ldrb	r3, [r7, #11]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	2b00      	cmp	r3, #0
 800599e:	d106      	bne.n	80059ae <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6979      	ldr	r1, [r7, #20]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f004 f8af 	bl	8009b0a <USB_EPStartXfer>
 80059ac:	e005      	b.n	80059ba <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6979      	ldr	r1, [r7, #20]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f004 f8a8 	bl	8009b0a <USB_EPStartXfer>
  }

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059d0:	78fb      	ldrb	r3, [r7, #3]
 80059d2:	f003 0207 	and.w	r2, r3, #7
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d901      	bls.n	80059e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e046      	b.n	8005a70 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da0b      	bge.n	8005a02 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	015b      	lsls	r3, r3, #5
 80059f2:	3328      	adds	r3, #40	; 0x28
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	4413      	add	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	705a      	strb	r2, [r3, #1]
 8005a00:	e009      	b.n	8005a16 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	015b      	lsls	r3, r3, #5
 8005a06:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_PCD_EP_SetStall+0x72>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e01c      	b.n	8005a70 <HAL_PCD_EP_SetStall+0xac>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68f9      	ldr	r1, [r7, #12]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f004 fb86 	bl	800a156 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d108      	bne.n	8005a66 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f004 fcb2 	bl	800a3ca <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	f003 020f 	and.w	r2, r3, #15
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d901      	bls.n	8005a96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e03a      	b.n	8005b0c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	da0b      	bge.n	8005ab6 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	015b      	lsls	r3, r3, #5
 8005aa6:	3328      	adds	r3, #40	; 0x28
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4413      	add	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	705a      	strb	r2, [r3, #1]
 8005ab4:	e00b      	b.n	8005ace <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	015b      	lsls	r3, r3, #5
 8005abe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_PCD_EP_ClrStall+0x76>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e00e      	b.n	8005b0c <HAL_PCD_EP_ClrStall+0x94>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f004 fb7b 	bl	800a1f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08e      	sub	sp, #56	; 0x38
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b1c:	e29c      	b.n	8006058 <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b26:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005b28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005b34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f040 8152 	bne.w	8005de2 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005b3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d150      	bne.n	8005bea <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b58:	81fb      	strh	r3, [r7, #14]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	89fb      	ldrh	r3, [r7, #14]
 8005b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3328      	adds	r3, #40	; 0x28
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4413      	add	r3, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	695a      	ldr	r2, [r3, #20]
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	441a      	add	r2, r3
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005ba8:	2100      	movs	r1, #0
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f009 f88a 	bl	800ecc4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 824d 	beq.w	8006058 <PCD_EP_ISR_Handler+0x544>
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f040 8248 	bne.w	8006058 <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	b292      	uxth	r2, r2
 8005bdc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005be8:	e236      	b.n	8006058 <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005bfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d032      	beq.n	8005c6a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	4413      	add	r3, r2
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f004 fc10 	bl	800a464 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005c50:	4013      	ands	r3, r2
 8005c52:	823b      	strh	r3, [r7, #16]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	8a3a      	ldrh	r2, [r7, #16]
 8005c5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c5e:	b292      	uxth	r2, r2
 8005c60:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f009 f804 	bl	800ec70 <HAL_PCD_SetupStageCallback>
 8005c68:	e1f6      	b.n	8006058 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c6a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f280 81f2 	bge.w	8006058 <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005c80:	4013      	ands	r3, r2
 8005c82:	83fb      	strh	r3, [r7, #30]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	8bfa      	ldrh	r2, [r7, #30]
 8005c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c8e:	b292      	uxth	r2, r2
 8005c90:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	4413      	add	r3, r2
 8005cac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d019      	beq.n	8005cf6 <PCD_EP_ISR_Handler+0x1e2>
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d015      	beq.n	8005cf6 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	6959      	ldr	r1, [r3, #20]
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f004 fbc2 	bl	800a464 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	695a      	ldr	r2, [r3, #20]
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	441a      	add	r2, r3
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005cee:	2100      	movs	r1, #0
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f008 ffcf 	bl	800ec94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d112      	bne.n	8005d44 <PCD_EP_ISR_Handler+0x230>
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	e02f      	b.n	8005da4 <PCD_EP_ISR_Handler+0x290>
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b3e      	cmp	r3, #62	; 0x3e
 8005d4a:	d813      	bhi.n	8005d74 <PCD_EP_ISR_Handler+0x260>
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	633b      	str	r3, [r7, #48]	; 0x30
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <PCD_EP_ISR_Handler+0x252>
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	3301      	adds	r3, #1
 8005d64:	633b      	str	r3, [r7, #48]	; 0x30
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	029b      	lsls	r3, r3, #10
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	e017      	b.n	8005da4 <PCD_EP_ISR_Handler+0x290>
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f003 031f 	and.w	r3, r3, #31
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d102      	bne.n	8005d8e <PCD_EP_ISR_Handler+0x27a>
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	029b      	lsls	r3, r3, #10
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	827b      	strh	r3, [r7, #18]
 8005db6:	8a7b      	ldrh	r3, [r7, #18]
 8005db8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dbc:	827b      	strh	r3, [r7, #18]
 8005dbe:	8a7b      	ldrh	r3, [r7, #18]
 8005dc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dc4:	827b      	strh	r3, [r7, #18]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	8a7b      	ldrh	r3, [r7, #18]
 8005dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	8013      	strh	r3, [r2, #0]
 8005de0:	e13a      	b.n	8006058 <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005df4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f280 80d6 	bge.w	8005faa <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005e14:	4013      	ands	r3, r2
 8005e16:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005e28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e2c:	b292      	uxth	r2, r2
 8005e2e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005e30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e34:	015b      	lsls	r3, r3, #5
 8005e36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	7b1b      	ldrb	r3, [r3, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11f      	bne.n	8005e88 <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6812      	ldr	r2, [r2, #0]
 8005e60:	4413      	add	r3, r2
 8005e62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e6c:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 8005e6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d075      	beq.n	8005f60 <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	6959      	ldr	r1, [r3, #20]
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	88da      	ldrh	r2, [r3, #6]
 8005e80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e82:	f004 faef 	bl	800a464 <USB_ReadPMA>
 8005e86:	e06b      	b.n	8005f60 <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea2:	847b      	strh	r3, [r7, #34]	; 0x22
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	441a      	add	r2, r3
 8005eb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01f      	beq.n	8005f22 <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6812      	ldr	r2, [r2, #0]
 8005efa:	4413      	add	r3, r2
 8005efc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f06:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8005f08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d028      	beq.n	8005f60 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	6959      	ldr	r1, [r3, #20]
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	891a      	ldrh	r2, [r3, #8]
 8005f1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f1c:	f004 faa2 	bl	800a464 <USB_ReadPMA>
 8005f20:	e01e      	b.n	8005f60 <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	4413      	add	r3, r2
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f46:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8005f48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	6959      	ldr	r1, [r3, #20]
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	895a      	ldrh	r2, [r3, #10]
 8005f5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f5c:	f004 fa82 	bl	800a464 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f66:	441a      	add	r2, r3
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	695a      	ldr	r2, [r3, #20]
 8005f70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f72:	441a      	add	r2, r3
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d004      	beq.n	8005f8a <PCD_EP_ISR_Handler+0x476>
 8005f80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d206      	bcs.n	8005f98 <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f008 fe7f 	bl	800ec94 <HAL_PCD_DataOutStageCallback>
 8005f96:	e008      	b.n	8005faa <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	7819      	ldrb	r1, [r3, #0]
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff fc85 	bl	80058b4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005faa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d051      	beq.n	8006058 <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 8005fb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005fb8:	015b      	lsls	r3, r3, #5
 8005fba:	3328      	adds	r3, #40	; 0x28
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fdc:	843b      	strh	r3, [r7, #32]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	441a      	add	r2, r3
 8005fec:	8c3b      	ldrh	r3, [r7, #32]
 8005fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006002:	b29b      	uxth	r3, r3
 8006004:	461a      	mov	r2, r3
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	4413      	add	r3, r2
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	4413      	add	r3, r2
 8006014:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	695a      	ldr	r2, [r3, #20]
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	441a      	add	r2, r3
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d106      	bne.n	8006046 <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f008 fe40 	bl	800ecc4 <HAL_PCD_DataInStageCallback>
 8006044:	e008      	b.n	8006058 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	7819      	ldrb	r1, [r3, #0]
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	695a      	ldr	r2, [r3, #20]
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff fc7d 	bl	8005952 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006060:	b29b      	uxth	r3, r3
 8006062:	b21b      	sxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	f6ff ad5a 	blt.w	8005b1e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3738      	adds	r7, #56	; 0x38
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	607b      	str	r3, [r7, #4]
 800607e:	460b      	mov	r3, r1
 8006080:	817b      	strh	r3, [r7, #10]
 8006082:	4613      	mov	r3, r2
 8006084:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006086:	897b      	ldrh	r3, [r7, #10]
 8006088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d008      	beq.n	80060a4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006092:	897b      	ldrh	r3, [r7, #10]
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	015b      	lsls	r3, r3, #5
 800609a:	3328      	adds	r3, #40	; 0x28
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	e006      	b.n	80060b2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060a4:	897b      	ldrh	r3, [r7, #10]
 80060a6:	015b      	lsls	r3, r3, #5
 80060a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80060b2:	893b      	ldrh	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d107      	bne.n	80060c8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2200      	movs	r2, #0
 80060bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	80da      	strh	r2, [r3, #6]
 80060c6:	e00b      	b.n	80060e0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2201      	movs	r2, #1
 80060cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	0c1b      	lsrs	r3, r3, #16
 80060da:	b29a      	uxth	r2, r3
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006112:	b29b      	uxth	r3, r3
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006126:	b29b      	uxth	r3, r3
 8006128:	f043 0302 	orr.w	r3, r3, #2
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006148:	4b05      	ldr	r3, [pc, #20]	; (8006160 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a04      	ldr	r2, [pc, #16]	; (8006160 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800614e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006152:	6013      	str	r3, [r2, #0]
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	58000400 	.word	0x58000400

08006164 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <HAL_PWREx_GetVoltageRange+0x18>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	58000400 	.word	0x58000400

08006180 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4a04      	ldr	r2, [pc, #16]	; (800619c <HAL_PWREx_EnableVddUSB+0x1c>)
 800618a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800618e:	6053      	str	r3, [r2, #4]
}
 8006190:	bf00      	nop
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	58000400 	.word	0x58000400

080061a0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80061a8:	f7fd fd46 	bl	8003c38 <HAL_GetTick>
 80061ac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e06f      	b.n	8006298 <HAL_QSPI_Init+0xf8>
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <HAL_QSPI_Init+0x28>
 80061c4:	2302      	movs	r3, #2
 80061c6:	e067      	b.n	8006298 <HAL_QSPI_Init+0xf8>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fb fddd 	bl	8001da4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80061ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f858 	bl	80062a4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	3b01      	subs	r3, #1
 8006204:	021a      	lsls	r2, r3, #8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	2120      	movs	r1, #32
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f850 	bl	80062c0 <QSPI_WaitFlagStateUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006224:	7afb      	ldrb	r3, [r7, #11]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d131      	bne.n	800628e <HAL_QSPI_Init+0xee>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006234:	f023 0310 	bic.w	r3, r3, #16
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6852      	ldr	r2, [r2, #4]
 800623c:	0611      	lsls	r1, r2, #24
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	68d2      	ldr	r2, [r2, #12]
 8006242:	4311      	orrs	r1, r2
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	430b      	orrs	r3, r1
 800624a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	4b13      	ldr	r3, [pc, #76]	; (80062a0 <HAL_QSPI_Init+0x100>)
 8006254:	4013      	ands	r3, r2
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6912      	ldr	r2, [r2, #16]
 800625a:	0411      	lsls	r1, r2, #16
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6952      	ldr	r2, [r2, #20]
 8006260:	4311      	orrs	r1, r2
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6992      	ldr	r2, [r2, #24]
 8006266:	4311      	orrs	r1, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6812      	ldr	r2, [r2, #0]
 800626c:	430b      	orrs	r3, r1
 800626e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006296:	7afb      	ldrb	r3, [r7, #11]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	ffe0f8fe 	.word	0xffe0f8fe

080062a4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80062d0:	e01a      	b.n	8006308 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d8:	d016      	beq.n	8006308 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062da:	f7fd fcad 	bl	8003c38 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d302      	bcc.n	80062f0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10b      	bne.n	8006308 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2204      	movs	r2, #4
 80062f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fc:	f043 0201 	orr.w	r2, r3, #1
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e00e      	b.n	8006326 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	bf14      	ite	ne
 8006316:	2301      	movne	r3, #1
 8006318:	2300      	moveq	r3, #0
 800631a:	b2db      	uxtb	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	429a      	cmp	r2, r3
 8006322:	d1d6      	bne.n	80062d2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <LL_RCC_HSE_IsEnabledDiv2>:
{
 800632e:	b480      	push	{r7}
 8006330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800633c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006340:	d101      	bne.n	8006346 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <LL_RCC_HSE_EnableBypass>:
{
 8006352:	b480      	push	{r7}
 8006354:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006364:	6013      	str	r3, [r2, #0]
}
 8006366:	bf00      	nop
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <LL_RCC_HSE_DisableBypass>:
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800637e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006382:	6013      	str	r3, [r2, #0]
}
 8006384:	bf00      	nop
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <LL_RCC_HSE_Enable>:
{
 800638e:	b480      	push	{r7}
 8006390:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800639c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a0:	6013      	str	r3, [r2, #0]
}
 80063a2:	bf00      	nop
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <LL_RCC_HSE_Disable>:
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80063b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063be:	6013      	str	r3, [r2, #0]
}
 80063c0:	bf00      	nop
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <LL_RCC_HSE_IsReady>:
{
 80063ca:	b480      	push	{r7}
 80063cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80063ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063dc:	d101      	bne.n	80063e2 <LL_RCC_HSE_IsReady+0x18>
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <LL_RCC_HSE_IsReady+0x1a>
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <LL_RCC_HSI_Enable>:
{
 80063ee:	b480      	push	{r7}
 80063f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80063f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006400:	6013      	str	r3, [r2, #0]
}
 8006402:	bf00      	nop
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <LL_RCC_HSI_Disable>:
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800641a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800641e:	6013      	str	r3, [r2, #0]
}
 8006420:	bf00      	nop
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <LL_RCC_HSI_IsReady>:
{
 800642a:	b480      	push	{r7}
 800642c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800642e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643c:	d101      	bne.n	8006442 <LL_RCC_HSI_IsReady+0x18>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <LL_RCC_HSI_IsReady+0x1a>
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <LL_RCC_HSI_SetCalibTrimming>:
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	061b      	lsls	r3, r3, #24
 8006464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006468:	4313      	orrs	r3, r2
 800646a:	604b      	str	r3, [r1, #4]
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <LL_RCC_HSI48_Enable>:
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800647c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006490:	bf00      	nop
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <LL_RCC_HSI48_Disable>:
{
 800649a:	b480      	push	{r7}
 800649c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800649e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064aa:	f023 0301 	bic.w	r3, r3, #1
 80064ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80064b2:	bf00      	nop
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <LL_RCC_HSI48_IsReady>:
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80064c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d101      	bne.n	80064d4 <LL_RCC_HSI48_IsReady+0x18>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e000      	b.n	80064d6 <LL_RCC_HSI48_IsReady+0x1a>
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <LL_RCC_LSE_Enable>:
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80064f8:	bf00      	nop
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <LL_RCC_LSE_Disable>:
{
 8006502:	b480      	push	{r7}
 8006504:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800650a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006512:	f023 0301 	bic.w	r3, r3, #1
 8006516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800651a:	bf00      	nop
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <LL_RCC_LSE_EnableBypass>:
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800652c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006534:	f043 0304 	orr.w	r3, r3, #4
 8006538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800653c:	bf00      	nop
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <LL_RCC_LSE_DisableBypass>:
{
 8006546:	b480      	push	{r7}
 8006548:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800654a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006556:	f023 0304 	bic.w	r3, r3, #4
 800655a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800655e:	bf00      	nop
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <LL_RCC_LSE_IsReady>:
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800656c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b02      	cmp	r3, #2
 800657a:	d101      	bne.n	8006580 <LL_RCC_LSE_IsReady+0x18>
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <LL_RCC_LSE_IsReady+0x1a>
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <LL_RCC_LSI1_Enable>:
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80065a4:	bf00      	nop
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <LL_RCC_LSI1_Disable>:
{
 80065ae:	b480      	push	{r7}
 80065b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80065b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065be:	f023 0301 	bic.w	r3, r3, #1
 80065c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80065c6:	bf00      	nop
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <LL_RCC_LSI1_IsReady>:
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80065d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d101      	bne.n	80065e8 <LL_RCC_LSI1_IsReady+0x18>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <LL_RCC_LSI1_IsReady+0x1a>
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <LL_RCC_LSI2_Enable>:
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80065f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006604:	f043 0304 	orr.w	r3, r3, #4
 8006608:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800660c:	bf00      	nop
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <LL_RCC_LSI2_Disable>:
{
 8006616:	b480      	push	{r7}
 8006618:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800661a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800661e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006626:	f023 0304 	bic.w	r3, r3, #4
 800662a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800662e:	bf00      	nop
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <LL_RCC_LSI2_IsReady>:
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800663c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b08      	cmp	r3, #8
 800664a:	d101      	bne.n	8006650 <LL_RCC_LSI2_IsReady+0x18>
 800664c:	2301      	movs	r3, #1
 800664e:	e000      	b.n	8006652 <LL_RCC_LSI2_IsReady+0x1a>
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <LL_RCC_LSI2_SetTrimming>:
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800666c:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <LL_RCC_MSI_Enable>:
{
 800668a:	b480      	push	{r7}
 800668c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800668e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006698:	f043 0301 	orr.w	r3, r3, #1
 800669c:	6013      	str	r3, [r2, #0]
}
 800669e:	bf00      	nop
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <LL_RCC_MSI_Disable>:
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80066ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066b6:	f023 0301 	bic.w	r3, r3, #1
 80066ba:	6013      	str	r3, [r2, #0]
}
 80066bc:	bf00      	nop
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <LL_RCC_MSI_IsReady>:
{
 80066c6:	b480      	push	{r7}
 80066c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80066ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d101      	bne.n	80066dc <LL_RCC_MSI_IsReady+0x16>
 80066d8:	2301      	movs	r3, #1
 80066da:	e000      	b.n	80066de <LL_RCC_MSI_IsReady+0x18>
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <LL_RCC_MSI_SetRange>:
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80066f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4313      	orrs	r3, r2
 8006702:	600b      	str	r3, [r1, #0]
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <LL_RCC_MSI_GetRange>:
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006720:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2bb0      	cmp	r3, #176	; 0xb0
 8006726:	d901      	bls.n	800672c <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006728:	23b0      	movs	r3, #176	; 0xb0
 800672a:	607b      	str	r3, [r7, #4]
  return msiRange;
 800672c:	687b      	ldr	r3, [r7, #4]
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <LL_RCC_MSI_SetCalibTrimming>:
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006754:	4313      	orrs	r3, r2
 8006756:	604b      	str	r3, [r1, #4]
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <LL_RCC_SetSysClkSource>:
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800676c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f023 0203 	bic.w	r2, r3, #3
 8006776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4313      	orrs	r3, r2
 800677e:	608b      	str	r3, [r1, #8]
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <LL_RCC_GetSysClkSource>:
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 030c 	and.w	r3, r3, #12
}
 800679a:	4618      	mov	r0, r3
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <LL_RCC_SetAHBPrescaler>:
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80067ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4313      	orrs	r3, r2
 80067be:	608b      	str	r3, [r1, #8]
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <LL_C2_RCC_SetAHBPrescaler>:
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80067d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80067dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <LL_RCC_SetAHB4Prescaler>:
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006804:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006808:	f023 020f 	bic.w	r2, r3, #15
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	091b      	lsrs	r3, r3, #4
 8006810:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <LL_RCC_SetAPB1Prescaler>:
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800682e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4313      	orrs	r3, r2
 8006840:	608b      	str	r3, [r1, #8]
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <LL_RCC_SetAPB2Prescaler>:
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4313      	orrs	r3, r2
 8006868:	608b      	str	r3, [r1, #8]
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <LL_RCC_GetAHBPrescaler>:
{
 8006876:	b480      	push	{r7}
 8006878:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800687a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006884:	4618      	mov	r0, r3
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <LL_RCC_GetAHB4Prescaler>:
{
 800688e:	b480      	push	{r7}
 8006890:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006896:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <LL_RCC_GetAPB1Prescaler>:
{
 80068aa:	b480      	push	{r7}
 80068ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80068ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <LL_RCC_GetAPB2Prescaler>:
{
 80068c2:	b480      	push	{r7}
 80068c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80068c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80068da:	b480      	push	{r7}
 80068dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80068de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068ec:	6013      	str	r3, [r2, #0]
}
 80068ee:	bf00      	nop
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80068fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800690a:	6013      	str	r3, [r2, #0]
}
 800690c:	bf00      	nop
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006916:	b480      	push	{r7}
 8006918:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800691a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006928:	d101      	bne.n	800692e <LL_RCC_PLL_IsReady+0x18>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <LL_RCC_PLL_IsReady+0x1a>
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800693a:	b480      	push	{r7}
 800693c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800693e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	0a1b      	lsrs	r3, r3, #8
 8006946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800694a:	4618      	mov	r0, r3
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006962:	4618      	mov	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800697a:	4618      	mov	r0, r3
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0303 	and.w	r3, r3, #3
}
 8006992:	4618      	mov	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80069a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ae:	d101      	bne.n	80069b4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80069c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80069cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069d4:	d101      	bne.n	80069da <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80069e6:	b480      	push	{r7}
 80069e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80069ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80069f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069fa:	d101      	bne.n	8006a00 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80069fc:	2301      	movs	r3, #1
 80069fe:	e000      	b.n	8006a02 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a1e:	d101      	bne.n	8006a24 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a42:	d101      	bne.n	8006a48 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a54:	b590      	push	{r4, r7, lr}
 8006a56:	b08d      	sub	sp, #52	; 0x34
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e386      	b.n	8007174 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 808f 	beq.w	8006b92 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a74:	f7ff fe8a 	bl	800678c <LL_RCC_GetSysClkSource>
 8006a78:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a7a:	f7ff ff83 	bl	8006984 <LL_RCC_PLL_GetMainSource>
 8006a7e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <HAL_RCC_OscConfig+0x3e>
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	2b0c      	cmp	r3, #12
 8006a8a:	d149      	bne.n	8006b20 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d146      	bne.n	8006b20 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a92:	f7ff fe18 	bl	80066c6 <LL_RCC_MSI_IsReady>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x54>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e365      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006aac:	f7ff fe30 	bl	8006710 <LL_RCC_MSI_GetRange>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	d914      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fd44 	bl	8007548 <RCC_SetFlashLatencyFromMSIRange>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e354      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff fe0a 	bl	80066e8 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7ff fe2e 	bl	800673a <LL_RCC_MSI_SetCalibTrimming>
 8006ade:	e013      	b.n	8006b08 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fdff 	bl	80066e8 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff fe23 	bl	800673a <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 fd25 	bl	8007548 <RCC_SetFlashLatencyFromMSIRange>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e335      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8006b08:	f7fb fb3c 	bl	8002184 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b0c:	4bb4      	ldr	r3, [pc, #720]	; (8006de0 <HAL_RCC_OscConfig+0x38c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fd f843 	bl	8003b9c <HAL_InitTick>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d039      	beq.n	8006b90 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e329      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01e      	beq.n	8006b66 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006b28:	f7ff fdaf 	bl	800668a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b2c:	f7fd f884 	bl	8003c38 <HAL_GetTick>
 8006b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b34:	f7fd f880 	bl	8003c38 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e316      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006b46:	f7ff fdbe 	bl	80066c6 <LL_RCC_MSI_IsReady>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0f1      	beq.n	8006b34 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff fdc7 	bl	80066e8 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fdeb 	bl	800673a <LL_RCC_MSI_SetCalibTrimming>
 8006b64:	e015      	b.n	8006b92 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006b66:	f7ff fd9f 	bl	80066a8 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b6a:	f7fd f865 	bl	8003c38 <HAL_GetTick>
 8006b6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006b70:	e008      	b.n	8006b84 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b72:	f7fd f861 	bl	8003c38 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e2f7      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006b84:	f7ff fd9f 	bl	80066c6 <LL_RCC_MSI_IsReady>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f1      	bne.n	8006b72 <HAL_RCC_OscConfig+0x11e>
 8006b8e:	e000      	b.n	8006b92 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d05a      	beq.n	8006c54 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b9e:	f7ff fdf5 	bl	800678c <LL_RCC_GetSysClkSource>
 8006ba2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ba4:	f7ff feee 	bl	8006984 <LL_RCC_PLL_GetMainSource>
 8006ba8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d005      	beq.n	8006bbc <HAL_RCC_OscConfig+0x168>
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	2b0c      	cmp	r3, #12
 8006bb4:	d10d      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d10a      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bbc:	f7ff fc05 	bl	80063ca <LL_RCC_HSE_IsReady>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d045      	beq.n	8006c52 <HAL_RCC_OscConfig+0x1fe>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d141      	bne.n	8006c52 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e2d0      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bda:	d102      	bne.n	8006be2 <HAL_RCC_OscConfig+0x18e>
 8006bdc:	f7ff fbd7 	bl	800638e <LL_RCC_HSE_Enable>
 8006be0:	e00d      	b.n	8006bfe <HAL_RCC_OscConfig+0x1aa>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bea:	d104      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x1a2>
 8006bec:	f7ff fbb1 	bl	8006352 <LL_RCC_HSE_EnableBypass>
 8006bf0:	f7ff fbcd 	bl	800638e <LL_RCC_HSE_Enable>
 8006bf4:	e003      	b.n	8006bfe <HAL_RCC_OscConfig+0x1aa>
 8006bf6:	f7ff fbd9 	bl	80063ac <LL_RCC_HSE_Disable>
 8006bfa:	f7ff fbb9 	bl	8006370 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d012      	beq.n	8006c2c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c06:	f7fd f817 	bl	8003c38 <HAL_GetTick>
 8006c0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c0e:	f7fd f813 	bl	8003c38 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b64      	cmp	r3, #100	; 0x64
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e2a9      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006c20:	f7ff fbd3 	bl	80063ca <LL_RCC_HSE_IsReady>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0f1      	beq.n	8006c0e <HAL_RCC_OscConfig+0x1ba>
 8006c2a:	e013      	b.n	8006c54 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2c:	f7fd f804 	bl	8003c38 <HAL_GetTick>
 8006c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c34:	f7fd f800 	bl	8003c38 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b64      	cmp	r3, #100	; 0x64
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e296      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006c46:	f7ff fbc0 	bl	80063ca <LL_RCC_HSE_IsReady>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1f1      	bne.n	8006c34 <HAL_RCC_OscConfig+0x1e0>
 8006c50:	e000      	b.n	8006c54 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d051      	beq.n	8006d04 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c60:	f7ff fd94 	bl	800678c <LL_RCC_GetSysClkSource>
 8006c64:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c66:	f7ff fe8d 	bl	8006984 <LL_RCC_PLL_GetMainSource>
 8006c6a:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d005      	beq.n	8006c7e <HAL_RCC_OscConfig+0x22a>
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b0c      	cmp	r3, #12
 8006c76:	d113      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d110      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c7e:	f7ff fbd4 	bl	800642a <LL_RCC_HSI_IsReady>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <HAL_RCC_OscConfig+0x240>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e26f      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff fbd8 	bl	800644e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c9e:	e031      	b.n	8006d04 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d019      	beq.n	8006cdc <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ca8:	f7ff fba1 	bl	80063ee <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cac:	f7fc ffc4 	bl	8003c38 <HAL_GetTick>
 8006cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cb4:	f7fc ffc0 	bl	8003c38 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e256      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006cc6:	f7ff fbb0 	bl	800642a <LL_RCC_HSI_IsReady>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d0f1      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff fbba 	bl	800644e <LL_RCC_HSI_SetCalibTrimming>
 8006cda:	e013      	b.n	8006d04 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cdc:	f7ff fb96 	bl	800640c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce0:	f7fc ffaa 	bl	8003c38 <HAL_GetTick>
 8006ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ce8:	f7fc ffa6 	bl	8003c38 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e23c      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006cfa:	f7ff fb96 	bl	800642a <LL_RCC_HSI_IsReady>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1f1      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d106      	bne.n	8006d1e <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 80a2 	beq.w	8006e62 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d075      	beq.n	8006e12 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0310 	and.w	r3, r3, #16
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d046      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006d32:	f7ff fc4d 	bl	80065d0 <LL_RCC_LSI1_IsReady>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d113      	bne.n	8006d64 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006d3c:	f7ff fc26 	bl	800658c <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d40:	f7fc ff7a 	bl	8003c38 <HAL_GetTick>
 8006d44:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006d48:	f7fc ff76 	bl	8003c38 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e20c      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006d5a:	f7ff fc39 	bl	80065d0 <LL_RCC_LSI1_IsReady>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0f1      	beq.n	8006d48 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006d64:	f7ff fc46 	bl	80065f4 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d68:	f7fc ff66 	bl	8003c38 <HAL_GetTick>
 8006d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006d70:	f7fc ff62 	bl	8003c38 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e1f8      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006d82:	f7ff fc59 	bl	8006638 <LL_RCC_LSI2_IsReady>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0f1      	beq.n	8006d70 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff fc63 	bl	800665c <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006d96:	f7ff fc0a 	bl	80065ae <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9a:	f7fc ff4d 	bl	8003c38 <HAL_GetTick>
 8006d9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006da2:	f7fc ff49 	bl	8003c38 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e1df      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006db4:	f7ff fc0c 	bl	80065d0 <LL_RCC_LSI1_IsReady>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f1      	bne.n	8006da2 <HAL_RCC_OscConfig+0x34e>
 8006dbe:	e050      	b.n	8006e62 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006dc0:	f7ff fbe4 	bl	800658c <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc4:	f7fc ff38 	bl	8003c38 <HAL_GetTick>
 8006dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006dca:	e00b      	b.n	8006de4 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006dcc:	f7fc ff34 	bl	8003c38 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d904      	bls.n	8006de4 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e1ca      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
 8006dde:	bf00      	nop
 8006de0:	2000002c 	.word	0x2000002c
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006de4:	f7ff fbf4 	bl	80065d0 <LL_RCC_LSI1_IsReady>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0ee      	beq.n	8006dcc <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006dee:	f7ff fc12 	bl	8006616 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006df4:	f7fc ff20 	bl	8003c38 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e1b6      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006e06:	f7ff fc17 	bl	8006638 <LL_RCC_LSI2_IsReady>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f1      	bne.n	8006df4 <HAL_RCC_OscConfig+0x3a0>
 8006e10:	e027      	b.n	8006e62 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006e12:	f7ff fc00 	bl	8006616 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e16:	f7fc ff0f 	bl	8003c38 <HAL_GetTick>
 8006e1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006e1c:	e008      	b.n	8006e30 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006e1e:	f7fc ff0b 	bl	8003c38 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e1a1      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006e30:	f7ff fc02 	bl	8006638 <LL_RCC_LSI2_IsReady>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f1      	bne.n	8006e1e <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006e3a:	f7ff fbb8 	bl	80065ae <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3e:	f7fc fefb 	bl	8003c38 <HAL_GetTick>
 8006e42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006e44:	e008      	b.n	8006e58 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006e46:	f7fc fef7 	bl	8003c38 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e18d      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006e58:	f7ff fbba 	bl	80065d0 <LL_RCC_LSI1_IsReady>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f1      	bne.n	8006e46 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d05b      	beq.n	8006f26 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e6e:	4bb5      	ldr	r3, [pc, #724]	; (8007144 <HAL_RCC_OscConfig+0x6f0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d114      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006e7a:	f7ff f963 	bl	8006144 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e7e:	f7fc fedb 	bl	8003c38 <HAL_GetTick>
 8006e82:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e84:	e008      	b.n	8006e98 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e86:	f7fc fed7 	bl	8003c38 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e16d      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e98:	4baa      	ldr	r3, [pc, #680]	; (8007144 <HAL_RCC_OscConfig+0x6f0>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0f0      	beq.n	8006e86 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d102      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x45e>
 8006eac:	f7ff fb18 	bl	80064e0 <LL_RCC_LSE_Enable>
 8006eb0:	e00c      	b.n	8006ecc <HAL_RCC_OscConfig+0x478>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	2b05      	cmp	r3, #5
 8006eb8:	d104      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x470>
 8006eba:	f7ff fb33 	bl	8006524 <LL_RCC_LSE_EnableBypass>
 8006ebe:	f7ff fb0f 	bl	80064e0 <LL_RCC_LSE_Enable>
 8006ec2:	e003      	b.n	8006ecc <HAL_RCC_OscConfig+0x478>
 8006ec4:	f7ff fb1d 	bl	8006502 <LL_RCC_LSE_Disable>
 8006ec8:	f7ff fb3d 	bl	8006546 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d014      	beq.n	8006efe <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed4:	f7fc feb0 	bl	8003c38 <HAL_GetTick>
 8006ed8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006eda:	e00a      	b.n	8006ef2 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006edc:	f7fc feac 	bl	8003c38 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e140      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006ef2:	f7ff fb39 	bl	8006568 <LL_RCC_LSE_IsReady>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0ef      	beq.n	8006edc <HAL_RCC_OscConfig+0x488>
 8006efc:	e013      	b.n	8006f26 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efe:	f7fc fe9b 	bl	8003c38 <HAL_GetTick>
 8006f02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006f04:	e00a      	b.n	8006f1c <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f06:	f7fc fe97 	bl	8003c38 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e12b      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006f1c:	f7ff fb24 	bl	8006568 <LL_RCC_LSE_IsReady>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1ef      	bne.n	8006f06 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d02c      	beq.n	8006f8c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d014      	beq.n	8006f64 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f3a:	f7ff fa9d 	bl	8006478 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f3e:	f7fc fe7b 	bl	8003c38 <HAL_GetTick>
 8006f42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006f44:	e008      	b.n	8006f58 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f46:	f7fc fe77 	bl	8003c38 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d901      	bls.n	8006f58 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e10d      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006f58:	f7ff fab0 	bl	80064bc <LL_RCC_HSI48_IsReady>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0f1      	beq.n	8006f46 <HAL_RCC_OscConfig+0x4f2>
 8006f62:	e013      	b.n	8006f8c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f64:	f7ff fa99 	bl	800649a <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f68:	f7fc fe66 	bl	8003c38 <HAL_GetTick>
 8006f6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f70:	f7fc fe62 	bl	8003c38 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e0f8      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006f82:	f7ff fa9b 	bl	80064bc <LL_RCC_HSI48_IsReady>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f1      	bne.n	8006f70 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 80ee 	beq.w	8007172 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f96:	f7ff fbf9 	bl	800678c <LL_RCC_GetSysClkSource>
 8006f9a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	f040 80af 	bne.w	800710c <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f003 0203 	and.w	r2, r3, #3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d123      	bne.n	8007004 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d11c      	bne.n	8007004 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	0a1b      	lsrs	r3, r3, #8
 8006fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d114      	bne.n	8007004 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d10d      	bne.n	8007004 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d106      	bne.n	8007004 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007000:	429a      	cmp	r2, r3
 8007002:	d05d      	beq.n	80070c0 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	2b0c      	cmp	r3, #12
 8007008:	d058      	beq.n	80070bc <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800700a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e0ab      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800701c:	f7ff fc6c 	bl	80068f8 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007020:	f7fc fe0a 	bl	8003c38 <HAL_GetTick>
 8007024:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007028:	f7fc fe06 	bl	8003c38 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b02      	cmp	r3, #2
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e09c      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800703a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1ef      	bne.n	8007028 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	4b3e      	ldr	r3, [pc, #248]	; (8007148 <HAL_RCC_OscConfig+0x6f4>)
 8007050:	4013      	ands	r3, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800705a:	4311      	orrs	r1, r2
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007060:	0212      	lsls	r2, r2, #8
 8007062:	4311      	orrs	r1, r2
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007068:	4311      	orrs	r1, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800706e:	4311      	orrs	r1, r2
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007074:	430a      	orrs	r2, r1
 8007076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800707a:	4313      	orrs	r3, r2
 800707c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800707e:	f7ff fc2c 	bl	80068da <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800708c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007090:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007092:	f7fc fdd1 	bl	8003c38 <HAL_GetTick>
 8007096:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007098:	e008      	b.n	80070ac <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800709a:	f7fc fdcd 	bl	8003c38 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e063      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0ef      	beq.n	800709a <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070ba:	e05a      	b.n	8007172 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e059      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d151      	bne.n	8007172 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80070ce:	f7ff fc04 	bl	80068da <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80070d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070e2:	f7fc fda9 	bl	8003c38 <HAL_GetTick>
 80070e6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070e8:	e008      	b.n	80070fc <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ea:	f7fc fda5 	bl	8003c38 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e03b      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0ef      	beq.n	80070ea <HAL_RCC_OscConfig+0x696>
 800710a:	e032      	b.n	8007172 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2b0c      	cmp	r3, #12
 8007110:	d02d      	beq.n	800716e <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007112:	f7ff fbf1 	bl	80068f8 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007120:	f023 0303 	bic.w	r3, r3, #3
 8007124:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8007126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007130:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8007134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007138:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713a:	f7fc fd7d 	bl	8003c38 <HAL_GetTick>
 800713e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007140:	e00d      	b.n	800715e <HAL_RCC_OscConfig+0x70a>
 8007142:	bf00      	nop
 8007144:	58000400 	.word	0x58000400
 8007148:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800714c:	f7fc fd74 	bl	8003c38 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e00a      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800715e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1ef      	bne.n	800714c <HAL_RCC_OscConfig+0x6f8>
 800716c:	e001      	b.n	8007172 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e000      	b.n	8007174 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3734      	adds	r7, #52	; 0x34
 8007178:	46bd      	mov	sp, r7
 800717a:	bd90      	pop	{r4, r7, pc}

0800717c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e12a      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007190:	4b97      	ldr	r3, [pc, #604]	; (80073f0 <HAL_RCC_ClockConfig+0x274>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d91b      	bls.n	80071d6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800719e:	4b94      	ldr	r3, [pc, #592]	; (80073f0 <HAL_RCC_ClockConfig+0x274>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f023 0207 	bic.w	r2, r3, #7
 80071a6:	4992      	ldr	r1, [pc, #584]	; (80073f0 <HAL_RCC_ClockConfig+0x274>)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ae:	f7fc fd43 	bl	8003c38 <HAL_GetTick>
 80071b2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071b4:	e008      	b.n	80071c8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80071b6:	f7fc fd3f 	bl	8003c38 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e10e      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c8:	4b89      	ldr	r3, [pc, #548]	; (80073f0 <HAL_RCC_ClockConfig+0x274>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d1ef      	bne.n	80071b6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d016      	beq.n	8007210 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff fadc 	bl	80067a4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80071ec:	f7fc fd24 	bl	8003c38 <HAL_GetTick>
 80071f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80071f4:	f7fc fd20 	bl	8003c38 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d901      	bls.n	8007206 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e0ef      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007206:	f7ff fbc9 	bl	800699c <LL_RCC_IsActiveFlag_HPRE>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0f1      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b00      	cmp	r3, #0
 800721a:	d016      	beq.n	800724a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	4618      	mov	r0, r3
 8007222:	f7ff fad3 	bl	80067cc <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007226:	f7fc fd07 	bl	8003c38 <HAL_GetTick>
 800722a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800722c:	e008      	b.n	8007240 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800722e:	f7fc fd03 	bl	8003c38 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d901      	bls.n	8007240 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e0d2      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007240:	f7ff fbbe 	bl	80069c0 <LL_RCC_IsActiveFlag_C2HPRE>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0f1      	beq.n	800722e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	d016      	beq.n	8007284 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff facc 	bl	80067f8 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007260:	f7fc fcea 	bl	8003c38 <HAL_GetTick>
 8007264:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007266:	e008      	b.n	800727a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007268:	f7fc fce6 	bl	8003c38 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e0b5      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800727a:	f7ff fbb4 	bl	80069e6 <LL_RCC_IsActiveFlag_SHDHPRE>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0f1      	beq.n	8007268 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	2b00      	cmp	r3, #0
 800728e:	d016      	beq.n	80072be <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff fac6 	bl	8006826 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800729a:	f7fc fccd 	bl	8003c38 <HAL_GetTick>
 800729e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80072a0:	e008      	b.n	80072b4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80072a2:	f7fc fcc9 	bl	8003c38 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e098      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80072b4:	f7ff fbaa 	bl	8006a0c <LL_RCC_IsActiveFlag_PPRE1>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d0f1      	beq.n	80072a2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d017      	beq.n	80072fa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7ff fabc 	bl	800684e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80072d6:	f7fc fcaf 	bl	8003c38 <HAL_GetTick>
 80072da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80072dc:	e008      	b.n	80072f0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80072de:	f7fc fcab 	bl	8003c38 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e07a      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80072f0:	f7ff fb9e 	bl	8006a30 <LL_RCC_IsActiveFlag_PPRE2>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0f1      	beq.n	80072de <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d043      	beq.n	800738e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d106      	bne.n	800731c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800730e:	f7ff f85c 	bl	80063ca <LL_RCC_HSE_IsReady>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d11e      	bne.n	8007356 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e064      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2b03      	cmp	r3, #3
 8007322:	d106      	bne.n	8007332 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007324:	f7ff faf7 	bl	8006916 <LL_RCC_PLL_IsReady>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d113      	bne.n	8007356 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e059      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800733a:	f7ff f9c4 	bl	80066c6 <LL_RCC_MSI_IsReady>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d108      	bne.n	8007356 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e04e      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007348:	f7ff f86f 	bl	800642a <LL_RCC_HSI_IsReady>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e047      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff fa02 	bl	8006764 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007360:	f7fc fc6a 	bl	8003c38 <HAL_GetTick>
 8007364:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007366:	e00a      	b.n	800737e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007368:	f7fc fc66 	bl	8003c38 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	f241 3288 	movw	r2, #5000	; 0x1388
 8007376:	4293      	cmp	r3, r2
 8007378:	d901      	bls.n	800737e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e033      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800737e:	f7ff fa05 	bl	800678c <LL_RCC_GetSysClkSource>
 8007382:	4602      	mov	r2, r0
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	429a      	cmp	r2, r3
 800738c:	d1ec      	bne.n	8007368 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800738e:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <HAL_RCC_ClockConfig+0x274>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d21b      	bcs.n	80073d4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800739c:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <HAL_RCC_ClockConfig+0x274>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f023 0207 	bic.w	r2, r3, #7
 80073a4:	4912      	ldr	r1, [pc, #72]	; (80073f0 <HAL_RCC_ClockConfig+0x274>)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ac:	f7fc fc44 	bl	8003c38 <HAL_GetTick>
 80073b0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80073b4:	f7fc fc40 	bl	8003c38 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e00f      	b.n	80073e6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073c6:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <HAL_RCC_ClockConfig+0x274>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d1ef      	bne.n	80073b4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80073d4:	f7fa fed6 	bl	8002184 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80073d8:	f7fc fc3a 	bl	8003c50 <HAL_GetTickPrio>
 80073dc:	4603      	mov	r3, r0
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fc fbdc 	bl	8003b9c <HAL_InitTick>
 80073e4:	4603      	mov	r3, r0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	58004000 	.word	0x58004000

080073f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073f4:	b590      	push	{r4, r7, lr}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073fa:	f7ff f9c7 	bl	800678c <LL_RCC_GetSysClkSource>
 80073fe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007406:	f7ff f983 	bl	8006710 <LL_RCC_MSI_GetRange>
 800740a:	4603      	mov	r3, r0
 800740c:	091b      	lsrs	r3, r3, #4
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	4a2a      	ldr	r2, [pc, #168]	; (80074bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8007414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	e04a      	b.n	80074b2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b04      	cmp	r3, #4
 8007420:	d102      	bne.n	8007428 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007422:	4b27      	ldr	r3, [pc, #156]	; (80074c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	e044      	b.n	80074b2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b08      	cmp	r3, #8
 800742c:	d10a      	bne.n	8007444 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800742e:	f7fe ff7e 	bl	800632e <LL_RCC_HSE_IsEnabledDiv2>
 8007432:	4603      	mov	r3, r0
 8007434:	2b01      	cmp	r3, #1
 8007436:	d102      	bne.n	800743e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007438:	4b21      	ldr	r3, [pc, #132]	; (80074c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	e039      	b.n	80074b2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800743e:	4b21      	ldr	r3, [pc, #132]	; (80074c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	e036      	b.n	80074b2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007444:	f7ff fa9e 	bl	8006984 <LL_RCC_PLL_GetMainSource>
 8007448:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b02      	cmp	r3, #2
 800744e:	d002      	beq.n	8007456 <HAL_RCC_GetSysClockFreq+0x62>
 8007450:	2b03      	cmp	r3, #3
 8007452:	d003      	beq.n	800745c <HAL_RCC_GetSysClockFreq+0x68>
 8007454:	e00d      	b.n	8007472 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007456:	4b1a      	ldr	r3, [pc, #104]	; (80074c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007458:	60bb      	str	r3, [r7, #8]
        break;
 800745a:	e015      	b.n	8007488 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800745c:	f7fe ff67 	bl	800632e <LL_RCC_HSE_IsEnabledDiv2>
 8007460:	4603      	mov	r3, r0
 8007462:	2b01      	cmp	r3, #1
 8007464:	d102      	bne.n	800746c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007466:	4b16      	ldr	r3, [pc, #88]	; (80074c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007468:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800746a:	e00d      	b.n	8007488 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800746c:	4b15      	ldr	r3, [pc, #84]	; (80074c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800746e:	60bb      	str	r3, [r7, #8]
        break;
 8007470:	e00a      	b.n	8007488 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007472:	f7ff f94d 	bl	8006710 <LL_RCC_MSI_GetRange>
 8007476:	4603      	mov	r3, r0
 8007478:	091b      	lsrs	r3, r3, #4
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	4a0f      	ldr	r2, [pc, #60]	; (80074bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8007480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007484:	60bb      	str	r3, [r7, #8]
        break;
 8007486:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8007488:	f7ff fa57 	bl	800693a <LL_RCC_PLL_GetN>
 800748c:	4602      	mov	r2, r0
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	fb03 f402 	mul.w	r4, r3, r2
 8007494:	f7ff fa6a 	bl	800696c <LL_RCC_PLL_GetDivider>
 8007498:	4603      	mov	r3, r0
 800749a:	091b      	lsrs	r3, r3, #4
 800749c:	3301      	adds	r3, #1
 800749e:	fbb4 f4f3 	udiv	r4, r4, r3
 80074a2:	f7ff fa57 	bl	8006954 <LL_RCC_PLL_GetR>
 80074a6:	4603      	mov	r3, r0
 80074a8:	0f5b      	lsrs	r3, r3, #29
 80074aa:	3301      	adds	r3, #1
 80074ac:	fbb4 f3f3 	udiv	r3, r4, r3
 80074b0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80074b2:	68fb      	ldr	r3, [r7, #12]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd90      	pop	{r4, r7, pc}
 80074bc:	08010c84 	.word	0x08010c84
 80074c0:	00f42400 	.word	0x00f42400
 80074c4:	01e84800 	.word	0x01e84800

080074c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074c8:	b598      	push	{r3, r4, r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80074cc:	f7ff ff92 	bl	80073f4 <HAL_RCC_GetSysClockFreq>
 80074d0:	4604      	mov	r4, r0
 80074d2:	f7ff f9d0 	bl	8006876 <LL_RCC_GetAHBPrescaler>
 80074d6:	4603      	mov	r3, r0
 80074d8:	091b      	lsrs	r3, r3, #4
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	4a03      	ldr	r2, [pc, #12]	; (80074ec <HAL_RCC_GetHCLKFreq+0x24>)
 80074e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	bd98      	pop	{r3, r4, r7, pc}
 80074ec:	08010c24 	.word	0x08010c24

080074f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074f0:	b598      	push	{r3, r4, r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80074f4:	f7ff ffe8 	bl	80074c8 <HAL_RCC_GetHCLKFreq>
 80074f8:	4604      	mov	r4, r0
 80074fa:	f7ff f9d6 	bl	80068aa <LL_RCC_GetAPB1Prescaler>
 80074fe:	4603      	mov	r3, r0
 8007500:	0a1b      	lsrs	r3, r3, #8
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	4a04      	ldr	r2, [pc, #16]	; (8007518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800750c:	f003 031f 	and.w	r3, r3, #31
 8007510:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007514:	4618      	mov	r0, r3
 8007516:	bd98      	pop	{r3, r4, r7, pc}
 8007518:	08010c64 	.word	0x08010c64

0800751c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800751c:	b598      	push	{r3, r4, r7, lr}
 800751e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007520:	f7ff ffd2 	bl	80074c8 <HAL_RCC_GetHCLKFreq>
 8007524:	4604      	mov	r4, r0
 8007526:	f7ff f9cc 	bl	80068c2 <LL_RCC_GetAPB2Prescaler>
 800752a:	4603      	mov	r3, r0
 800752c:	0adb      	lsrs	r3, r3, #11
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	4a04      	ldr	r2, [pc, #16]	; (8007544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007538:	f003 031f 	and.w	r3, r3, #31
 800753c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007540:	4618      	mov	r0, r3
 8007542:	bd98      	pop	{r3, r4, r7, pc}
 8007544:	08010c64 	.word	0x08010c64

08007548 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007548:	b590      	push	{r4, r7, lr}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2bb0      	cmp	r3, #176	; 0xb0
 8007554:	d903      	bls.n	800755e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007556:	4b15      	ldr	r3, [pc, #84]	; (80075ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	e007      	b.n	800756e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	091b      	lsrs	r3, r3, #4
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	4a11      	ldr	r2, [pc, #68]	; (80075ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800756c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800756e:	f7ff f98e 	bl	800688e <LL_RCC_GetAHB4Prescaler>
 8007572:	4603      	mov	r3, r0
 8007574:	091b      	lsrs	r3, r3, #4
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	4a0d      	ldr	r2, [pc, #52]	; (80075b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800757c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	fbb2 f3f3 	udiv	r3, r2, r3
 8007586:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	4a0a      	ldr	r2, [pc, #40]	; (80075b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800758c:	fba2 2303 	umull	r2, r3, r2, r3
 8007590:	0c9c      	lsrs	r4, r3, #18
 8007592:	f7fe fde7 	bl	8006164 <HAL_PWREx_GetVoltageRange>
 8007596:	4603      	mov	r3, r0
 8007598:	4619      	mov	r1, r3
 800759a:	4620      	mov	r0, r4
 800759c:	f000 f80c 	bl	80075b8 <RCC_SetFlashLatency>
 80075a0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd90      	pop	{r4, r7, pc}
 80075aa:	bf00      	nop
 80075ac:	08010c84 	.word	0x08010c84
 80075b0:	08010c24 	.word	0x08010c24
 80075b4:	431bde83 	.word	0x431bde83

080075b8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80075b8:	b590      	push	{r4, r7, lr}
 80075ba:	b093      	sub	sp, #76	; 0x4c
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80075c2:	4b39      	ldr	r3, [pc, #228]	; (80076a8 <RCC_SetFlashLatency+0xf0>)
 80075c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80075c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80075ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80075ce:	4a37      	ldr	r2, [pc, #220]	; (80076ac <RCC_SetFlashLatency+0xf4>)
 80075d0:	f107 031c 	add.w	r3, r7, #28
 80075d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80075d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80075da:	4b35      	ldr	r3, [pc, #212]	; (80076b0 <RCC_SetFlashLatency+0xf8>)
 80075dc:	f107 040c 	add.w	r4, r7, #12
 80075e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80075e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80075e6:	2300      	movs	r3, #0
 80075e8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f0:	d11c      	bne.n	800762c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80075f2:	2300      	movs	r3, #0
 80075f4:	643b      	str	r3, [r7, #64]	; 0x40
 80075f6:	e015      	b.n	8007624 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80075f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007600:	4413      	add	r3, r2
 8007602:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	429a      	cmp	r2, r3
 800760a:	d808      	bhi.n	800761e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800760c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007614:	4413      	add	r3, r2
 8007616:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800761a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800761c:	e022      	b.n	8007664 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800761e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007620:	3301      	adds	r3, #1
 8007622:	643b      	str	r3, [r7, #64]	; 0x40
 8007624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007626:	2b03      	cmp	r3, #3
 8007628:	d9e6      	bls.n	80075f8 <RCC_SetFlashLatency+0x40>
 800762a:	e01b      	b.n	8007664 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800762c:	2300      	movs	r3, #0
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007630:	e015      	b.n	800765e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800763a:	4413      	add	r3, r2
 800763c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	429a      	cmp	r2, r3
 8007644:	d808      	bhi.n	8007658 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800764e:	4413      	add	r3, r2
 8007650:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007654:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007656:	e005      	b.n	8007664 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765a:	3301      	adds	r3, #1
 800765c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800765e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007660:	2b02      	cmp	r3, #2
 8007662:	d9e6      	bls.n	8007632 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8007664:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <RCC_SetFlashLatency+0xfc>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f023 0207 	bic.w	r2, r3, #7
 800766c:	4911      	ldr	r1, [pc, #68]	; (80076b4 <RCC_SetFlashLatency+0xfc>)
 800766e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007670:	4313      	orrs	r3, r2
 8007672:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007674:	f7fc fae0 	bl	8003c38 <HAL_GetTick>
 8007678:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800767a:	e008      	b.n	800768e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800767c:	f7fc fadc 	bl	8003c38 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	2b02      	cmp	r3, #2
 8007688:	d901      	bls.n	800768e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e007      	b.n	800769e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800768e:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <RCC_SetFlashLatency+0xfc>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007698:	429a      	cmp	r2, r3
 800769a:	d1ef      	bne.n	800767c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	374c      	adds	r7, #76	; 0x4c
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd90      	pop	{r4, r7, pc}
 80076a6:	bf00      	nop
 80076a8:	08010914 	.word	0x08010914
 80076ac:	08010924 	.word	0x08010924
 80076b0:	08010930 	.word	0x08010930
 80076b4:	58004000 	.word	0x58004000

080076b8 <LL_RCC_LSE_IsEnabled>:
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80076bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <LL_RCC_LSE_IsEnabled+0x18>
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <LL_RCC_LSE_IsEnabled+0x1a>
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <LL_RCC_LSE_IsReady>:
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80076e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d101      	bne.n	80076f4 <LL_RCC_LSE_IsReady+0x18>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e000      	b.n	80076f6 <LL_RCC_LSE_IsReady+0x1a>
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <LL_RCC_MSI_EnablePLLMode>:
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8007704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800770e:	f043 0304 	orr.w	r3, r3, #4
 8007712:	6013      	str	r3, [r2, #0]
}
 8007714:	bf00      	nop
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <LL_RCC_SetRFWKPClockSource>:
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800772a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800772e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4313      	orrs	r3, r2
 800773a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <LL_RCC_SetSMPSClockSource>:
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	f023 0203 	bic.w	r2, r3, #3
 800775c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4313      	orrs	r3, r2
 8007764:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <LL_RCC_SetSMPSPrescaler>:
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800777a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4313      	orrs	r3, r2
 800778c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <LL_RCC_SetUSARTClockSource>:
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80077a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077aa:	f023 0203 	bic.w	r2, r3, #3
 80077ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <LL_RCC_SetLPUARTClockSource>:
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80077ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <LL_RCC_SetI2CClockSource>:
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80077fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	091b      	lsrs	r3, r3, #4
 8007806:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800780a:	43db      	mvns	r3, r3
 800780c:	401a      	ands	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800781a:	4313      	orrs	r3, r2
 800781c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <LL_RCC_SetLPTIMClockSource>:
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007838:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	0c1b      	lsrs	r3, r3, #16
 8007840:	041b      	lsls	r3, r3, #16
 8007842:	43db      	mvns	r3, r3
 8007844:	401a      	ands	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	041b      	lsls	r3, r3, #16
 800784a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800784e:	4313      	orrs	r3, r2
 8007850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <LL_RCC_SetSAIClockSource>:
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007870:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4313      	orrs	r3, r2
 800787c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <LL_RCC_SetRNGClockSource>:
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80078a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <LL_RCC_SetCLK48ClockSource>:
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80078c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80078cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <LL_RCC_SetUSBClockSource>:
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff ffe3 	bl	80078b8 <LL_RCC_SetCLK48ClockSource>
}
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <LL_RCC_SetADCClockSource>:
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800790a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800790e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4313      	orrs	r3, r2
 8007916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <LL_RCC_SetRTCClockSource>:
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800792e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007936:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800793a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4313      	orrs	r3, r2
 8007942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <LL_RCC_GetRTCClockSource>:
{
 8007952:	b480      	push	{r7}
 8007954:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800795a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007962:	4618      	mov	r0, r3
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <LL_RCC_ForceBackupDomainReset>:
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800797c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007984:	bf00      	nop
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <LL_RCC_ReleaseBackupDomainReset>:
{
 800798e:	b480      	push	{r7}
 8007990:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800799a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800799e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80079a6:	bf00      	nop
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <LL_RCC_PLLSAI1_Enable>:
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80079b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079c2:	6013      	str	r3, [r2, #0]
}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <LL_RCC_PLLSAI1_Disable>:
{
 80079ce:	b480      	push	{r7}
 80079d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80079d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079e0:	6013      	str	r3, [r2, #0]
}
 80079e2:	bf00      	nop
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <LL_RCC_PLLSAI1_IsReady>:
{
 80079ec:	b480      	push	{r7}
 80079ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80079f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079fe:	d101      	bne.n	8007a04 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e000      	b.n	8007a06 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007a18:	2300      	movs	r3, #0
 8007a1a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d033      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a34:	d00c      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a3a:	d802      	bhi.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d010      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007a40:	e017      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007a42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a46:	d017      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007a48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a4c:	d016      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8007a4e:	e010      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a5e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007a60:	e00d      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 f94d 	bl	8007d06 <RCCEx_PLLSAI1_ConfigNP>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007a70:	e005      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	77fb      	strb	r3, [r7, #31]
        break;
 8007a76:	e002      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8007a78:	bf00      	nop
 8007a7a:	e000      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8007a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a7e:	7ffb      	ldrb	r3, [r7, #31]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d105      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff fee9 	bl	8007860 <LL_RCC_SetSAIClockSource>
 8007a8e:	e001      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a90:	7ffb      	ldrb	r3, [r7, #31]
 8007a92:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d046      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007aa0:	f7ff ff57 	bl	8007952 <LL_RCC_GetRTCClockSource>
 8007aa4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d03c      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007ab0:	f7fe fb48 	bl	8006144 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff ff31 	bl	8007926 <LL_RCC_SetRTCClockSource>
 8007ac4:	e02e      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ace:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007ad0:	f7ff ff4c 	bl	800796c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007ad4:	f7ff ff5b 	bl	800798e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007af0:	f7ff fde2 	bl	80076b8 <LL_RCC_LSE_IsEnabled>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d114      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007afa:	f7fc f89d 	bl	8003c38 <HAL_GetTick>
 8007afe:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007b00:	e00b      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b02:	f7fc f899 	bl	8003c38 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d902      	bls.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	77fb      	strb	r3, [r7, #31]
              break;
 8007b18:	e004      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007b1a:	f7ff fddf 	bl	80076dc <LL_RCC_LSE_IsReady>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d1ee      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007b24:	7ffb      	ldrb	r3, [r7, #31]
 8007b26:	77bb      	strb	r3, [r7, #30]
 8007b28:	e001      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2a:	7ffb      	ldrb	r3, [r7, #31]
 8007b2c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d004      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff fe2b 	bl	800779a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d004      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7ff fe36 	bl	80077c6 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff fe5e 	bl	800782c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fe53 	bl	800782c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff fe2b 	bl	80077f2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d004      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff fe20 	bl	80077f2 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d022      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff fe8e 	bl	80078e4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bd0:	d107      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007be0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bea:	d10b      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3304      	adds	r3, #4
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 f8e3 	bl	8007dbc <RCCEx_PLLSAI1_ConfigNQ>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007bfa:	7ffb      	ldrb	r3, [r7, #31]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8007c00:	7ffb      	ldrb	r3, [r7, #31]
 8007c02:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d02b      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c18:	d008      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c22:	d003      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d105      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff fe2b 	bl	800788c <LL_RCC_SetRNGClockSource>
 8007c36:	e00a      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	2000      	movs	r0, #0
 8007c44:	f7ff fe22 	bl	800788c <LL_RCC_SetRNGClockSource>
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff fe35 	bl	80078b8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007c56:	d107      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d022      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff fe3e 	bl	80078fa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c86:	d107      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c96:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ca0:	d10b      	bne.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 f8e3 	bl	8007e72 <RCCEx_PLLSAI1_ConfigNR>
 8007cac:	4603      	mov	r3, r0
 8007cae:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007cb0:	7ffb      	ldrb	r3, [r7, #31]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8007cb6:	7ffb      	ldrb	r3, [r7, #31]
 8007cb8:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d004      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff fd27 	bl	800771e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d009      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff fd46 	bl	8007772 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff fd2d 	bl	800774a <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8007cf0:	7fbb      	ldrb	r3, [r7, #30]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3720      	adds	r7, #32
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007cfe:	f7ff fcff 	bl	8007700 <LL_RCC_MSI_EnablePLLMode>
}
 8007d02:	bf00      	nop
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007d12:	f7ff fe5c 	bl	80079ce <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d16:	f7fb ff8f 	bl	8003c38 <HAL_GetTick>
 8007d1a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007d1c:	e009      	b.n	8007d32 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d1e:	f7fb ff8b 	bl	8003c38 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d902      	bls.n	8007d32 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d30:	e004      	b.n	8007d3c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007d32:	f7ff fe5b 	bl	80079ec <LL_RCC_PLLSAI1_IsReady>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1f0      	bne.n	8007d1e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d137      	bne.n	8007db2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	021b      	lsls	r3, r3, #8
 8007d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d56:	4313      	orrs	r3, r2
 8007d58:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007d70:	f7ff fe1e 	bl	80079b0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d74:	f7fb ff60 	bl	8003c38 <HAL_GetTick>
 8007d78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007d7a:	e009      	b.n	8007d90 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d7c:	f7fb ff5c 	bl	8003c38 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d902      	bls.n	8007d90 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8007d8e:	e004      	b.n	8007d9a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007d90:	f7ff fe2c 	bl	80079ec <LL_RCC_PLLSAI1_IsReady>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d1f0      	bne.n	8007d7c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d108      	bne.n	8007db2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007da4:	691a      	ldr	r2, [r3, #16]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dae:	4313      	orrs	r3, r2
 8007db0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007dc8:	f7ff fe01 	bl	80079ce <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007dcc:	f7fb ff34 	bl	8003c38 <HAL_GetTick>
 8007dd0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007dd2:	e009      	b.n	8007de8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007dd4:	f7fb ff30 	bl	8003c38 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d902      	bls.n	8007de8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	73fb      	strb	r3, [r7, #15]
      break;
 8007de6:	e004      	b.n	8007df2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007de8:	f7ff fe00 	bl	80079ec <LL_RCC_PLLSAI1_IsReady>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1f0      	bne.n	8007dd4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d137      	bne.n	8007e68 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	021b      	lsls	r3, r3, #8
 8007e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e22:	4313      	orrs	r3, r2
 8007e24:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007e26:	f7ff fdc3 	bl	80079b0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e2a:	f7fb ff05 	bl	8003c38 <HAL_GetTick>
 8007e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007e30:	e009      	b.n	8007e46 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e32:	f7fb ff01 	bl	8003c38 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d902      	bls.n	8007e46 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	73fb      	strb	r3, [r7, #15]
        break;
 8007e44:	e004      	b.n	8007e50 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007e46:	f7ff fdd1 	bl	80079ec <LL_RCC_PLLSAI1_IsReady>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d1f0      	bne.n	8007e32 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d108      	bne.n	8007e68 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e5a:	691a      	ldr	r2, [r3, #16]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e64:	4313      	orrs	r3, r2
 8007e66:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007e7e:	f7ff fda6 	bl	80079ce <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e82:	f7fb fed9 	bl	8003c38 <HAL_GetTick>
 8007e86:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e88:	e009      	b.n	8007e9e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e8a:	f7fb fed5 	bl	8003c38 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d902      	bls.n	8007e9e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9c:	e004      	b.n	8007ea8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e9e:	f7ff fda5 	bl	80079ec <LL_RCC_PLLSAI1_IsReady>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1f0      	bne.n	8007e8a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d137      	bne.n	8007f1e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	021b      	lsls	r3, r3, #8
 8007ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007edc:	f7ff fd68 	bl	80079b0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ee0:	f7fb feaa 	bl	8003c38 <HAL_GetTick>
 8007ee4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ee6:	e009      	b.n	8007efc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ee8:	f7fb fea6 	bl	8003c38 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d902      	bls.n	8007efc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	73fb      	strb	r3, [r7, #15]
        break;
 8007efa:	e004      	b.n	8007f06 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007efc:	f7ff fd76 	bl	80079ec <LL_RCC_PLLSAI1_IsReady>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d1f0      	bne.n	8007ee8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d108      	bne.n	8007f1e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e090      	b.n	800805c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7f9 ff6e 	bl	8001e30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	22ca      	movs	r2, #202	; 0xca
 8007f62:	625a      	str	r2, [r3, #36]	; 0x24
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2253      	movs	r2, #83	; 0x53
 8007f6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fa6d 	bl	800844c <RTC_EnterInitMode>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d009      	beq.n	8007f8c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	22ff      	movs	r2, #255	; 0xff
 8007f7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2204      	movs	r2, #4
 8007f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e067      	b.n	800805c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	6812      	ldr	r2, [r2, #0]
 8007f96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f9e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6899      	ldr	r1, [r3, #8]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685a      	ldr	r2, [r3, #4]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	68d2      	ldr	r2, [r2, #12]
 8007fc6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6919      	ldr	r1, [r3, #16]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	041a      	lsls	r2, r3, #16
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fea:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0203 	bic.w	r2, r2, #3
 8007ffa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	69da      	ldr	r2, [r3, #28]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	431a      	orrs	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d113      	bne.n	800804a <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f9ec 	bl	8008400 <HAL_RTC_WaitForSynchro>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00d      	beq.n	800804a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	22ff      	movs	r2, #255	; 0xff
 8008034:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2204      	movs	r2, #4
 800803a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e008      	b.n	800805c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	22ff      	movs	r2, #255	; 0xff
 8008050:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800805a:	2300      	movs	r3, #0
  }
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008064:	b590      	push	{r4, r7, lr}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d101      	bne.n	800807e <HAL_RTC_SetTime+0x1a>
 800807a:	2302      	movs	r3, #2
 800807c:	e0b2      	b.n	80081e4 <HAL_RTC_SetTime+0x180>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2202      	movs	r2, #2
 800808a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d126      	bne.n	80080e2 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2200      	movs	r2, #0
 80080a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 f9f7 	bl	80084a0 <RTC_ByteToBcd2>
 80080b2:	4603      	mov	r3, r0
 80080b4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	785b      	ldrb	r3, [r3, #1]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 f9f0 	bl	80084a0 <RTC_ByteToBcd2>
 80080c0:	4603      	mov	r3, r0
 80080c2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80080c4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	789b      	ldrb	r3, [r3, #2]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f9e8 	bl	80084a0 <RTC_ByteToBcd2>
 80080d0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80080d2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	78db      	ldrb	r3, [r3, #3]
 80080da:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80080dc:	4313      	orrs	r3, r2
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	e018      	b.n	8008114 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d102      	bne.n	80080f6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2200      	movs	r2, #0
 80080f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	785b      	ldrb	r3, [r3, #1]
 8008100:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008102:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008108:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	78db      	ldrb	r3, [r3, #3]
 800810e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008110:	4313      	orrs	r3, r2
 8008112:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	22ca      	movs	r2, #202	; 0xca
 800811a:	625a      	str	r2, [r3, #36]	; 0x24
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2253      	movs	r2, #83	; 0x53
 8008122:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 f991 	bl	800844c <RTC_EnterInitMode>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00d      	beq.n	800814c <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	22ff      	movs	r2, #255	; 0xff
 8008136:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2204      	movs	r2, #4
 800813c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e04b      	b.n	80081e4 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008156:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800815a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689a      	ldr	r2, [r3, #8]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800816a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6899      	ldr	r1, [r3, #8]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	431a      	orrs	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008192:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f003 0320 	and.w	r3, r3, #32
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d113      	bne.n	80081ca <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 f92c 	bl	8008400 <HAL_RTC_WaitForSynchro>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	22ff      	movs	r2, #255	; 0xff
 80081b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2204      	movs	r2, #4
 80081ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e00c      	b.n	80081e4 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	22ff      	movs	r2, #255	; 0xff
 80081d0:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 80081e2:	2300      	movs	r3, #0
  }
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd90      	pop	{r4, r7, pc}

080081ec <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800821a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800821e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	0c1b      	lsrs	r3, r3, #16
 8008224:	b2db      	uxtb	r3, r3
 8008226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800822a:	b2da      	uxtb	r2, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	0a1b      	lsrs	r3, r3, #8
 8008234:	b2db      	uxtb	r3, r3
 8008236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823a:	b2da      	uxtb	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008248:	b2da      	uxtb	r2, r3
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	0c1b      	lsrs	r3, r3, #16
 8008252:	b2db      	uxtb	r3, r3
 8008254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008258:	b2da      	uxtb	r2, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d11a      	bne.n	800829a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	4618      	mov	r0, r3
 800826a:	f000 f939 	bl	80084e0 <RTC_Bcd2ToByte>
 800826e:	4603      	mov	r3, r0
 8008270:	461a      	mov	r2, r3
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 f930 	bl	80084e0 <RTC_Bcd2ToByte>
 8008280:	4603      	mov	r3, r0
 8008282:	461a      	mov	r2, r3
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	789b      	ldrb	r3, [r3, #2]
 800828c:	4618      	mov	r0, r3
 800828e:	f000 f927 	bl	80084e0 <RTC_Bcd2ToByte>
 8008292:	4603      	mov	r3, r0
 8008294:	461a      	mov	r2, r3
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3718      	adds	r7, #24
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80082a4:	b590      	push	{r4, r7, lr}
 80082a6:	b087      	sub	sp, #28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d101      	bne.n	80082be <HAL_RTC_SetDate+0x1a>
 80082ba:	2302      	movs	r3, #2
 80082bc:	e09c      	b.n	80083f8 <HAL_RTC_SetDate+0x154>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2202      	movs	r2, #2
 80082ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10e      	bne.n	80082f2 <HAL_RTC_SetDate+0x4e>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	f003 0310 	and.w	r3, r3, #16
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d008      	beq.n	80082f2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	f023 0310 	bic.w	r3, r3, #16
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	330a      	adds	r3, #10
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d11c      	bne.n	8008332 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	78db      	ldrb	r3, [r3, #3]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 f8cf 	bl	80084a0 <RTC_ByteToBcd2>
 8008302:	4603      	mov	r3, r0
 8008304:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	4618      	mov	r0, r3
 800830c:	f000 f8c8 	bl	80084a0 <RTC_ByteToBcd2>
 8008310:	4603      	mov	r3, r0
 8008312:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008314:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	789b      	ldrb	r3, [r3, #2]
 800831a:	4618      	mov	r0, r3
 800831c:	f000 f8c0 	bl	80084a0 <RTC_ByteToBcd2>
 8008320:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008322:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800832c:	4313      	orrs	r3, r2
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	e00e      	b.n	8008350 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	78db      	ldrb	r3, [r3, #3]
 8008336:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	785b      	ldrb	r3, [r3, #1]
 800833c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800833e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008344:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800834c:	4313      	orrs	r3, r2
 800834e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	22ca      	movs	r2, #202	; 0xca
 8008356:	625a      	str	r2, [r3, #36]	; 0x24
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2253      	movs	r2, #83	; 0x53
 800835e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 f873 	bl	800844c <RTC_EnterInitMode>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00d      	beq.n	8008388 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	22ff      	movs	r2, #255	; 0xff
 8008372:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2204      	movs	r2, #4
 8008378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e037      	b.n	80083f8 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008392:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008396:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083a6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d113      	bne.n	80083de <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f822 	bl	8008400 <HAL_RTC_WaitForSynchro>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00d      	beq.n	80083de <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	22ff      	movs	r2, #255	; 0xff
 80083c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2204      	movs	r2, #4
 80083ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e00c      	b.n	80083f8 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	22ff      	movs	r2, #255	; 0xff
 80083e4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80083f6:	2300      	movs	r3, #0
  }
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	371c      	adds	r7, #28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd90      	pop	{r4, r7, pc}

08008400 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008416:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008418:	f7fb fc0e 	bl	8003c38 <HAL_GetTick>
 800841c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800841e:	e009      	b.n	8008434 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008420:	f7fb fc0a 	bl	8003c38 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800842e:	d901      	bls.n	8008434 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e007      	b.n	8008444 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f003 0320 	and.w	r3, r3, #32
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0ee      	beq.n	8008420 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845e:	2b00      	cmp	r3, #0
 8008460:	d119      	bne.n	8008496 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f04f 32ff 	mov.w	r2, #4294967295
 800846a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800846c:	f7fb fbe4 	bl	8003c38 <HAL_GetTick>
 8008470:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008472:	e009      	b.n	8008488 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8008474:	f7fb fbe0 	bl	8003c38 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008482:	d901      	bls.n	8008488 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e007      	b.n	8008498 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	d0ee      	beq.n	8008474 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	4603      	mov	r3, r0
 80084a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 80084b2:	e005      	b.n	80084c0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3301      	adds	r3, #1
 80084b8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80084ba:	7afb      	ldrb	r3, [r7, #11]
 80084bc:	3b0a      	subs	r3, #10
 80084be:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 80084c0:	7afb      	ldrb	r3, [r7, #11]
 80084c2:	2b09      	cmp	r3, #9
 80084c4:	d8f6      	bhi.n	80084b4 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	011b      	lsls	r3, r3, #4
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	7afb      	ldrb	r3, [r7, #11]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	b2db      	uxtb	r3, r3
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	091b      	lsrs	r3, r3, #4
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	461a      	mov	r2, r3
 80084f2:	4613      	mov	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	f003 030f 	and.w	r3, r3, #15
 8008506:	b2db      	uxtb	r3, r3
 8008508:	4413      	add	r3, r2
 800850a:	b2db      	uxtb	r3, r3
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <LL_RCC_GetUSARTClockSource>:
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008524:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4013      	ands	r3, r2
}
 800852c:	4618      	mov	r0, r3
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <LL_RCC_GetLPUARTClockSource>:
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008544:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4013      	ands	r3, r2
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e042      	b.n	80085f0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008570:	2b00      	cmp	r3, #0
 8008572:	d106      	bne.n	8008582 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7f9 fc6d 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2224      	movs	r2, #36	; 0x24
 8008586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 0201 	bic.w	r2, r2, #1
 8008598:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f82c 	bl	80085f8 <UART_SetConfig>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d101      	bne.n	80085aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e022      	b.n	80085f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fa2e 	bl	8008a14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689a      	ldr	r2, [r3, #8]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f042 0201 	orr.w	r2, r2, #1
 80085e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fab5 	bl	8008b58 <UART_CheckIdleState>
 80085ee:	4603      	mov	r3, r0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80085fc:	b088      	sub	sp, #32
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689a      	ldr	r2, [r3, #8]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	4313      	orrs	r3, r2
 800861c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008622:	69fa      	ldr	r2, [r7, #28]
 8008624:	4313      	orrs	r3, r2
 8008626:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	4ba4      	ldr	r3, [pc, #656]	; (80088c0 <UART_SetConfig+0x2c8>)
 8008630:	4013      	ands	r3, r2
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6812      	ldr	r2, [r2, #0]
 8008636:	69f9      	ldr	r1, [r7, #28]
 8008638:	430b      	orrs	r3, r1
 800863a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a99      	ldr	r2, [pc, #612]	; (80088c4 <UART_SetConfig+0x2cc>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d004      	beq.n	800866c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	4313      	orrs	r3, r2
 800866a:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008676:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	6812      	ldr	r2, [r2, #0]
 800867e:	69f9      	ldr	r1, [r7, #28]
 8008680:	430b      	orrs	r3, r1
 8008682:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868a:	f023 010f 	bic.w	r1, r3, #15
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a8a      	ldr	r2, [pc, #552]	; (80088c8 <UART_SetConfig+0x2d0>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d121      	bne.n	80086e8 <UART_SetConfig+0xf0>
 80086a4:	2003      	movs	r0, #3
 80086a6:	f7ff ff37 	bl	8008518 <LL_RCC_GetUSARTClockSource>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d817      	bhi.n	80086e0 <UART_SetConfig+0xe8>
 80086b0:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <UART_SetConfig+0xc0>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	080086c9 	.word	0x080086c9
 80086bc:	080086d5 	.word	0x080086d5
 80086c0:	080086cf 	.word	0x080086cf
 80086c4:	080086db 	.word	0x080086db
 80086c8:	2301      	movs	r3, #1
 80086ca:	76fb      	strb	r3, [r7, #27]
 80086cc:	e038      	b.n	8008740 <UART_SetConfig+0x148>
 80086ce:	2302      	movs	r3, #2
 80086d0:	76fb      	strb	r3, [r7, #27]
 80086d2:	e035      	b.n	8008740 <UART_SetConfig+0x148>
 80086d4:	2304      	movs	r3, #4
 80086d6:	76fb      	strb	r3, [r7, #27]
 80086d8:	e032      	b.n	8008740 <UART_SetConfig+0x148>
 80086da:	2308      	movs	r3, #8
 80086dc:	76fb      	strb	r3, [r7, #27]
 80086de:	e02f      	b.n	8008740 <UART_SetConfig+0x148>
 80086e0:	2310      	movs	r3, #16
 80086e2:	76fb      	strb	r3, [r7, #27]
 80086e4:	bf00      	nop
 80086e6:	e02b      	b.n	8008740 <UART_SetConfig+0x148>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a75      	ldr	r2, [pc, #468]	; (80088c4 <UART_SetConfig+0x2cc>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d124      	bne.n	800873c <UART_SetConfig+0x144>
 80086f2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80086f6:	f7ff ff1f 	bl	8008538 <LL_RCC_GetLPUARTClockSource>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008700:	d012      	beq.n	8008728 <UART_SetConfig+0x130>
 8008702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008706:	d802      	bhi.n	800870e <UART_SetConfig+0x116>
 8008708:	2b00      	cmp	r3, #0
 800870a:	d007      	beq.n	800871c <UART_SetConfig+0x124>
 800870c:	e012      	b.n	8008734 <UART_SetConfig+0x13c>
 800870e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008712:	d006      	beq.n	8008722 <UART_SetConfig+0x12a>
 8008714:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008718:	d009      	beq.n	800872e <UART_SetConfig+0x136>
 800871a:	e00b      	b.n	8008734 <UART_SetConfig+0x13c>
 800871c:	2300      	movs	r3, #0
 800871e:	76fb      	strb	r3, [r7, #27]
 8008720:	e00e      	b.n	8008740 <UART_SetConfig+0x148>
 8008722:	2302      	movs	r3, #2
 8008724:	76fb      	strb	r3, [r7, #27]
 8008726:	e00b      	b.n	8008740 <UART_SetConfig+0x148>
 8008728:	2304      	movs	r3, #4
 800872a:	76fb      	strb	r3, [r7, #27]
 800872c:	e008      	b.n	8008740 <UART_SetConfig+0x148>
 800872e:	2308      	movs	r3, #8
 8008730:	76fb      	strb	r3, [r7, #27]
 8008732:	e005      	b.n	8008740 <UART_SetConfig+0x148>
 8008734:	2310      	movs	r3, #16
 8008736:	76fb      	strb	r3, [r7, #27]
 8008738:	bf00      	nop
 800873a:	e001      	b.n	8008740 <UART_SetConfig+0x148>
 800873c:	2310      	movs	r3, #16
 800873e:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a5f      	ldr	r2, [pc, #380]	; (80088c4 <UART_SetConfig+0x2cc>)
 8008746:	4293      	cmp	r3, r2
 8008748:	f040 808e 	bne.w	8008868 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800874c:	7efb      	ldrb	r3, [r7, #27]
 800874e:	2b08      	cmp	r3, #8
 8008750:	d823      	bhi.n	800879a <UART_SetConfig+0x1a2>
 8008752:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <UART_SetConfig+0x160>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	0800877d 	.word	0x0800877d
 800875c:	0800879b 	.word	0x0800879b
 8008760:	08008785 	.word	0x08008785
 8008764:	0800879b 	.word	0x0800879b
 8008768:	0800878b 	.word	0x0800878b
 800876c:	0800879b 	.word	0x0800879b
 8008770:	0800879b 	.word	0x0800879b
 8008774:	0800879b 	.word	0x0800879b
 8008778:	08008793 	.word	0x08008793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800877c:	f7fe feb8 	bl	80074f0 <HAL_RCC_GetPCLK1Freq>
 8008780:	6178      	str	r0, [r7, #20]
        break;
 8008782:	e00f      	b.n	80087a4 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008784:	4b51      	ldr	r3, [pc, #324]	; (80088cc <UART_SetConfig+0x2d4>)
 8008786:	617b      	str	r3, [r7, #20]
        break;
 8008788:	e00c      	b.n	80087a4 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800878a:	f7fe fe33 	bl	80073f4 <HAL_RCC_GetSysClockFreq>
 800878e:	6178      	str	r0, [r7, #20]
        break;
 8008790:	e008      	b.n	80087a4 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008796:	617b      	str	r3, [r7, #20]
        break;
 8008798:	e004      	b.n	80087a4 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	76bb      	strb	r3, [r7, #26]
        break;
 80087a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 811c 	beq.w	80089e4 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	4a47      	ldr	r2, [pc, #284]	; (80088d0 <UART_SetConfig+0x2d8>)
 80087b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087b6:	461a      	mov	r2, r3
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80087be:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685a      	ldr	r2, [r3, #4]
 80087c4:	4613      	mov	r3, r2
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	4413      	add	r3, r2
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d305      	bcc.n	80087dc <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d902      	bls.n	80087e2 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	76bb      	strb	r3, [r7, #26]
 80087e0:	e100      	b.n	80089e4 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f04f 0100 	mov.w	r1, #0
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	4a38      	ldr	r2, [pc, #224]	; (80088d0 <UART_SetConfig+0x2d8>)
 80087f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f04f 0400 	mov.w	r4, #0
 80087fa:	461a      	mov	r2, r3
 80087fc:	4623      	mov	r3, r4
 80087fe:	f7f7 fd17 	bl	8000230 <__aeabi_uldivmod>
 8008802:	4603      	mov	r3, r0
 8008804:	460c      	mov	r4, r1
 8008806:	4619      	mov	r1, r3
 8008808:	4622      	mov	r2, r4
 800880a:	f04f 0300 	mov.w	r3, #0
 800880e:	f04f 0400 	mov.w	r4, #0
 8008812:	0214      	lsls	r4, r2, #8
 8008814:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008818:	020b      	lsls	r3, r1, #8
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	6852      	ldr	r2, [r2, #4]
 800881e:	0852      	lsrs	r2, r2, #1
 8008820:	4611      	mov	r1, r2
 8008822:	f04f 0200 	mov.w	r2, #0
 8008826:	eb13 0b01 	adds.w	fp, r3, r1
 800882a:	eb44 0c02 	adc.w	ip, r4, r2
 800882e:	4658      	mov	r0, fp
 8008830:	4661      	mov	r1, ip
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f04f 0400 	mov.w	r4, #0
 800883a:	461a      	mov	r2, r3
 800883c:	4623      	mov	r3, r4
 800883e:	f7f7 fcf7 	bl	8000230 <__aeabi_uldivmod>
 8008842:	4603      	mov	r3, r0
 8008844:	460c      	mov	r4, r1
 8008846:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800884e:	d308      	bcc.n	8008862 <UART_SetConfig+0x26a>
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008856:	d204      	bcs.n	8008862 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	60da      	str	r2, [r3, #12]
 8008860:	e0c0      	b.n	80089e4 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	76bb      	strb	r3, [r7, #26]
 8008866:	e0bd      	b.n	80089e4 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	69db      	ldr	r3, [r3, #28]
 800886c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008870:	d169      	bne.n	8008946 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008872:	7efb      	ldrb	r3, [r7, #27]
 8008874:	3b01      	subs	r3, #1
 8008876:	2b07      	cmp	r3, #7
 8008878:	d82c      	bhi.n	80088d4 <UART_SetConfig+0x2dc>
 800887a:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <UART_SetConfig+0x288>)
 800887c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008880:	080088a1 	.word	0x080088a1
 8008884:	080088a9 	.word	0x080088a9
 8008888:	080088d5 	.word	0x080088d5
 800888c:	080088af 	.word	0x080088af
 8008890:	080088d5 	.word	0x080088d5
 8008894:	080088d5 	.word	0x080088d5
 8008898:	080088d5 	.word	0x080088d5
 800889c:	080088b7 	.word	0x080088b7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088a0:	f7fe fe3c 	bl	800751c <HAL_RCC_GetPCLK2Freq>
 80088a4:	6178      	str	r0, [r7, #20]
        break;
 80088a6:	e01a      	b.n	80088de <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088a8:	4b08      	ldr	r3, [pc, #32]	; (80088cc <UART_SetConfig+0x2d4>)
 80088aa:	617b      	str	r3, [r7, #20]
        break;
 80088ac:	e017      	b.n	80088de <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088ae:	f7fe fda1 	bl	80073f4 <HAL_RCC_GetSysClockFreq>
 80088b2:	6178      	str	r0, [r7, #20]
        break;
 80088b4:	e013      	b.n	80088de <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ba:	617b      	str	r3, [r7, #20]
        break;
 80088bc:	e00f      	b.n	80088de <UART_SetConfig+0x2e6>
 80088be:	bf00      	nop
 80088c0:	cfff69f3 	.word	0xcfff69f3
 80088c4:	40008000 	.word	0x40008000
 80088c8:	40013800 	.word	0x40013800
 80088cc:	00f42400 	.word	0x00f42400
 80088d0:	08011868 	.word	0x08011868
      default:
        pclk = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	76bb      	strb	r3, [r7, #26]
        break;
 80088dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d07f      	beq.n	80089e4 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	4a48      	ldr	r2, [pc, #288]	; (8008a0c <UART_SetConfig+0x414>)
 80088ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ee:	461a      	mov	r2, r3
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f6:	005a      	lsls	r2, r3, #1
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	085b      	lsrs	r3, r3, #1
 80088fe:	441a      	add	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	fbb2 f3f3 	udiv	r3, r2, r3
 8008908:	b29b      	uxth	r3, r3
 800890a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2b0f      	cmp	r3, #15
 8008910:	d916      	bls.n	8008940 <UART_SetConfig+0x348>
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008918:	d212      	bcs.n	8008940 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	b29b      	uxth	r3, r3
 800891e:	f023 030f 	bic.w	r3, r3, #15
 8008922:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	085b      	lsrs	r3, r3, #1
 8008928:	b29b      	uxth	r3, r3
 800892a:	f003 0307 	and.w	r3, r3, #7
 800892e:	b29a      	uxth	r2, r3
 8008930:	89fb      	ldrh	r3, [r7, #14]
 8008932:	4313      	orrs	r3, r2
 8008934:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	89fa      	ldrh	r2, [r7, #14]
 800893c:	60da      	str	r2, [r3, #12]
 800893e:	e051      	b.n	80089e4 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	76bb      	strb	r3, [r7, #26]
 8008944:	e04e      	b.n	80089e4 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008946:	7efb      	ldrb	r3, [r7, #27]
 8008948:	3b01      	subs	r3, #1
 800894a:	2b07      	cmp	r3, #7
 800894c:	d821      	bhi.n	8008992 <UART_SetConfig+0x39a>
 800894e:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0x35c>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	08008975 	.word	0x08008975
 8008958:	0800897d 	.word	0x0800897d
 800895c:	08008993 	.word	0x08008993
 8008960:	08008983 	.word	0x08008983
 8008964:	08008993 	.word	0x08008993
 8008968:	08008993 	.word	0x08008993
 800896c:	08008993 	.word	0x08008993
 8008970:	0800898b 	.word	0x0800898b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008974:	f7fe fdd2 	bl	800751c <HAL_RCC_GetPCLK2Freq>
 8008978:	6178      	str	r0, [r7, #20]
        break;
 800897a:	e00f      	b.n	800899c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800897c:	4b24      	ldr	r3, [pc, #144]	; (8008a10 <UART_SetConfig+0x418>)
 800897e:	617b      	str	r3, [r7, #20]
        break;
 8008980:	e00c      	b.n	800899c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008982:	f7fe fd37 	bl	80073f4 <HAL_RCC_GetSysClockFreq>
 8008986:	6178      	str	r0, [r7, #20]
        break;
 8008988:	e008      	b.n	800899c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800898a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800898e:	617b      	str	r3, [r7, #20]
        break;
 8008990:	e004      	b.n	800899c <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	76bb      	strb	r3, [r7, #26]
        break;
 800899a:	bf00      	nop
    }

    if (pclk != 0U)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d020      	beq.n	80089e4 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	4a19      	ldr	r2, [pc, #100]	; (8008a0c <UART_SetConfig+0x414>)
 80089a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ac:	461a      	mov	r2, r3
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	085b      	lsrs	r3, r3, #1
 80089ba:	441a      	add	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	2b0f      	cmp	r3, #15
 80089cc:	d908      	bls.n	80089e0 <UART_SetConfig+0x3e8>
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d4:	d204      	bcs.n	80089e0 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	60da      	str	r2, [r3, #12]
 80089de:	e001      	b.n	80089e4 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008a00:	7ebb      	ldrb	r3, [r7, #26]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3720      	adds	r7, #32
 8008a06:	46bd      	mov	sp, r7
 8008a08:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008a0c:	08011868 	.word	0x08011868
 8008a10:	00f42400 	.word	0x00f42400

08008a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00a      	beq.n	8008a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a86:	f003 0308 	and.w	r3, r3, #8
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa8:	f003 0310 	and.w	r3, r3, #16
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01a      	beq.n	8008b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b12:	d10a      	bne.n	8008b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	605a      	str	r2, [r3, #4]
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af02      	add	r7, sp, #8
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008b68:	f7fb f866 	bl	8003c38 <HAL_GetTick>
 8008b6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0308 	and.w	r3, r3, #8
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d10e      	bne.n	8008b9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f82c 	bl	8008be8 <UART_WaitOnFlagUntilTimeout>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e022      	b.n	8008be0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	d10e      	bne.n	8008bc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f816 	bl	8008be8 <UART_WaitOnFlagUntilTimeout>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e00c      	b.n	8008be0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bf8:	e062      	b.n	8008cc0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c00:	d05e      	beq.n	8008cc0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c02:	f7fb f819 	bl	8003c38 <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d302      	bcc.n	8008c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d11d      	bne.n	8008c54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c26:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689a      	ldr	r2, [r3, #8]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 0201 	bic.w	r2, r2, #1
 8008c36:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e045      	b.n	8008ce0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0304 	and.w	r3, r3, #4
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d02e      	beq.n	8008cc0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c70:	d126      	bne.n	8008cc0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c7a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c8a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e00f      	b.n	8008ce0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	69da      	ldr	r2, [r3, #28]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	4013      	ands	r3, r2
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	bf0c      	ite	eq
 8008cd0:	2301      	moveq	r3, #1
 8008cd2:	2300      	movne	r3, #0
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d08d      	beq.n	8008bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d101      	bne.n	8008cfe <HAL_UARTEx_DisableFifoMode+0x16>
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	e027      	b.n	8008d4e <HAL_UARTEx_DisableFifoMode+0x66>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2224      	movs	r2, #36	; 0x24
 8008d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 0201 	bic.w	r2, r2, #1
 8008d24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d101      	bne.n	8008d72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d6e:	2302      	movs	r3, #2
 8008d70:	e02d      	b.n	8008dce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2224      	movs	r2, #36	; 0x24
 8008d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 0201 	bic.w	r2, r2, #1
 8008d98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	683a      	ldr	r2, [r7, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f850 	bl	8008e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d101      	bne.n	8008dee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008dea:	2302      	movs	r3, #2
 8008dec:	e02d      	b.n	8008e4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2224      	movs	r2, #36	; 0x24
 8008dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0201 	bic.w	r2, r2, #1
 8008e14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f812 	bl	8008e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b089      	sub	sp, #36	; 0x24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008e5c:	4a2f      	ldr	r2, [pc, #188]	; (8008f1c <UARTEx_SetNbDataToProcess+0xc8>)
 8008e5e:	f107 0314 	add.w	r3, r7, #20
 8008e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e66:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008e6a:	4a2d      	ldr	r2, [pc, #180]	; (8008f20 <UARTEx_SetNbDataToProcess+0xcc>)
 8008e6c:	f107 030c 	add.w	r3, r7, #12
 8008e70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e74:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d108      	bne.n	8008e92 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e90:	e03d      	b.n	8008f0e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e92:	2308      	movs	r3, #8
 8008e94:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e96:	2308      	movs	r3, #8
 8008e98:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	0e5b      	lsrs	r3, r3, #25
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	f003 0307 	and.w	r3, r3, #7
 8008ea8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	0f5b      	lsrs	r3, r3, #29
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	f003 0307 	and.w	r3, r3, #7
 8008eb8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008eba:	7fbb      	ldrb	r3, [r7, #30]
 8008ebc:	7f3a      	ldrb	r2, [r7, #28]
 8008ebe:	f107 0120 	add.w	r1, r7, #32
 8008ec2:	440a      	add	r2, r1
 8008ec4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008ec8:	fb02 f303 	mul.w	r3, r2, r3
 8008ecc:	7f3a      	ldrb	r2, [r7, #28]
 8008ece:	f107 0120 	add.w	r1, r7, #32
 8008ed2:	440a      	add	r2, r1
 8008ed4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008ed8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008ee4:	7ffb      	ldrb	r3, [r7, #31]
 8008ee6:	7f7a      	ldrb	r2, [r7, #29]
 8008ee8:	f107 0120 	add.w	r1, r7, #32
 8008eec:	440a      	add	r2, r1
 8008eee:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008ef2:	fb02 f303 	mul.w	r3, r2, r3
 8008ef6:	7f7a      	ldrb	r2, [r7, #29]
 8008ef8:	f107 0120 	add.w	r1, r7, #32
 8008efc:	440a      	add	r2, r1
 8008efe:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008f02:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f0e:	bf00      	nop
 8008f10:	3724      	adds	r7, #36	; 0x24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	08010940 	.word	0x08010940
 8008f20:	08010948 	.word	0x08010948

08008f24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f2c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b085      	sub	sp, #20
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f5e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f62:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	43db      	mvns	r3, r3
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4013      	ands	r3, r2
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b082      	sub	sp, #8
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	f107 0014 	add.w	r0, r7, #20
 8008f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff ffb0 	bl	8008f24 <USB_EnableGlobalInt>

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fd0:	b004      	add	sp, #16
 8008fd2:	4770      	bx	lr

08008fd4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b09d      	sub	sp, #116	; 0x74
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ffa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	78db      	ldrb	r3, [r3, #3]
 8009002:	2b03      	cmp	r3, #3
 8009004:	d81f      	bhi.n	8009046 <USB_ActivateEndpoint+0x72>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <USB_ActivateEndpoint+0x38>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	0800901d 	.word	0x0800901d
 8009010:	08009039 	.word	0x08009039
 8009014:	0800904f 	.word	0x0800904f
 8009018:	0800902b 	.word	0x0800902b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800901c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009020:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009024:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009028:	e012      	b.n	8009050 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800902a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800902e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009032:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009036:	e00b      	b.n	8009050 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009038:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800903c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009040:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009044:	e004      	b.n	8009050 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800904c:	e000      	b.n	8009050 <USB_ActivateEndpoint+0x7c>
      break;
 800904e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	441a      	add	r2, r3
 800905a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800905e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800906a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800906e:	b29b      	uxth	r3, r3
 8009070:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	b29b      	uxth	r3, r3
 8009080:	b21b      	sxth	r3, r3
 8009082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800908a:	b21a      	sxth	r2, r3
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	b21b      	sxth	r3, r3
 8009092:	4313      	orrs	r3, r2
 8009094:	b21b      	sxth	r3, r3
 8009096:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	441a      	add	r2, r3
 80090a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80090a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	7b1b      	ldrb	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f040 8149 	bne.w	8009358 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	785b      	ldrb	r3, [r3, #1]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 8084 	beq.w	80091d8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	61bb      	str	r3, [r7, #24]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090da:	b29b      	uxth	r3, r3
 80090dc:	461a      	mov	r2, r3
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	4413      	add	r3, r2
 80090e2:	61bb      	str	r3, [r7, #24]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	00da      	lsls	r2, r3, #3
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	88db      	ldrh	r3, [r3, #6]
 80090f8:	085b      	lsrs	r3, r3, #1
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	881b      	ldrh	r3, [r3, #0]
 8009110:	827b      	strh	r3, [r7, #18]
 8009112:	8a7b      	ldrh	r3, [r7, #18]
 8009114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009118:	2b00      	cmp	r3, #0
 800911a:	d01b      	beq.n	8009154 <USB_ActivateEndpoint+0x180>
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	b29b      	uxth	r3, r3
 800912a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800912e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009132:	823b      	strh	r3, [r7, #16]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	441a      	add	r2, r3
 800913e:	8a3b      	ldrh	r3, [r7, #16]
 8009140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800914c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009150:	b29b      	uxth	r3, r3
 8009152:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	78db      	ldrb	r3, [r3, #3]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d020      	beq.n	800919e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	b29b      	uxth	r3, r3
 800916a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800916e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009172:	81bb      	strh	r3, [r7, #12]
 8009174:	89bb      	ldrh	r3, [r7, #12]
 8009176:	f083 0320 	eor.w	r3, r3, #32
 800917a:	81bb      	strh	r3, [r7, #12]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	441a      	add	r2, r3
 8009186:	89bb      	ldrh	r3, [r7, #12]
 8009188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800918c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009198:	b29b      	uxth	r3, r3
 800919a:	8013      	strh	r3, [r2, #0]
 800919c:	e2bf      	b.n	800971e <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b4:	81fb      	strh	r3, [r7, #14]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	441a      	add	r2, r3
 80091c0:	89fb      	ldrh	r3, [r7, #14]
 80091c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	8013      	strh	r3, [r2, #0]
 80091d6:	e2a2      	b.n	800971e <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	633b      	str	r3, [r7, #48]	; 0x30
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	461a      	mov	r2, r3
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	4413      	add	r3, r2
 80091ea:	633b      	str	r3, [r7, #48]	; 0x30
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	00da      	lsls	r2, r3, #3
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	4413      	add	r3, r2
 80091f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	88db      	ldrh	r3, [r3, #6]
 8009200:	085b      	lsrs	r3, r3, #1
 8009202:	b29b      	uxth	r3, r3
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	b29a      	uxth	r2, r3
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009216:	b29b      	uxth	r3, r3
 8009218:	461a      	mov	r2, r3
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	4413      	add	r3, r2
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	00da      	lsls	r2, r3, #3
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	4413      	add	r3, r2
 800922a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800922e:	627b      	str	r3, [r7, #36]	; 0x24
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d112      	bne.n	800925e <USB_ActivateEndpoint+0x28a>
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	b29b      	uxth	r3, r3
 800923e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009242:	b29a      	uxth	r2, r3
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	801a      	strh	r2, [r3, #0]
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	b29b      	uxth	r3, r3
 800924e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009256:	b29a      	uxth	r2, r3
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	801a      	strh	r2, [r3, #0]
 800925c:	e02f      	b.n	80092be <USB_ActivateEndpoint+0x2ea>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	2b3e      	cmp	r3, #62	; 0x3e
 8009264:	d813      	bhi.n	800928e <USB_ActivateEndpoint+0x2ba>
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	085b      	lsrs	r3, r3, #1
 800926c:	66bb      	str	r3, [r7, #104]	; 0x68
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <USB_ActivateEndpoint+0x2ac>
 800927a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800927c:	3301      	adds	r3, #1
 800927e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009282:	b29b      	uxth	r3, r3
 8009284:	029b      	lsls	r3, r3, #10
 8009286:	b29a      	uxth	r2, r3
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	801a      	strh	r2, [r3, #0]
 800928c:	e017      	b.n	80092be <USB_ActivateEndpoint+0x2ea>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	095b      	lsrs	r3, r3, #5
 8009294:	66bb      	str	r3, [r7, #104]	; 0x68
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	f003 031f 	and.w	r3, r3, #31
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d102      	bne.n	80092a8 <USB_ActivateEndpoint+0x2d4>
 80092a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092a4:	3b01      	subs	r3, #1
 80092a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80092a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	029b      	lsls	r3, r3, #10
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80092cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d01b      	beq.n	800930e <USB_ActivateEndpoint+0x33a>
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ec:	843b      	strh	r3, [r7, #32]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	441a      	add	r2, r3
 80092f8:	8c3b      	ldrh	r3, [r7, #32]
 80092fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800930a:	b29b      	uxth	r3, r3
 800930c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	b29b      	uxth	r3, r3
 800931c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009324:	83fb      	strh	r3, [r7, #30]
 8009326:	8bfb      	ldrh	r3, [r7, #30]
 8009328:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800932c:	83fb      	strh	r3, [r7, #30]
 800932e:	8bfb      	ldrh	r3, [r7, #30]
 8009330:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009334:	83fb      	strh	r3, [r7, #30]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	441a      	add	r2, r3
 8009340:	8bfb      	ldrh	r3, [r7, #30]
 8009342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800934a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800934e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009352:	b29b      	uxth	r3, r3
 8009354:	8013      	strh	r3, [r2, #0]
 8009356:	e1e2      	b.n	800971e <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	b29b      	uxth	r3, r3
 8009366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800936a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	441a      	add	r2, r3
 800937c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009388:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800938c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009390:	b29b      	uxth	r3, r3
 8009392:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	663b      	str	r3, [r7, #96]	; 0x60
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800939e:	b29b      	uxth	r3, r3
 80093a0:	461a      	mov	r2, r3
 80093a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093a4:	4413      	add	r3, r2
 80093a6:	663b      	str	r3, [r7, #96]	; 0x60
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	00da      	lsls	r2, r3, #3
 80093ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	891b      	ldrh	r3, [r3, #8]
 80093bc:	085b      	lsrs	r3, r3, #1
 80093be:	b29b      	uxth	r3, r3
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093c6:	801a      	strh	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	461a      	mov	r2, r3
 80093d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093d8:	4413      	add	r3, r2
 80093da:	65bb      	str	r3, [r7, #88]	; 0x58
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	00da      	lsls	r2, r3, #3
 80093e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093e4:	4413      	add	r3, r2
 80093e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093ea:	657b      	str	r3, [r7, #84]	; 0x54
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	895b      	ldrh	r3, [r3, #10]
 80093f0:	085b      	lsrs	r3, r3, #1
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	785b      	ldrb	r3, [r3, #1]
 8009400:	2b00      	cmp	r3, #0
 8009402:	f040 80b1 	bne.w	8009568 <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009416:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800941a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800941e:	2b00      	cmp	r3, #0
 8009420:	d01d      	beq.n	800945e <USB_ActivateEndpoint+0x48a>
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	b29b      	uxth	r3, r3
 8009430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009438:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	441a      	add	r2, r3
 8009446:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800944a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800944e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800945a:	b29b      	uxth	r3, r3
 800945c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800946c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800946e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009472:	2b00      	cmp	r3, #0
 8009474:	d01b      	beq.n	80094ae <USB_ActivateEndpoint+0x4da>
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	b29b      	uxth	r3, r3
 8009484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800948c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	441a      	add	r2, r3
 8009498:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800949a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800949e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	881b      	ldrh	r3, [r3, #0]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094c4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	441a      	add	r2, r3
 80094d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80094d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094fc:	873b      	strh	r3, [r7, #56]	; 0x38
 80094fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009500:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009504:	873b      	strh	r3, [r7, #56]	; 0x38
 8009506:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009508:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800950c:	873b      	strh	r3, [r7, #56]	; 0x38
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	441a      	add	r2, r3
 8009518:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800951a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800951e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800952a:	b29b      	uxth	r3, r3
 800952c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	b29b      	uxth	r3, r3
 800953c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009544:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	441a      	add	r2, r3
 8009550:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800955a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800955e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009562:	b29b      	uxth	r3, r3
 8009564:	8013      	strh	r3, [r2, #0]
 8009566:	e0da      	b.n	800971e <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8009578:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800957c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01d      	beq.n	80095c0 <USB_ActivateEndpoint+0x5ec>
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	b29b      	uxth	r3, r3
 8009592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800959a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	441a      	add	r2, r3
 80095a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80095ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095bc:	b29b      	uxth	r3, r3
 80095be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80095d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80095d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d01d      	beq.n	8009618 <USB_ActivateEndpoint+0x644>
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095f2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	441a      	add	r2, r3
 8009600:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800960c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009610:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009614:	b29b      	uxth	r3, r3
 8009616:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	b29b      	uxth	r3, r3
 8009626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800962a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800962e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	441a      	add	r2, r3
 800963c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800964c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009650:	b29b      	uxth	r3, r3
 8009652:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	78db      	ldrb	r3, [r3, #3]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d024      	beq.n	80096a6 <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	b29b      	uxth	r3, r3
 800966a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800966e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009672:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009676:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800967a:	f083 0320 	eor.w	r3, r3, #32
 800967e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	441a      	add	r2, r3
 800968c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800969c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	8013      	strh	r3, [r2, #0]
 80096a4:	e01d      	b.n	80096e2 <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096bc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	441a      	add	r2, r3
 80096ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80096ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096de:	b29b      	uxth	r3, r3
 80096e0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	441a      	add	r2, r3
 8009706:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800970a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800970e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800971a:	b29b      	uxth	r3, r3
 800971c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800971e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009722:	4618      	mov	r0, r3
 8009724:	3774      	adds	r7, #116	; 0x74
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop

08009730 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009730:	b480      	push	{r7}
 8009732:	b08d      	sub	sp, #52	; 0x34
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	7b1b      	ldrb	r3, [r3, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	f040 808e 	bne.w	8009860 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	785b      	ldrb	r3, [r3, #1]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d044      	beq.n	80097d6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	881b      	ldrh	r3, [r3, #0]
 8009758:	81bb      	strh	r3, [r7, #12]
 800975a:	89bb      	ldrh	r3, [r7, #12]
 800975c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01b      	beq.n	800979c <USB_DeactivateEndpoint+0x6c>
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4413      	add	r3, r2
 800976e:	881b      	ldrh	r3, [r3, #0]
 8009770:	b29b      	uxth	r3, r3
 8009772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800977a:	817b      	strh	r3, [r7, #10]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	441a      	add	r2, r3
 8009786:	897b      	ldrh	r3, [r7, #10]
 8009788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800978c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009794:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009798:	b29b      	uxth	r3, r3
 800979a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4413      	add	r3, r2
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097b2:	813b      	strh	r3, [r7, #8]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	441a      	add	r2, r3
 80097be:	893b      	ldrh	r3, [r7, #8]
 80097c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	8013      	strh	r3, [r2, #0]
 80097d4:	e192      	b.n	8009afc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	827b      	strh	r3, [r7, #18]
 80097e4:	8a7b      	ldrh	r3, [r7, #18]
 80097e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d01b      	beq.n	8009826 <USB_DeactivateEndpoint+0xf6>
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009804:	823b      	strh	r3, [r7, #16]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	441a      	add	r2, r3
 8009810:	8a3b      	ldrh	r3, [r7, #16]
 8009812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800981a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800981e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009822:	b29b      	uxth	r3, r3
 8009824:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	b29b      	uxth	r3, r3
 8009834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800983c:	81fb      	strh	r3, [r7, #14]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	441a      	add	r2, r3
 8009848:	89fb      	ldrh	r3, [r7, #14]
 800984a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800984e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800985a:	b29b      	uxth	r3, r3
 800985c:	8013      	strh	r3, [r2, #0]
 800985e:	e14d      	b.n	8009afc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	785b      	ldrb	r3, [r3, #1]
 8009864:	2b00      	cmp	r3, #0
 8009866:	f040 80a5 	bne.w	80099b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	843b      	strh	r3, [r7, #32]
 8009878:	8c3b      	ldrh	r3, [r7, #32]
 800987a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d01b      	beq.n	80098ba <USB_DeactivateEndpoint+0x18a>
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	b29b      	uxth	r3, r3
 8009890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009898:	83fb      	strh	r3, [r7, #30]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	441a      	add	r2, r3
 80098a4:	8bfb      	ldrh	r3, [r7, #30]
 80098a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	83bb      	strh	r3, [r7, #28]
 80098c8:	8bbb      	ldrh	r3, [r7, #28]
 80098ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d01b      	beq.n	800990a <USB_DeactivateEndpoint+0x1da>
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	881b      	ldrh	r3, [r3, #0]
 80098de:	b29b      	uxth	r3, r3
 80098e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098e8:	837b      	strh	r3, [r7, #26]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	441a      	add	r2, r3
 80098f4:	8b7b      	ldrh	r3, [r7, #26]
 80098f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009902:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009906:	b29b      	uxth	r3, r3
 8009908:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	881b      	ldrh	r3, [r3, #0]
 8009916:	b29b      	uxth	r3, r3
 8009918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800991c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009920:	833b      	strh	r3, [r7, #24]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	441a      	add	r2, r3
 800992c:	8b3b      	ldrh	r3, [r7, #24]
 800992e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800993a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800993e:	b29b      	uxth	r3, r3
 8009940:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009958:	82fb      	strh	r3, [r7, #22]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	441a      	add	r2, r3
 8009964:	8afb      	ldrh	r3, [r7, #22]
 8009966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800996e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009976:	b29b      	uxth	r3, r3
 8009978:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800998c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009990:	82bb      	strh	r3, [r7, #20]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	441a      	add	r2, r3
 800999c:	8abb      	ldrh	r3, [r7, #20]
 800999e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	8013      	strh	r3, [r2, #0]
 80099b2:	e0a3      	b.n	8009afc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80099c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d01b      	beq.n	8009a04 <USB_DeactivateEndpoint+0x2d4>
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	441a      	add	r2, r3
 80099ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80099f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009a12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d01b      	beq.n	8009a54 <USB_DeactivateEndpoint+0x324>
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a32:	853b      	strh	r3, [r7, #40]	; 0x28
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	441a      	add	r2, r3
 8009a3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	441a      	add	r2, r3
 8009a76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aa2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	441a      	add	r2, r3
 8009aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ada:	847b      	strh	r3, [r7, #34]	; 0x22
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	441a      	add	r2, r3
 8009ae6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3734      	adds	r7, #52	; 0x34
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b0a0      	sub	sp, #128	; 0x80
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	785b      	ldrb	r3, [r3, #1]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	f040 81a1 	bne.w	8009e60 <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	699a      	ldr	r2, [r3, #24]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d909      	bls.n	8009b3e <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	699a      	ldr	r2, [r3, #24]
 8009b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b36:	1ad2      	subs	r2, r2, r3
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	619a      	str	r2, [r3, #24]
 8009b3c:	e005      	b.n	8009b4a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	699b      	ldr	r3, [r3, #24]
 8009b42:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2200      	movs	r2, #0
 8009b48:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	7b1b      	ldrb	r3, [r3, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d11f      	bne.n	8009b92 <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	6959      	ldr	r1, [r3, #20]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	88da      	ldrh	r2, [r3, #6]
 8009b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fc3f 	bl	800a3e2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	613b      	str	r3, [r7, #16]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	461a      	mov	r2, r3
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	4413      	add	r3, r2
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	00da      	lsls	r2, r3, #3
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	4413      	add	r3, r2
 8009b82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b86:	60fb      	str	r3, [r7, #12]
 8009b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	801a      	strh	r2, [r3, #0]
 8009b90:	e141      	b.n	8009e16 <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d076      	beq.n	8009c96 <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	627b      	str	r3, [r7, #36]	; 0x24
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	785b      	ldrb	r3, [r3, #1]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d153      	bne.n	8009c5c <USB_EPStartXfer+0x152>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	61fb      	str	r3, [r7, #28]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	61fb      	str	r3, [r7, #28]
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	00da      	lsls	r2, r3, #3
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bd6:	61bb      	str	r3, [r7, #24]
 8009bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d112      	bne.n	8009c04 <USB_EPStartXfer+0xfa>
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	801a      	strh	r2, [r3, #0]
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	801a      	strh	r2, [r3, #0]
 8009c02:	e043      	b.n	8009c8c <USB_EPStartXfer+0x182>
 8009c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c06:	2b3e      	cmp	r3, #62	; 0x3e
 8009c08:	d811      	bhi.n	8009c2e <USB_EPStartXfer+0x124>
 8009c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c0c:	085b      	lsrs	r3, r3, #1
 8009c0e:	677b      	str	r3, [r7, #116]	; 0x74
 8009c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <USB_EPStartXfer+0x116>
 8009c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	677b      	str	r3, [r7, #116]	; 0x74
 8009c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	029b      	lsls	r3, r3, #10
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	801a      	strh	r2, [r3, #0]
 8009c2c:	e02e      	b.n	8009c8c <USB_EPStartXfer+0x182>
 8009c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c30:	095b      	lsrs	r3, r3, #5
 8009c32:	677b      	str	r3, [r7, #116]	; 0x74
 8009c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c36:	f003 031f 	and.w	r3, r3, #31
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d102      	bne.n	8009c44 <USB_EPStartXfer+0x13a>
 8009c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c40:	3b01      	subs	r3, #1
 8009c42:	677b      	str	r3, [r7, #116]	; 0x74
 8009c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	029b      	lsls	r3, r3, #10
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	801a      	strh	r2, [r3, #0]
 8009c5a:	e017      	b.n	8009c8c <USB_EPStartXfer+0x182>
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	785b      	ldrb	r3, [r3, #1]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d113      	bne.n	8009c8c <USB_EPStartXfer+0x182>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	4413      	add	r3, r2
 8009c72:	627b      	str	r3, [r7, #36]	; 0x24
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	00da      	lsls	r2, r3, #3
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c82:	623b      	str	r3, [r7, #32]
 8009c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	6a3b      	ldr	r3, [r7, #32]
 8009c8a:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	895b      	ldrh	r3, [r3, #10]
 8009c90:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8009c94:	e075      	b.n	8009d82 <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	785b      	ldrb	r3, [r3, #1]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d153      	bne.n	8009d46 <USB_EPStartXfer+0x23c>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	461a      	mov	r2, r3
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	4413      	add	r3, r2
 8009cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	00da      	lsls	r2, r3, #3
 8009cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cba:	4413      	add	r3, r2
 8009cbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d112      	bne.n	8009cee <USB_EPStartXfer+0x1e4>
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	881b      	ldrh	r3, [r3, #0]
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd6:	801a      	strh	r2, [r3, #0]
 8009cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	801a      	strh	r2, [r3, #0]
 8009cec:	e045      	b.n	8009d7a <USB_EPStartXfer+0x270>
 8009cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cf0:	2b3e      	cmp	r3, #62	; 0x3e
 8009cf2:	d811      	bhi.n	8009d18 <USB_EPStartXfer+0x20e>
 8009cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cf6:	085b      	lsrs	r3, r3, #1
 8009cf8:	673b      	str	r3, [r7, #112]	; 0x70
 8009cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cfc:	f003 0301 	and.w	r3, r3, #1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <USB_EPStartXfer+0x200>
 8009d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d06:	3301      	adds	r3, #1
 8009d08:	673b      	str	r3, [r7, #112]	; 0x70
 8009d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	029b      	lsls	r3, r3, #10
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d14:	801a      	strh	r2, [r3, #0]
 8009d16:	e030      	b.n	8009d7a <USB_EPStartXfer+0x270>
 8009d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d1a:	095b      	lsrs	r3, r3, #5
 8009d1c:	673b      	str	r3, [r7, #112]	; 0x70
 8009d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d20:	f003 031f 	and.w	r3, r3, #31
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d102      	bne.n	8009d2e <USB_EPStartXfer+0x224>
 8009d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	673b      	str	r3, [r7, #112]	; 0x70
 8009d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	029b      	lsls	r3, r3, #10
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d42:	801a      	strh	r2, [r3, #0]
 8009d44:	e019      	b.n	8009d7a <USB_EPStartXfer+0x270>
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	785b      	ldrb	r3, [r3, #1]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d115      	bne.n	8009d7a <USB_EPStartXfer+0x270>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	637b      	str	r3, [r7, #52]	; 0x34
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5e:	4413      	add	r3, r2
 8009d60:	637b      	str	r3, [r7, #52]	; 0x34
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	00da      	lsls	r2, r3, #3
 8009d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d70:	633b      	str	r3, [r7, #48]	; 0x30
 8009d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	891b      	ldrh	r3, [r3, #8]
 8009d7e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	6959      	ldr	r1, [r3, #20]
 8009d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fb27 	bl	800a3e2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	785b      	ldrb	r3, [r3, #1]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d11c      	bne.n	8009dd6 <USB_EPStartXfer+0x2cc>
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db2:	82bb      	strh	r3, [r7, #20]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	441a      	add	r2, r3
 8009dbe:	8abb      	ldrh	r3, [r7, #20]
 8009dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	8013      	strh	r3, [r2, #0]
 8009dd4:	e01f      	b.n	8009e16 <USB_EPStartXfer+0x30c>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	785b      	ldrb	r3, [r3, #1]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d11b      	bne.n	8009e16 <USB_EPStartXfer+0x30c>
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4413      	add	r3, r2
 8009de8:	881b      	ldrh	r3, [r3, #0]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009df4:	82fb      	strh	r3, [r7, #22]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	441a      	add	r2, r3
 8009e00:	8afb      	ldrh	r3, [r7, #22]
 8009e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e2c:	817b      	strh	r3, [r7, #10]
 8009e2e:	897b      	ldrh	r3, [r7, #10]
 8009e30:	f083 0310 	eor.w	r3, r3, #16
 8009e34:	817b      	strh	r3, [r7, #10]
 8009e36:	897b      	ldrh	r3, [r7, #10]
 8009e38:	f083 0320 	eor.w	r3, r3, #32
 8009e3c:	817b      	strh	r3, [r7, #10]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	441a      	add	r2, r3
 8009e48:	897b      	ldrh	r3, [r7, #10]
 8009e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	8013      	strh	r3, [r2, #0]
 8009e5e:	e175      	b.n	800a14c <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	699a      	ldr	r2, [r3, #24]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d909      	bls.n	8009e80 <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	699a      	ldr	r2, [r3, #24]
 8009e76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e78:	1ad2      	subs	r2, r2, r3
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	619a      	str	r2, [r3, #24]
 8009e7e:	e005      	b.n	8009e8c <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	7b1b      	ldrb	r3, [r3, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d153      	bne.n	8009f3c <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	643b      	str	r3, [r7, #64]	; 0x40
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ea4:	4413      	add	r3, r2
 8009ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	00da      	lsls	r2, r3, #3
 8009eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d112      	bne.n	8009ee4 <USB_EPStartXfer+0x3da>
 8009ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec0:	881b      	ldrh	r3, [r3, #0]
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ecc:	801a      	strh	r2, [r3, #0]
 8009ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee0:	801a      	strh	r2, [r3, #0]
 8009ee2:	e10f      	b.n	800a104 <USB_EPStartXfer+0x5fa>
 8009ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ee6:	2b3e      	cmp	r3, #62	; 0x3e
 8009ee8:	d811      	bhi.n	8009f0e <USB_EPStartXfer+0x404>
 8009eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eec:	085b      	lsrs	r3, r3, #1
 8009eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d002      	beq.n	8009f00 <USB_EPStartXfer+0x3f6>
 8009efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009efc:	3301      	adds	r3, #1
 8009efe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	029b      	lsls	r3, r3, #10
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0a:	801a      	strh	r2, [r3, #0]
 8009f0c:	e0fa      	b.n	800a104 <USB_EPStartXfer+0x5fa>
 8009f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f10:	095b      	lsrs	r3, r3, #5
 8009f12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f16:	f003 031f 	and.w	r3, r3, #31
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d102      	bne.n	8009f24 <USB_EPStartXfer+0x41a>
 8009f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f20:	3b01      	subs	r3, #1
 8009f22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	029b      	lsls	r3, r3, #10
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	e0e3      	b.n	800a104 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	785b      	ldrb	r3, [r3, #1]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d153      	bne.n	8009fec <USB_EPStartXfer+0x4e2>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	461a      	mov	r2, r3
 8009f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f54:	4413      	add	r3, r2
 8009f56:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	00da      	lsls	r2, r3, #3
 8009f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f60:	4413      	add	r3, r2
 8009f62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f66:	657b      	str	r3, [r7, #84]	; 0x54
 8009f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d112      	bne.n	8009f94 <USB_EPStartXfer+0x48a>
 8009f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f7c:	801a      	strh	r2, [r3, #0]
 8009f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f90:	801a      	strh	r2, [r3, #0]
 8009f92:	e045      	b.n	800a020 <USB_EPStartXfer+0x516>
 8009f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f96:	2b3e      	cmp	r3, #62	; 0x3e
 8009f98:	d811      	bhi.n	8009fbe <USB_EPStartXfer+0x4b4>
 8009f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f9c:	085b      	lsrs	r3, r3, #1
 8009f9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d002      	beq.n	8009fb0 <USB_EPStartXfer+0x4a6>
 8009faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fac:	3301      	adds	r3, #1
 8009fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	029b      	lsls	r3, r3, #10
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fba:	801a      	strh	r2, [r3, #0]
 8009fbc:	e030      	b.n	800a020 <USB_EPStartXfer+0x516>
 8009fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fc0:	095b      	lsrs	r3, r3, #5
 8009fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fc6:	f003 031f 	and.w	r3, r3, #31
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d102      	bne.n	8009fd4 <USB_EPStartXfer+0x4ca>
 8009fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	029b      	lsls	r3, r3, #10
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fe8:	801a      	strh	r2, [r3, #0]
 8009fea:	e019      	b.n	800a020 <USB_EPStartXfer+0x516>
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	785b      	ldrb	r3, [r3, #1]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d115      	bne.n	800a020 <USB_EPStartXfer+0x516>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	663b      	str	r3, [r7, #96]	; 0x60
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	461a      	mov	r2, r3
 800a002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a004:	4413      	add	r3, r2
 800a006:	663b      	str	r3, [r7, #96]	; 0x60
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	00da      	lsls	r2, r3, #3
 800a00e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a010:	4413      	add	r3, r2
 800a012:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a016:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a01e:	801a      	strh	r2, [r3, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	653b      	str	r3, [r7, #80]	; 0x50
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d153      	bne.n	800a0d4 <USB_EPStartXfer+0x5ca>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a036:	b29b      	uxth	r3, r3
 800a038:	461a      	mov	r2, r3
 800a03a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a03c:	4413      	add	r3, r2
 800a03e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	00da      	lsls	r2, r3, #3
 800a046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a048:	4413      	add	r3, r2
 800a04a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a04e:	647b      	str	r3, [r7, #68]	; 0x44
 800a050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a052:	2b00      	cmp	r3, #0
 800a054:	d112      	bne.n	800a07c <USB_EPStartXfer+0x572>
 800a056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a060:	b29a      	uxth	r2, r3
 800a062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a064:	801a      	strh	r2, [r3, #0]
 800a066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a074:	b29a      	uxth	r2, r3
 800a076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a078:	801a      	strh	r2, [r3, #0]
 800a07a:	e043      	b.n	800a104 <USB_EPStartXfer+0x5fa>
 800a07c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a07e:	2b3e      	cmp	r3, #62	; 0x3e
 800a080:	d811      	bhi.n	800a0a6 <USB_EPStartXfer+0x59c>
 800a082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a084:	085b      	lsrs	r3, r3, #1
 800a086:	667b      	str	r3, [r7, #100]	; 0x64
 800a088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <USB_EPStartXfer+0x58e>
 800a092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a094:	3301      	adds	r3, #1
 800a096:	667b      	str	r3, [r7, #100]	; 0x64
 800a098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	029b      	lsls	r3, r3, #10
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0a2:	801a      	strh	r2, [r3, #0]
 800a0a4:	e02e      	b.n	800a104 <USB_EPStartXfer+0x5fa>
 800a0a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0a8:	095b      	lsrs	r3, r3, #5
 800a0aa:	667b      	str	r3, [r7, #100]	; 0x64
 800a0ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0ae:	f003 031f 	and.w	r3, r3, #31
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d102      	bne.n	800a0bc <USB_EPStartXfer+0x5b2>
 800a0b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	667b      	str	r3, [r7, #100]	; 0x64
 800a0bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	029b      	lsls	r3, r3, #10
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0d0:	801a      	strh	r2, [r3, #0]
 800a0d2:	e017      	b.n	800a104 <USB_EPStartXfer+0x5fa>
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	785b      	ldrb	r3, [r3, #1]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d113      	bne.n	800a104 <USB_EPStartXfer+0x5fa>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0e8:	4413      	add	r3, r2
 800a0ea:	653b      	str	r3, [r7, #80]	; 0x50
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	00da      	lsls	r2, r3, #3
 800a0f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a102:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	b29b      	uxth	r3, r3
 800a112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a11c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a11e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a122:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a124:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a126:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a12a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	441a      	add	r2, r3
 800a136:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a13c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a148:	b29b      	uxth	r3, r3
 800a14a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3780      	adds	r7, #128	; 0x80
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a156:	b480      	push	{r7}
 800a158:	b085      	sub	sp, #20
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	785b      	ldrb	r3, [r3, #1]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d020      	beq.n	800a1aa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4413      	add	r3, r2
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	b29b      	uxth	r3, r3
 800a176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a17a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a17e:	81bb      	strh	r3, [r7, #12]
 800a180:	89bb      	ldrh	r3, [r7, #12]
 800a182:	f083 0310 	eor.w	r3, r3, #16
 800a186:	81bb      	strh	r3, [r7, #12]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	441a      	add	r2, r3
 800a192:	89bb      	ldrh	r3, [r7, #12]
 800a194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a19c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	8013      	strh	r3, [r2, #0]
 800a1a8:	e01f      	b.n	800a1ea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c0:	81fb      	strh	r3, [r7, #14]
 800a1c2:	89fb      	ldrh	r3, [r7, #14]
 800a1c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1c8:	81fb      	strh	r3, [r7, #14]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	441a      	add	r2, r3
 800a1d4:	89fb      	ldrh	r3, [r7, #14]
 800a1d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	7b1b      	ldrb	r3, [r3, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	f040 809d 	bne.w	800a346 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	785b      	ldrb	r3, [r3, #1]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d04c      	beq.n	800a2ae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	823b      	strh	r3, [r7, #16]
 800a222:	8a3b      	ldrh	r3, [r7, #16]
 800a224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d01b      	beq.n	800a264 <USB_EPClearStall+0x6c>
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a23e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a242:	81fb      	strh	r3, [r7, #14]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	441a      	add	r2, r3
 800a24e:	89fb      	ldrh	r3, [r7, #14]
 800a250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a25c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a260:	b29b      	uxth	r3, r3
 800a262:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	78db      	ldrb	r3, [r3, #3]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d06c      	beq.n	800a346 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4413      	add	r3, r2
 800a276:	881b      	ldrh	r3, [r3, #0]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a282:	81bb      	strh	r3, [r7, #12]
 800a284:	89bb      	ldrh	r3, [r7, #12]
 800a286:	f083 0320 	eor.w	r3, r3, #32
 800a28a:	81bb      	strh	r3, [r7, #12]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	441a      	add	r2, r3
 800a296:	89bb      	ldrh	r3, [r7, #12]
 800a298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a29c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	8013      	strh	r3, [r2, #0]
 800a2ac:	e04b      	b.n	800a346 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	881b      	ldrh	r3, [r3, #0]
 800a2ba:	82fb      	strh	r3, [r7, #22]
 800a2bc:	8afb      	ldrh	r3, [r7, #22]
 800a2be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d01b      	beq.n	800a2fe <USB_EPClearStall+0x106>
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2dc:	82bb      	strh	r3, [r7, #20]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	441a      	add	r2, r3
 800a2e8:	8abb      	ldrh	r3, [r7, #20]
 800a2ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a314:	827b      	strh	r3, [r7, #18]
 800a316:	8a7b      	ldrh	r3, [r7, #18]
 800a318:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a31c:	827b      	strh	r3, [r7, #18]
 800a31e:	8a7b      	ldrh	r3, [r7, #18]
 800a320:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a324:	827b      	strh	r3, [r7, #18]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	441a      	add	r2, r3
 800a330:	8a7b      	ldrh	r3, [r7, #18]
 800a332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a33a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a342:	b29b      	uxth	r3, r3
 800a344:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	371c      	adds	r7, #28
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d103      	bne.n	800a36e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2280      	movs	r2, #128	; 0x80
 800a36a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a394:	b29a      	uxth	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b085      	sub	sp, #20
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b083      	sub	sp, #12
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b08d      	sub	sp, #52	; 0x34
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	80fb      	strh	r3, [r7, #6]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a3f8:	88bb      	ldrh	r3, [r7, #4]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	085b      	lsrs	r3, r3, #1
 800a3fe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a408:	88fa      	ldrh	r2, [r7, #6]
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a412:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a418:	e01b      	b.n	800a452 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	3301      	adds	r3, #1
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	021b      	lsls	r3, r3, #8
 800a42e:	b29b      	uxth	r3, r3
 800a430:	461a      	mov	r2, r3
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	4313      	orrs	r3, r2
 800a436:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	3302      	adds	r3, #2
 800a444:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	3301      	adds	r3, #1
 800a44a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44e:	3b01      	subs	r3, #1
 800a450:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1e0      	bne.n	800a41a <USB_WritePMA+0x38>
  }
}
 800a458:	bf00      	nop
 800a45a:	3734      	adds	r7, #52	; 0x34
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a464:	b480      	push	{r7}
 800a466:	b08b      	sub	sp, #44	; 0x2c
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	4611      	mov	r1, r2
 800a470:	461a      	mov	r2, r3
 800a472:	460b      	mov	r3, r1
 800a474:	80fb      	strh	r3, [r7, #6]
 800a476:	4613      	mov	r3, r2
 800a478:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a47a:	88bb      	ldrh	r3, [r7, #4]
 800a47c:	085b      	lsrs	r3, r3, #1
 800a47e:	b29b      	uxth	r3, r3
 800a480:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a48a:	88fa      	ldrh	r2, [r7, #6]
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a494:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	627b      	str	r3, [r7, #36]	; 0x24
 800a49a:	e018      	b.n	800a4ce <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a49c:	6a3b      	ldr	r3, [r7, #32]
 800a49e:	881b      	ldrh	r3, [r3, #0]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	3302      	adds	r3, #2
 800a4a8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	0a1b      	lsrs	r3, r3, #8
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e3      	bne.n	800a49c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a4d4:	88bb      	ldrh	r3, [r7, #4]
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d007      	beq.n	800a4f0 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	701a      	strb	r2, [r3, #0]
  }
}
 800a4f0:	bf00      	nop
 800a4f2:	372c      	adds	r7, #44	; 0x2c
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	460b      	mov	r3, r1
 800a506:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a508:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a50c:	f004 fe24 	bl	800f158 <USBD_static_malloc>
 800a510:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d105      	bne.n	800a524 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a520:	2302      	movs	r3, #2
 800a522:	e066      	b.n	800a5f2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	7c1b      	ldrb	r3, [r3, #16]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d119      	bne.n	800a568 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a534:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a538:	2202      	movs	r2, #2
 800a53a:	2181      	movs	r1, #129	; 0x81
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f004 fcb8 	bl	800eeb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2201      	movs	r2, #1
 800a546:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a54c:	2202      	movs	r2, #2
 800a54e:	2101      	movs	r1, #1
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f004 fcae 	bl	800eeb2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2210      	movs	r2, #16
 800a562:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a566:	e016      	b.n	800a596 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a568:	2340      	movs	r3, #64	; 0x40
 800a56a:	2202      	movs	r2, #2
 800a56c:	2181      	movs	r1, #129	; 0x81
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f004 fc9f 	bl	800eeb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a57a:	2340      	movs	r3, #64	; 0x40
 800a57c:	2202      	movs	r2, #2
 800a57e:	2101      	movs	r1, #1
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f004 fc96 	bl	800eeb2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2210      	movs	r2, #16
 800a592:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a596:	2308      	movs	r3, #8
 800a598:	2203      	movs	r2, #3
 800a59a:	2182      	movs	r1, #130	; 0x82
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f004 fc88 	bl	800eeb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	7c1b      	ldrb	r3, [r3, #16]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d109      	bne.n	800a5e0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5d6:	2101      	movs	r1, #1
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f004 fd53 	bl	800f084 <USBD_LL_PrepareReceive>
 800a5de:	e007      	b.n	800a5f0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5e6:	2340      	movs	r3, #64	; 0x40
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f004 fd4a 	bl	800f084 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b084      	sub	sp, #16
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	460b      	mov	r3, r1
 800a604:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800a606:	2300      	movs	r3, #0
 800a608:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a60a:	2181      	movs	r1, #129	; 0x81
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f004 fc76 	bl	800eefe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a618:	2101      	movs	r1, #1
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f004 fc6f 	bl	800eefe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a628:	2182      	movs	r1, #130	; 0x82
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f004 fc67 	bl	800eefe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00e      	beq.n	800a668 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a65a:	4618      	mov	r0, r3
 800a65c:	f004 fd8a 	bl	800f174 <USBD_static_free>
    pdev->pClassData = NULL;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800a668:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a684:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a686:	2300      	movs	r3, #0
 800a688:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a68a:	2300      	movs	r3, #0
 800a68c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d03a      	beq.n	800a714 <USBD_CDC_Setup+0xa0>
 800a69e:	2b20      	cmp	r3, #32
 800a6a0:	f040 8097 	bne.w	800a7d2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	88db      	ldrh	r3, [r3, #6]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d029      	beq.n	800a700 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	b25b      	sxtb	r3, r3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	da11      	bge.n	800a6da <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800a6c2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	88d2      	ldrh	r2, [r2, #6]
 800a6c8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a6ca:	6939      	ldr	r1, [r7, #16]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	88db      	ldrh	r3, [r3, #6]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f001 fa6f 	bl	800bbb6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800a6d8:	e082      	b.n	800a7e0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	785a      	ldrb	r2, [r3, #1]
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	88db      	ldrh	r3, [r3, #6]
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a6f0:	6939      	ldr	r1, [r7, #16]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	88db      	ldrh	r3, [r3, #6]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f001 fa88 	bl	800bc0e <USBD_CtlPrepareRx>
    break;
 800a6fe:	e06f      	b.n	800a7e0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	7850      	ldrb	r0, [r2, #1]
 800a70c:	2200      	movs	r2, #0
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	4798      	blx	r3
    break;
 800a712:	e065      	b.n	800a7e0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	785b      	ldrb	r3, [r3, #1]
 800a718:	2b0b      	cmp	r3, #11
 800a71a:	d84f      	bhi.n	800a7bc <USBD_CDC_Setup+0x148>
 800a71c:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <USBD_CDC_Setup+0xb0>)
 800a71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a722:	bf00      	nop
 800a724:	0800a755 	.word	0x0800a755
 800a728:	0800a7cb 	.word	0x0800a7cb
 800a72c:	0800a7bd 	.word	0x0800a7bd
 800a730:	0800a7bd 	.word	0x0800a7bd
 800a734:	0800a7bd 	.word	0x0800a7bd
 800a738:	0800a7bd 	.word	0x0800a7bd
 800a73c:	0800a7bd 	.word	0x0800a7bd
 800a740:	0800a7bd 	.word	0x0800a7bd
 800a744:	0800a7bd 	.word	0x0800a7bd
 800a748:	0800a7bd 	.word	0x0800a7bd
 800a74c:	0800a77d 	.word	0x0800a77d
 800a750:	0800a7a5 	.word	0x0800a7a5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	d107      	bne.n	800a76e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a75e:	f107 030c 	add.w	r3, r7, #12
 800a762:	2202      	movs	r2, #2
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f001 fa25 	bl	800bbb6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a76c:	e030      	b.n	800a7d0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800a76e:	6839      	ldr	r1, [r7, #0]
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f001 f9af 	bl	800bad4 <USBD_CtlError>
        ret = USBD_FAIL;
 800a776:	2303      	movs	r3, #3
 800a778:	75fb      	strb	r3, [r7, #23]
      break;
 800a77a:	e029      	b.n	800a7d0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a782:	2b03      	cmp	r3, #3
 800a784:	d107      	bne.n	800a796 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a786:	f107 030f 	add.w	r3, r7, #15
 800a78a:	2201      	movs	r2, #1
 800a78c:	4619      	mov	r1, r3
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f001 fa11 	bl	800bbb6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a794:	e01c      	b.n	800a7d0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800a796:	6839      	ldr	r1, [r7, #0]
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f001 f99b 	bl	800bad4 <USBD_CtlError>
        ret = USBD_FAIL;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7a2:	e015      	b.n	800a7d0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d00f      	beq.n	800a7ce <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f001 f98f 	bl	800bad4 <USBD_CtlError>
        ret = USBD_FAIL;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a7ba:	e008      	b.n	800a7ce <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a7bc:	6839      	ldr	r1, [r7, #0]
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f001 f988 	bl	800bad4 <USBD_CtlError>
      ret = USBD_FAIL;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7c8:	e002      	b.n	800a7d0 <USBD_CDC_Setup+0x15c>
      break;
 800a7ca:	bf00      	nop
 800a7cc:	e008      	b.n	800a7e0 <USBD_CDC_Setup+0x16c>
      break;
 800a7ce:	bf00      	nop
    }
    break;
 800a7d0:	e006      	b.n	800a7e0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800a7d2:	6839      	ldr	r1, [r7, #0]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f001 f97d 	bl	800bad4 <USBD_CtlError>
    ret = USBD_FAIL;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	75fb      	strb	r3, [r7, #23]
    break;
 800a7de:	bf00      	nop
  }

  return (uint8_t)ret;
 800a7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop

0800a7ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e046      	b.n	800a89c <USBD_CDC_DataIn+0xb0>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a814:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a816:	78fa      	ldrb	r2, [r7, #3]
 800a818:	6879      	ldr	r1, [r7, #4]
 800a81a:	4613      	mov	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4413      	add	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	440b      	add	r3, r1
 800a824:	3318      	adds	r3, #24
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d026      	beq.n	800a87a <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a82c:	78fa      	ldrb	r2, [r7, #3]
 800a82e:	6879      	ldr	r1, [r7, #4]
 800a830:	4613      	mov	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	440b      	add	r3, r1
 800a83a:	3318      	adds	r3, #24
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	78fa      	ldrb	r2, [r7, #3]
 800a840:	68f9      	ldr	r1, [r7, #12]
 800a842:	0152      	lsls	r2, r2, #5
 800a844:	440a      	add	r2, r1
 800a846:	3238      	adds	r2, #56	; 0x38
 800a848:	6812      	ldr	r2, [r2, #0]
 800a84a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a84e:	fb02 f201 	mul.w	r2, r2, r1
 800a852:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a854:	2b00      	cmp	r3, #0
 800a856:	d110      	bne.n	800a87a <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a858:	78fa      	ldrb	r2, [r7, #3]
 800a85a:	6879      	ldr	r1, [r7, #4]
 800a85c:	4613      	mov	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4413      	add	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	440b      	add	r3, r1
 800a866:	3318      	adds	r3, #24
 800a868:	2200      	movs	r2, #0
 800a86a:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a86c:	78f9      	ldrb	r1, [r7, #3]
 800a86e:	2300      	movs	r3, #0
 800a870:	2200      	movs	r2, #0
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f004 fbe5 	bl	800f042 <USBD_LL_Transmit>
 800a878:	e00f      	b.n	800a89a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    hcdc->TxState = 0U;
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a896:	78fa      	ldrb	r2, [r7, #3]
 800a898:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	e015      	b.n	800a8f2 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a8c6:	78fb      	ldrb	r3, [r7, #3]
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f004 fbfb 	bl	800f0c6 <USBD_LL_GetRxDataSize>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a908:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d015      	beq.n	800a940 <USBD_CDC_EP0_RxReady+0x46>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a91a:	2bff      	cmp	r3, #255	; 0xff
 800a91c:	d010      	beq.n	800a940 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a92c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a934:	b292      	uxth	r2, r2
 800a936:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	22ff      	movs	r2, #255	; 0xff
 800a93c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
	...

0800a94c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2243      	movs	r2, #67	; 0x43
 800a958:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a95a:	4b03      	ldr	r3, [pc, #12]	; (800a968 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	200000bc 	.word	0x200000bc

0800a96c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2243      	movs	r2, #67	; 0x43
 800a978:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a97a:	4b03      	ldr	r3, [pc, #12]	; (800a988 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	20000078 	.word	0x20000078

0800a98c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2243      	movs	r2, #67	; 0x43
 800a998:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a99a:	4b03      	ldr	r3, [pc, #12]	; (800a9a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	20000100 	.word	0x20000100

0800a9ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	220a      	movs	r2, #10
 800a9b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a9ba:	4b03      	ldr	r3, [pc, #12]	; (800a9c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	20000034 	.word	0x20000034

0800a9cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d101      	bne.n	800a9e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e004      	b.n	800a9ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b087      	sub	sp, #28
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	60f8      	str	r0, [r7, #12]
 800a9fe:	60b9      	str	r1, [r7, #8]
 800aa00:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa08:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	371c      	adds	r7, #28
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa38:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	e016      	b.n	800aa9c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	7c1b      	ldrb	r3, [r3, #16]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d109      	bne.n	800aa8a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa80:	2101      	movs	r1, #1
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f004 fafe 	bl	800f084 <USBD_LL_PrepareReceive>
 800aa88:	e007      	b.n	800aa9a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa90:	2340      	movs	r3, #64	; 0x40
 800aa92:	2101      	movs	r1, #1
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f004 faf5 	bl	800f084 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	4613      	mov	r3, r2
 800aab0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800aab8:	481a      	ldr	r0, [pc, #104]	; (800ab24 <USBD_Init+0x80>)
 800aaba:	f004 fecb 	bl	800f854 <iprintf>
 800aabe:	481a      	ldr	r0, [pc, #104]	; (800ab28 <USBD_Init+0x84>)
 800aac0:	f004 fec8 	bl	800f854 <iprintf>
 800aac4:	200a      	movs	r0, #10
 800aac6:	f004 fedd 	bl	800f884 <putchar>
#endif
    return USBD_FAIL;
 800aaca:	2303      	movs	r3, #3
 800aacc:	e025      	b.n	800ab1a <USBD_Init+0x76>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <USBD_Init+0x4e>
  {
    pdev->pConfDesc = NULL;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d003      	beq.n	800ab00 <USBD_Init+0x5c>
  {
    pdev->pDesc = pdesc;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	79fa      	ldrb	r2, [r7, #7]
 800ab0c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f004 f952 	bl	800edb8 <USBD_LL_Init>
 800ab14:	4603      	mov	r3, r0
 800ab16:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ab18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3718      	adds	r7, #24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	08010950 	.word	0x08010950
 800ab28:	08010958 	.word	0x08010958

0800ab2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab36:	2300      	movs	r3, #0
 800ab38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10a      	bne.n	800ab56 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800ab40:	480f      	ldr	r0, [pc, #60]	; (800ab80 <USBD_RegisterClass+0x54>)
 800ab42:	f004 fe87 	bl	800f854 <iprintf>
 800ab46:	480f      	ldr	r0, [pc, #60]	; (800ab84 <USBD_RegisterClass+0x58>)
 800ab48:	f004 fe84 	bl	800f854 <iprintf>
 800ab4c:	200a      	movs	r0, #10
 800ab4e:	f004 fe99 	bl	800f884 <putchar>
#endif
    return USBD_FAIL;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e010      	b.n	800ab78 <USBD_RegisterClass+0x4c>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	683a      	ldr	r2, [r7, #0]
 800ab5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab66:	f107 020e 	add.w	r2, r7, #14
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	4798      	blx	r3
 800ab6e:	4602      	mov	r2, r0
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	08010950 	.word	0x08010950
 800ab84:	08010970 	.word	0x08010970

0800ab88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f004 f973 	bl	800ee7c <USBD_LL_Start>
 800ab96:	4603      	mov	r3, r0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b084      	sub	sp, #16
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	460b      	mov	r3, r1
 800abc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800abc2:	2303      	movs	r3, #3
 800abc4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d009      	beq.n	800abe4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	78fa      	ldrb	r2, [r7, #3]
 800abda:	4611      	mov	r1, r2
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	4798      	blx	r3
 800abe0:	4603      	mov	r3, r0
 800abe2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800abe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b082      	sub	sp, #8
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	460b      	mov	r3, r1
 800abf8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d007      	beq.n	800ac14 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	78fa      	ldrb	r2, [r7, #3]
 800ac0e:	4611      	mov	r1, r2
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	4798      	blx	r3
  }

  return USBD_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 ff15 	bl	800ba60 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ac44:	461a      	mov	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac52:	f003 031f 	and.w	r3, r3, #31
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d00e      	beq.n	800ac78 <USBD_LL_SetupStage+0x5a>
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d302      	bcc.n	800ac64 <USBD_LL_SetupStage+0x46>
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d014      	beq.n	800ac8c <USBD_LL_SetupStage+0x6e>
 800ac62:	e01d      	b.n	800aca0 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f9d7 	bl	800b020 <USBD_StdDevReq>
 800ac72:	4603      	mov	r3, r0
 800ac74:	73fb      	strb	r3, [r7, #15]
      break;
 800ac76:	e020      	b.n	800acba <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fa3b 	bl	800b0fc <USBD_StdItfReq>
 800ac86:	4603      	mov	r3, r0
 800ac88:	73fb      	strb	r3, [r7, #15]
      break;
 800ac8a:	e016      	b.n	800acba <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fa77 	bl	800b188 <USBD_StdEPReq>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac9e:	e00c      	b.n	800acba <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f004 f944 	bl	800ef3c <USBD_LL_StallEP>
 800acb4:	4603      	mov	r3, r0
 800acb6:	73fb      	strb	r3, [r7, #15]
      break;
 800acb8:	bf00      	nop
  }

  return ret;
 800acba:	7bfb      	ldrb	r3, [r7, #15]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	460b      	mov	r3, r1
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800acd2:	7afb      	ldrb	r3, [r7, #11]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d137      	bne.n	800ad48 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800acde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ace6:	2b03      	cmp	r3, #3
 800ace8:	d14a      	bne.n	800ad80 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	689a      	ldr	r2, [r3, #8]
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d913      	bls.n	800ad1e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	689a      	ldr	r2, [r3, #8]
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	1ad2      	subs	r2, r2, r3
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	68da      	ldr	r2, [r3, #12]
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	bf28      	it	cs
 800ad10:	4613      	movcs	r3, r2
 800ad12:	461a      	mov	r2, r3
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 ff96 	bl	800bc48 <USBD_CtlContinueRx>
 800ad1c:	e030      	b.n	800ad80 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00a      	beq.n	800ad40 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	d105      	bne.n	800ad40 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f000 ff92 	bl	800bc6a <USBD_CtlSendStatus>
 800ad46:	e01b      	b.n	800ad80 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d013      	beq.n	800ad7c <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d10e      	bne.n	800ad7c <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	7afa      	ldrb	r2, [r7, #11]
 800ad68:	4611      	mov	r1, r2
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	4798      	blx	r3
 800ad6e:	4603      	mov	r3, r0
 800ad70:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d003      	beq.n	800ad80 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800ad78:	7dfb      	ldrb	r3, [r7, #23]
 800ad7a:	e002      	b.n	800ad82 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	e000      	b.n	800ad82 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b086      	sub	sp, #24
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	60f8      	str	r0, [r7, #12]
 800ad92:	460b      	mov	r3, r1
 800ad94:	607a      	str	r2, [r7, #4]
 800ad96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad98:	7afb      	ldrb	r3, [r7, #11]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d16a      	bne.n	800ae74 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3314      	adds	r3, #20
 800ada2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d155      	bne.n	800ae5a <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	689a      	ldr	r2, [r3, #8]
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d914      	bls.n	800ade4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	689a      	ldr	r2, [r3, #8]
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	1ad2      	subs	r2, r2, r3
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	461a      	mov	r2, r3
 800adce:	6879      	ldr	r1, [r7, #4]
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f000 ff0b 	bl	800bbec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800add6:	2300      	movs	r3, #0
 800add8:	2200      	movs	r2, #0
 800adda:	2100      	movs	r1, #0
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f004 f951 	bl	800f084 <USBD_LL_PrepareReceive>
 800ade2:	e03a      	b.n	800ae5a <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	68da      	ldr	r2, [r3, #12]
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	429a      	cmp	r2, r3
 800adee:	d11c      	bne.n	800ae2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d316      	bcc.n	800ae2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d20f      	bcs.n	800ae2a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f000 feec 	bl	800bbec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	2200      	movs	r2, #0
 800ae20:	2100      	movs	r1, #0
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f004 f92e 	bl	800f084 <USBD_LL_PrepareReceive>
 800ae28:	e017      	b.n	800ae5a <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ae3c:	2b03      	cmp	r3, #3
 800ae3e:	d105      	bne.n	800ae4c <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae4c:	2180      	movs	r1, #128	; 0x80
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f004 f874 	bl	800ef3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f000 ff1b 	bl	800bc90 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d123      	bne.n	800aeac <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f7ff fe9b 	bl	800aba0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae72:	e01b      	b.n	800aeac <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d013      	beq.n	800aea8 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d10e      	bne.n	800aea8 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	7afa      	ldrb	r2, [r7, #11]
 800ae94:	4611      	mov	r1, r2
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	4798      	blx	r3
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d003      	beq.n	800aeac <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800aea4:	7dfb      	ldrb	r3, [r7, #23]
 800aea6:	e002      	b.n	800aeae <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e000      	b.n	800aeae <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3718      	adds	r7, #24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b082      	sub	sp, #8
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d009      	beq.n	800aefa <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	6852      	ldr	r2, [r2, #4]
 800aef2:	b2d2      	uxtb	r2, r2
 800aef4:	4611      	mov	r1, r2
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aefa:	2340      	movs	r3, #64	; 0x40
 800aefc:	2200      	movs	r2, #0
 800aefe:	2100      	movs	r1, #0
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f003 ffd6 	bl	800eeb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2240      	movs	r2, #64	; 0x40
 800af12:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af16:	2340      	movs	r3, #64	; 0x40
 800af18:	2200      	movs	r2, #0
 800af1a:	2180      	movs	r1, #128	; 0x80
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f003 ffc8 	bl	800eeb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2240      	movs	r2, #64	; 0x40
 800af2c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	460b      	mov	r3, r1
 800af42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	78fa      	ldrb	r2, [r7, #3]
 800af48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2204      	movs	r2, #4
 800af70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af82:	b480      	push	{r7}
 800af84:	b083      	sub	sp, #12
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af90:	2b04      	cmp	r3, #4
 800af92:	d105      	bne.n	800afa0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	370c      	adds	r7, #12
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b082      	sub	sp, #8
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afbc:	2b03      	cmp	r3, #3
 800afbe:	d10b      	bne.n	800afd8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc6:	69db      	ldr	r3, [r3, #28]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d005      	beq.n	800afd8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afd2:	69db      	ldr	r3, [r3, #28]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800afe2:	b480      	push	{r7}
 800afe4:	b087      	sub	sp, #28
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	3301      	adds	r3, #1
 800aff8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b000:	8a3b      	ldrh	r3, [r7, #16]
 800b002:	021b      	lsls	r3, r3, #8
 800b004:	b21a      	sxth	r2, r3
 800b006:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	b21b      	sxth	r3, r3
 800b00e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b010:	89fb      	ldrh	r3, [r7, #14]
}
 800b012:	4618      	mov	r0, r3
 800b014:	371c      	adds	r7, #28
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
	...

0800b020 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b036:	2b20      	cmp	r3, #32
 800b038:	d004      	beq.n	800b044 <USBD_StdDevReq+0x24>
 800b03a:	2b40      	cmp	r3, #64	; 0x40
 800b03c:	d002      	beq.n	800b044 <USBD_StdDevReq+0x24>
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00a      	beq.n	800b058 <USBD_StdDevReq+0x38>
 800b042:	e050      	b.n	800b0e6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	4798      	blx	r3
 800b052:	4603      	mov	r3, r0
 800b054:	73fb      	strb	r3, [r7, #15]
    break;
 800b056:	e04b      	b.n	800b0f0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	785b      	ldrb	r3, [r3, #1]
 800b05c:	2b09      	cmp	r3, #9
 800b05e:	d83c      	bhi.n	800b0da <USBD_StdDevReq+0xba>
 800b060:	a201      	add	r2, pc, #4	; (adr r2, 800b068 <USBD_StdDevReq+0x48>)
 800b062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b066:	bf00      	nop
 800b068:	0800b0bd 	.word	0x0800b0bd
 800b06c:	0800b0d1 	.word	0x0800b0d1
 800b070:	0800b0db 	.word	0x0800b0db
 800b074:	0800b0c7 	.word	0x0800b0c7
 800b078:	0800b0db 	.word	0x0800b0db
 800b07c:	0800b09b 	.word	0x0800b09b
 800b080:	0800b091 	.word	0x0800b091
 800b084:	0800b0db 	.word	0x0800b0db
 800b088:	0800b0b3 	.word	0x0800b0b3
 800b08c:	0800b0a5 	.word	0x0800b0a5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f9ce 	bl	800b434 <USBD_GetDescriptor>
      break;
 800b098:	e024      	b.n	800b0e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800b09a:	6839      	ldr	r1, [r7, #0]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 fb5d 	bl	800b75c <USBD_SetAddress>
      break;
 800b0a2:	e01f      	b.n	800b0e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fb9a 	bl	800b7e0 <USBD_SetConfig>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b0b0:	e018      	b.n	800b0e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fc37 	bl	800b928 <USBD_GetConfig>
      break;
 800b0ba:	e013      	b.n	800b0e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 fc66 	bl	800b990 <USBD_GetStatus>
      break;
 800b0c4:	e00e      	b.n	800b0e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 fc94 	bl	800b9f6 <USBD_SetFeature>
      break;
 800b0ce:	e009      	b.n	800b0e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fca3 	bl	800ba1e <USBD_ClrFeature>
      break;
 800b0d8:	e004      	b.n	800b0e4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fcf9 	bl	800bad4 <USBD_CtlError>
      break;
 800b0e2:	bf00      	nop
    }
    break;
 800b0e4:	e004      	b.n	800b0f0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fcf3 	bl	800bad4 <USBD_CtlError>
    break;
 800b0ee:	bf00      	nop
  }

  return ret;
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop

0800b0fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b106:	2300      	movs	r3, #0
 800b108:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b112:	2b20      	cmp	r3, #32
 800b114:	d003      	beq.n	800b11e <USBD_StdItfReq+0x22>
 800b116:	2b40      	cmp	r3, #64	; 0x40
 800b118:	d001      	beq.n	800b11e <USBD_StdItfReq+0x22>
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d12a      	bne.n	800b174 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b124:	3b01      	subs	r3, #1
 800b126:	2b02      	cmp	r3, #2
 800b128:	d81d      	bhi.n	800b166 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	889b      	ldrh	r3, [r3, #4]
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	2b01      	cmp	r3, #1
 800b132:	d813      	bhi.n	800b15c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	4798      	blx	r3
 800b142:	4603      	mov	r3, r0
 800b144:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	88db      	ldrh	r3, [r3, #6]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d110      	bne.n	800b170 <USBD_StdItfReq+0x74>
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10d      	bne.n	800b170 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fd88 	bl	800bc6a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b15a:	e009      	b.n	800b170 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fcb8 	bl	800bad4 <USBD_CtlError>
      break;
 800b164:	e004      	b.n	800b170 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 fcb3 	bl	800bad4 <USBD_CtlError>
      break;
 800b16e:	e000      	b.n	800b172 <USBD_StdItfReq+0x76>
      break;
 800b170:	bf00      	nop
    }
    break;
 800b172:	e004      	b.n	800b17e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fcac 	bl	800bad4 <USBD_CtlError>
    break;
 800b17c:	bf00      	nop
  }

  return ret;
 800b17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	889b      	ldrh	r3, [r3, #4]
 800b19a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1a4:	2b20      	cmp	r3, #32
 800b1a6:	d004      	beq.n	800b1b2 <USBD_StdEPReq+0x2a>
 800b1a8:	2b40      	cmp	r3, #64	; 0x40
 800b1aa:	d002      	beq.n	800b1b2 <USBD_StdEPReq+0x2a>
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00a      	beq.n	800b1c6 <USBD_StdEPReq+0x3e>
 800b1b0:	e135      	b.n	800b41e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	4798      	blx	r3
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1c4:	e130      	b.n	800b428 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	785b      	ldrb	r3, [r3, #1]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d03e      	beq.n	800b24c <USBD_StdEPReq+0xc4>
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	d002      	beq.n	800b1d8 <USBD_StdEPReq+0x50>
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d077      	beq.n	800b2c6 <USBD_StdEPReq+0x13e>
 800b1d6:	e11c      	b.n	800b412 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d002      	beq.n	800b1e8 <USBD_StdEPReq+0x60>
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	d015      	beq.n	800b212 <USBD_StdEPReq+0x8a>
 800b1e6:	e02b      	b.n	800b240 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1e8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00c      	beq.n	800b208 <USBD_StdEPReq+0x80>
 800b1ee:	7bbb      	ldrb	r3, [r7, #14]
 800b1f0:	2b80      	cmp	r3, #128	; 0x80
 800b1f2:	d009      	beq.n	800b208 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1f4:	7bbb      	ldrb	r3, [r7, #14]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f003 fe9f 	bl	800ef3c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1fe:	2180      	movs	r1, #128	; 0x80
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f003 fe9b 	bl	800ef3c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b206:	e020      	b.n	800b24a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fc62 	bl	800bad4 <USBD_CtlError>
        break;
 800b210:	e01b      	b.n	800b24a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	885b      	ldrh	r3, [r3, #2]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10e      	bne.n	800b238 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b21a:	7bbb      	ldrb	r3, [r7, #14]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00b      	beq.n	800b238 <USBD_StdEPReq+0xb0>
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	2b80      	cmp	r3, #128	; 0x80
 800b224:	d008      	beq.n	800b238 <USBD_StdEPReq+0xb0>
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	88db      	ldrh	r3, [r3, #6]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d104      	bne.n	800b238 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b22e:	7bbb      	ldrb	r3, [r7, #14]
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f003 fe82 	bl	800ef3c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fd16 	bl	800bc6a <USBD_CtlSendStatus>

        break;
 800b23e:	e004      	b.n	800b24a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fc46 	bl	800bad4 <USBD_CtlError>
        break;
 800b248:	bf00      	nop
      }
      break;
 800b24a:	e0e7      	b.n	800b41c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b252:	2b02      	cmp	r3, #2
 800b254:	d002      	beq.n	800b25c <USBD_StdEPReq+0xd4>
 800b256:	2b03      	cmp	r3, #3
 800b258:	d015      	beq.n	800b286 <USBD_StdEPReq+0xfe>
 800b25a:	e02d      	b.n	800b2b8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b25c:	7bbb      	ldrb	r3, [r7, #14]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00c      	beq.n	800b27c <USBD_StdEPReq+0xf4>
 800b262:	7bbb      	ldrb	r3, [r7, #14]
 800b264:	2b80      	cmp	r3, #128	; 0x80
 800b266:	d009      	beq.n	800b27c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b268:	7bbb      	ldrb	r3, [r7, #14]
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f003 fe65 	bl	800ef3c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b272:	2180      	movs	r1, #128	; 0x80
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f003 fe61 	bl	800ef3c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b27a:	e023      	b.n	800b2c4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fc28 	bl	800bad4 <USBD_CtlError>
        break;
 800b284:	e01e      	b.n	800b2c4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	885b      	ldrh	r3, [r3, #2]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d119      	bne.n	800b2c2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b28e:	7bbb      	ldrb	r3, [r7, #14]
 800b290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b294:	2b00      	cmp	r3, #0
 800b296:	d004      	beq.n	800b2a2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b298:	7bbb      	ldrb	r3, [r7, #14]
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f003 fe6c 	bl	800ef7a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fce1 	bl	800bc6a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	4798      	blx	r3
        }
        break;
 800b2b6:	e004      	b.n	800b2c2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fc0a 	bl	800bad4 <USBD_CtlError>
        break;
 800b2c0:	e000      	b.n	800b2c4 <USBD_StdEPReq+0x13c>
        break;
 800b2c2:	bf00      	nop
      }
      break;
 800b2c4:	e0aa      	b.n	800b41c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d002      	beq.n	800b2d6 <USBD_StdEPReq+0x14e>
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d032      	beq.n	800b33a <USBD_StdEPReq+0x1b2>
 800b2d4:	e097      	b.n	800b406 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d007      	beq.n	800b2ec <USBD_StdEPReq+0x164>
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	2b80      	cmp	r3, #128	; 0x80
 800b2e0:	d004      	beq.n	800b2ec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fbf5 	bl	800bad4 <USBD_CtlError>
          break;
 800b2ea:	e091      	b.n	800b410 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	da0b      	bge.n	800b30c <USBD_StdEPReq+0x184>
 800b2f4:	7bbb      	ldrb	r3, [r7, #14]
 800b2f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	4413      	add	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	3310      	adds	r3, #16
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	4413      	add	r3, r2
 800b308:	3304      	adds	r3, #4
 800b30a:	e00b      	b.n	800b324 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b30c:	7bbb      	ldrb	r3, [r7, #14]
 800b30e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b312:	4613      	mov	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	4413      	add	r3, r2
 800b322:	3304      	adds	r3, #4
 800b324:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	2200      	movs	r2, #0
 800b32a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	2202      	movs	r2, #2
 800b330:	4619      	mov	r1, r3
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fc3f 	bl	800bbb6 <USBD_CtlSendData>
        break;
 800b338:	e06a      	b.n	800b410 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b33a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	da11      	bge.n	800b366 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b342:	7bbb      	ldrb	r3, [r7, #14]
 800b344:	f003 020f 	and.w	r2, r3, #15
 800b348:	6879      	ldr	r1, [r7, #4]
 800b34a:	4613      	mov	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4413      	add	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	440b      	add	r3, r1
 800b354:	3324      	adds	r3, #36	; 0x24
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d117      	bne.n	800b38c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fbb8 	bl	800bad4 <USBD_CtlError>
            break;
 800b364:	e054      	b.n	800b410 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b366:	7bbb      	ldrb	r3, [r7, #14]
 800b368:	f003 020f 	and.w	r2, r3, #15
 800b36c:	6879      	ldr	r1, [r7, #4]
 800b36e:	4613      	mov	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4413      	add	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	440b      	add	r3, r1
 800b378:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b37c:	881b      	ldrh	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d104      	bne.n	800b38c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fba5 	bl	800bad4 <USBD_CtlError>
            break;
 800b38a:	e041      	b.n	800b410 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b38c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b390:	2b00      	cmp	r3, #0
 800b392:	da0b      	bge.n	800b3ac <USBD_StdEPReq+0x224>
 800b394:	7bbb      	ldrb	r3, [r7, #14]
 800b396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b39a:	4613      	mov	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4413      	add	r3, r2
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	3310      	adds	r3, #16
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	e00b      	b.n	800b3c4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b3ac:	7bbb      	ldrb	r3, [r7, #14]
 800b3ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	3304      	adds	r3, #4
 800b3c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <USBD_StdEPReq+0x24a>
 800b3cc:	7bbb      	ldrb	r3, [r7, #14]
 800b3ce:	2b80      	cmp	r3, #128	; 0x80
 800b3d0:	d103      	bne.n	800b3da <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	601a      	str	r2, [r3, #0]
 800b3d8:	e00e      	b.n	800b3f8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b3da:	7bbb      	ldrb	r3, [r7, #14]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f003 fdea 	bl	800efb8 <USBD_LL_IsStallEP>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d003      	beq.n	800b3f2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	e002      	b.n	800b3f8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2202      	movs	r2, #2
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fbd9 	bl	800bbb6 <USBD_CtlSendData>
          break;
 800b404:	e004      	b.n	800b410 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fb63 	bl	800bad4 <USBD_CtlError>
        break;
 800b40e:	bf00      	nop
      }
      break;
 800b410:	e004      	b.n	800b41c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800b412:	6839      	ldr	r1, [r7, #0]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fb5d 	bl	800bad4 <USBD_CtlError>
      break;
 800b41a:	bf00      	nop
    }
    break;
 800b41c:	e004      	b.n	800b428 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fb57 	bl	800bad4 <USBD_CtlError>
    break;
 800b426:	bf00      	nop
  }

  return ret;
 800b428:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
	...

0800b434 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b43e:	2300      	movs	r3, #0
 800b440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b442:	2300      	movs	r3, #0
 800b444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b446:	2300      	movs	r3, #0
 800b448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	885b      	ldrh	r3, [r3, #2]
 800b44e:	0a1b      	lsrs	r3, r3, #8
 800b450:	b29b      	uxth	r3, r3
 800b452:	3b01      	subs	r3, #1
 800b454:	2b0e      	cmp	r3, #14
 800b456:	f200 8152 	bhi.w	800b6fe <USBD_GetDescriptor+0x2ca>
 800b45a:	a201      	add	r2, pc, #4	; (adr r2, 800b460 <USBD_GetDescriptor+0x2c>)
 800b45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b460:	0800b4d1 	.word	0x0800b4d1
 800b464:	0800b4e9 	.word	0x0800b4e9
 800b468:	0800b529 	.word	0x0800b529
 800b46c:	0800b6ff 	.word	0x0800b6ff
 800b470:	0800b6ff 	.word	0x0800b6ff
 800b474:	0800b69f 	.word	0x0800b69f
 800b478:	0800b6cb 	.word	0x0800b6cb
 800b47c:	0800b6ff 	.word	0x0800b6ff
 800b480:	0800b6ff 	.word	0x0800b6ff
 800b484:	0800b6ff 	.word	0x0800b6ff
 800b488:	0800b6ff 	.word	0x0800b6ff
 800b48c:	0800b6ff 	.word	0x0800b6ff
 800b490:	0800b6ff 	.word	0x0800b6ff
 800b494:	0800b6ff 	.word	0x0800b6ff
 800b498:	0800b49d 	.word	0x0800b49d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4a2:	69db      	ldr	r3, [r3, #28]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00b      	beq.n	800b4c0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ae:	69db      	ldr	r3, [r3, #28]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	7c12      	ldrb	r2, [r2, #16]
 800b4b4:	f107 0108 	add.w	r1, r7, #8
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	4798      	blx	r3
 800b4bc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b4be:	e126      	b.n	800b70e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fb06 	bl	800bad4 <USBD_CtlError>
      err++;
 800b4c8:	7afb      	ldrb	r3, [r7, #11]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	72fb      	strb	r3, [r7, #11]
    break;
 800b4ce:	e11e      	b.n	800b70e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	7c12      	ldrb	r2, [r2, #16]
 800b4dc:	f107 0108 	add.w	r1, r7, #8
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	4798      	blx	r3
 800b4e4:	60f8      	str	r0, [r7, #12]
    break;
 800b4e6:	e112      	b.n	800b70e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	7c1b      	ldrb	r3, [r3, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10d      	bne.n	800b50c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f8:	f107 0208 	add.w	r2, r7, #8
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	4798      	blx	r3
 800b500:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3301      	adds	r3, #1
 800b506:	2202      	movs	r2, #2
 800b508:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b50a:	e100      	b.n	800b70e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b514:	f107 0208 	add.w	r2, r7, #8
 800b518:	4610      	mov	r0, r2
 800b51a:	4798      	blx	r3
 800b51c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	3301      	adds	r3, #1
 800b522:	2202      	movs	r2, #2
 800b524:	701a      	strb	r2, [r3, #0]
    break;
 800b526:	e0f2      	b.n	800b70e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	885b      	ldrh	r3, [r3, #2]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	2b05      	cmp	r3, #5
 800b530:	f200 80ac 	bhi.w	800b68c <USBD_GetDescriptor+0x258>
 800b534:	a201      	add	r2, pc, #4	; (adr r2, 800b53c <USBD_GetDescriptor+0x108>)
 800b536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53a:	bf00      	nop
 800b53c:	0800b555 	.word	0x0800b555
 800b540:	0800b589 	.word	0x0800b589
 800b544:	0800b5bd 	.word	0x0800b5bd
 800b548:	0800b5f1 	.word	0x0800b5f1
 800b54c:	0800b625 	.word	0x0800b625
 800b550:	0800b659 	.word	0x0800b659
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00b      	beq.n	800b578 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	7c12      	ldrb	r2, [r2, #16]
 800b56c:	f107 0108 	add.w	r1, r7, #8
 800b570:	4610      	mov	r0, r2
 800b572:	4798      	blx	r3
 800b574:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b576:	e091      	b.n	800b69c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 faaa 	bl	800bad4 <USBD_CtlError>
        err++;
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	3301      	adds	r3, #1
 800b584:	72fb      	strb	r3, [r7, #11]
      break;
 800b586:	e089      	b.n	800b69c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	7c12      	ldrb	r2, [r2, #16]
 800b5a0:	f107 0108 	add.w	r1, r7, #8
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	4798      	blx	r3
 800b5a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5aa:	e077      	b.n	800b69c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa90 	bl	800bad4 <USBD_CtlError>
        err++;
 800b5b4:	7afb      	ldrb	r3, [r7, #11]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	72fb      	strb	r3, [r7, #11]
      break;
 800b5ba:	e06f      	b.n	800b69c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00b      	beq.n	800b5e0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	7c12      	ldrb	r2, [r2, #16]
 800b5d4:	f107 0108 	add.w	r1, r7, #8
 800b5d8:	4610      	mov	r0, r2
 800b5da:	4798      	blx	r3
 800b5dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5de:	e05d      	b.n	800b69c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa76 	bl	800bad4 <USBD_CtlError>
        err++;
 800b5e8:	7afb      	ldrb	r3, [r7, #11]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	72fb      	strb	r3, [r7, #11]
      break;
 800b5ee:	e055      	b.n	800b69c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00b      	beq.n	800b614 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	7c12      	ldrb	r2, [r2, #16]
 800b608:	f107 0108 	add.w	r1, r7, #8
 800b60c:	4610      	mov	r0, r2
 800b60e:	4798      	blx	r3
 800b610:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b612:	e043      	b.n	800b69c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fa5c 	bl	800bad4 <USBD_CtlError>
        err++;
 800b61c:	7afb      	ldrb	r3, [r7, #11]
 800b61e:	3301      	adds	r3, #1
 800b620:	72fb      	strb	r3, [r7, #11]
      break;
 800b622:	e03b      	b.n	800b69c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00b      	beq.n	800b648 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b636:	695b      	ldr	r3, [r3, #20]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	7c12      	ldrb	r2, [r2, #16]
 800b63c:	f107 0108 	add.w	r1, r7, #8
 800b640:	4610      	mov	r0, r2
 800b642:	4798      	blx	r3
 800b644:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b646:	e029      	b.n	800b69c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fa42 	bl	800bad4 <USBD_CtlError>
        err++;
 800b650:	7afb      	ldrb	r3, [r7, #11]
 800b652:	3301      	adds	r3, #1
 800b654:	72fb      	strb	r3, [r7, #11]
      break;
 800b656:	e021      	b.n	800b69c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00b      	beq.n	800b67c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b66a:	699b      	ldr	r3, [r3, #24]
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	7c12      	ldrb	r2, [r2, #16]
 800b670:	f107 0108 	add.w	r1, r7, #8
 800b674:	4610      	mov	r0, r2
 800b676:	4798      	blx	r3
 800b678:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b67a:	e00f      	b.n	800b69c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fa28 	bl	800bad4 <USBD_CtlError>
        err++;
 800b684:	7afb      	ldrb	r3, [r7, #11]
 800b686:	3301      	adds	r3, #1
 800b688:	72fb      	strb	r3, [r7, #11]
      break;
 800b68a:	e007      	b.n	800b69c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fa20 	bl	800bad4 <USBD_CtlError>
      err++;
 800b694:	7afb      	ldrb	r3, [r7, #11]
 800b696:	3301      	adds	r3, #1
 800b698:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b69a:	bf00      	nop
    }
    break;
 800b69c:	e037      	b.n	800b70e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	7c1b      	ldrb	r3, [r3, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d109      	bne.n	800b6ba <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ae:	f107 0208 	add.w	r2, r7, #8
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	4798      	blx	r3
 800b6b6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b6b8:	e029      	b.n	800b70e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fa09 	bl	800bad4 <USBD_CtlError>
      err++;
 800b6c2:	7afb      	ldrb	r3, [r7, #11]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	72fb      	strb	r3, [r7, #11]
    break;
 800b6c8:	e021      	b.n	800b70e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	7c1b      	ldrb	r3, [r3, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10d      	bne.n	800b6ee <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6da:	f107 0208 	add.w	r2, r7, #8
 800b6de:	4610      	mov	r0, r2
 800b6e0:	4798      	blx	r3
 800b6e2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	2207      	movs	r2, #7
 800b6ea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b6ec:	e00f      	b.n	800b70e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f9ef 	bl	800bad4 <USBD_CtlError>
      err++;
 800b6f6:	7afb      	ldrb	r3, [r7, #11]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	72fb      	strb	r3, [r7, #11]
    break;
 800b6fc:	e007      	b.n	800b70e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f9e7 	bl	800bad4 <USBD_CtlError>
    err++;
 800b706:	7afb      	ldrb	r3, [r7, #11]
 800b708:	3301      	adds	r3, #1
 800b70a:	72fb      	strb	r3, [r7, #11]
    break;
 800b70c:	bf00      	nop
  }

  if (err != 0U)
 800b70e:	7afb      	ldrb	r3, [r7, #11]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d11e      	bne.n	800b752 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	88db      	ldrh	r3, [r3, #6]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d016      	beq.n	800b74a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800b71c:	893b      	ldrh	r3, [r7, #8]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00e      	beq.n	800b740 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	88da      	ldrh	r2, [r3, #6]
 800b726:	893b      	ldrh	r3, [r7, #8]
 800b728:	4293      	cmp	r3, r2
 800b72a:	bf28      	it	cs
 800b72c:	4613      	movcs	r3, r2
 800b72e:	b29b      	uxth	r3, r3
 800b730:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b732:	893b      	ldrh	r3, [r7, #8]
 800b734:	461a      	mov	r2, r3
 800b736:	68f9      	ldr	r1, [r7, #12]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fa3c 	bl	800bbb6 <USBD_CtlSendData>
 800b73e:	e009      	b.n	800b754 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f9c6 	bl	800bad4 <USBD_CtlError>
 800b748:	e004      	b.n	800b754 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fa8d 	bl	800bc6a <USBD_CtlSendStatus>
 800b750:	e000      	b.n	800b754 <USBD_GetDescriptor+0x320>
    return;
 800b752:	bf00      	nop
    }
  }
}
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop

0800b75c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	889b      	ldrh	r3, [r3, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d130      	bne.n	800b7d0 <USBD_SetAddress+0x74>
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	88db      	ldrh	r3, [r3, #6]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d12c      	bne.n	800b7d0 <USBD_SetAddress+0x74>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	885b      	ldrh	r3, [r3, #2]
 800b77a:	2b7f      	cmp	r3, #127	; 0x7f
 800b77c:	d828      	bhi.n	800b7d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	885b      	ldrh	r3, [r3, #2]
 800b782:	b2db      	uxtb	r3, r3
 800b784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b788:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b790:	2b03      	cmp	r3, #3
 800b792:	d104      	bne.n	800b79e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f99c 	bl	800bad4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b79c:	e01c      	b.n	800b7d8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	7bfa      	ldrb	r2, [r7, #15]
 800b7a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b7a6:	7bfb      	ldrb	r3, [r7, #15]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f003 fc2a 	bl	800f004 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fa5a 	bl	800bc6a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d004      	beq.n	800b7c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7c4:	e008      	b.n	800b7d8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ce:	e003      	b.n	800b7d8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f97e 	bl	800bad4 <USBD_CtlError>
  }
}
 800b7d8:	bf00      	nop
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	885b      	ldrh	r3, [r3, #2]
 800b7f2:	b2da      	uxtb	r2, r3
 800b7f4:	4b4b      	ldr	r3, [pc, #300]	; (800b924 <USBD_SetConfig+0x144>)
 800b7f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7f8:	4b4a      	ldr	r3, [pc, #296]	; (800b924 <USBD_SetConfig+0x144>)
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d905      	bls.n	800b80c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b800:	6839      	ldr	r1, [r7, #0]
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 f966 	bl	800bad4 <USBD_CtlError>
    return USBD_FAIL;
 800b808:	2303      	movs	r3, #3
 800b80a:	e087      	b.n	800b91c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b812:	2b02      	cmp	r3, #2
 800b814:	d002      	beq.n	800b81c <USBD_SetConfig+0x3c>
 800b816:	2b03      	cmp	r3, #3
 800b818:	d025      	beq.n	800b866 <USBD_SetConfig+0x86>
 800b81a:	e071      	b.n	800b900 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b81c:	4b41      	ldr	r3, [pc, #260]	; (800b924 <USBD_SetConfig+0x144>)
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d01c      	beq.n	800b85e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b824:	4b3f      	ldr	r3, [pc, #252]	; (800b924 <USBD_SetConfig+0x144>)
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	461a      	mov	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b82e:	4b3d      	ldr	r3, [pc, #244]	; (800b924 <USBD_SetConfig+0x144>)
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7ff f9be 	bl	800abb6 <USBD_SetClassConfig>
 800b83a:	4603      	mov	r3, r0
 800b83c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b83e:	7bfb      	ldrb	r3, [r7, #15]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d004      	beq.n	800b84e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b844:	6839      	ldr	r1, [r7, #0]
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 f944 	bl	800bad4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b84c:	e065      	b.n	800b91a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fa0b 	bl	800bc6a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2203      	movs	r2, #3
 800b858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b85c:	e05d      	b.n	800b91a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 fa03 	bl	800bc6a <USBD_CtlSendStatus>
    break;
 800b864:	e059      	b.n	800b91a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b866:	4b2f      	ldr	r3, [pc, #188]	; (800b924 <USBD_SetConfig+0x144>)
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d112      	bne.n	800b894 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2202      	movs	r2, #2
 800b872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b876:	4b2b      	ldr	r3, [pc, #172]	; (800b924 <USBD_SetConfig+0x144>)
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	461a      	mov	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b880:	4b28      	ldr	r3, [pc, #160]	; (800b924 <USBD_SetConfig+0x144>)
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7ff f9b1 	bl	800abee <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f9ec 	bl	800bc6a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b892:	e042      	b.n	800b91a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b894:	4b23      	ldr	r3, [pc, #140]	; (800b924 <USBD_SetConfig+0x144>)
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	461a      	mov	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d02a      	beq.n	800b8f8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff f99f 	bl	800abee <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b8b0:	4b1c      	ldr	r3, [pc, #112]	; (800b924 <USBD_SetConfig+0x144>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8ba:	4b1a      	ldr	r3, [pc, #104]	; (800b924 <USBD_SetConfig+0x144>)
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7ff f978 	bl	800abb6 <USBD_SetClassConfig>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00f      	beq.n	800b8f0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f8fe 	bl	800bad4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f7ff f984 	bl	800abee <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b8ee:	e014      	b.n	800b91a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f9ba 	bl	800bc6a <USBD_CtlSendStatus>
    break;
 800b8f6:	e010      	b.n	800b91a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f9b6 	bl	800bc6a <USBD_CtlSendStatus>
    break;
 800b8fe:	e00c      	b.n	800b91a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f8e6 	bl	800bad4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b908:	4b06      	ldr	r3, [pc, #24]	; (800b924 <USBD_SetConfig+0x144>)
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	4619      	mov	r1, r3
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7ff f96d 	bl	800abee <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b914:	2303      	movs	r3, #3
 800b916:	73fb      	strb	r3, [r7, #15]
    break;
 800b918:	bf00      	nop
  }

  return ret;
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	2000048c 	.word	0x2000048c

0800b928 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	88db      	ldrh	r3, [r3, #6]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d004      	beq.n	800b944 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f8c9 	bl	800bad4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b942:	e021      	b.n	800b988 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	db17      	blt.n	800b97e <USBD_GetConfig+0x56>
 800b94e:	2b02      	cmp	r3, #2
 800b950:	dd02      	ble.n	800b958 <USBD_GetConfig+0x30>
 800b952:	2b03      	cmp	r3, #3
 800b954:	d00b      	beq.n	800b96e <USBD_GetConfig+0x46>
 800b956:	e012      	b.n	800b97e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3308      	adds	r3, #8
 800b962:	2201      	movs	r2, #1
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f925 	bl	800bbb6 <USBD_CtlSendData>
      break;
 800b96c:	e00c      	b.n	800b988 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	3304      	adds	r3, #4
 800b972:	2201      	movs	r2, #1
 800b974:	4619      	mov	r1, r3
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f91d 	bl	800bbb6 <USBD_CtlSendData>
      break;
 800b97c:	e004      	b.n	800b988 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 f8a7 	bl	800bad4 <USBD_CtlError>
      break;
 800b986:	bf00      	nop
}
 800b988:	bf00      	nop
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d81e      	bhi.n	800b9e4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	88db      	ldrh	r3, [r3, #6]
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d004      	beq.n	800b9b8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f88f 	bl	800bad4 <USBD_CtlError>
      break;
 800b9b6:	e01a      	b.n	800b9ee <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d005      	beq.n	800b9d4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	f043 0202 	orr.w	r2, r3, #2
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	330c      	adds	r3, #12
 800b9d8:	2202      	movs	r2, #2
 800b9da:	4619      	mov	r1, r3
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 f8ea 	bl	800bbb6 <USBD_CtlSendData>
    break;
 800b9e2:	e004      	b.n	800b9ee <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b9e4:	6839      	ldr	r1, [r7, #0]
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 f874 	bl	800bad4 <USBD_CtlError>
    break;
 800b9ec:	bf00      	nop
  }
}
 800b9ee:	bf00      	nop
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b082      	sub	sp, #8
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	885b      	ldrh	r3, [r3, #2]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d106      	bne.n	800ba16 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 f92a 	bl	800bc6a <USBD_CtlSendStatus>
  }
}
 800ba16:	bf00      	nop
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	d80b      	bhi.n	800ba4c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	885b      	ldrh	r3, [r3, #2]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d10c      	bne.n	800ba56 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f910 	bl	800bc6a <USBD_CtlSendStatus>
      }
      break;
 800ba4a:	e004      	b.n	800ba56 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f840 	bl	800bad4 <USBD_CtlError>
      break;
 800ba54:	e000      	b.n	800ba58 <USBD_ClrFeature+0x3a>
      break;
 800ba56:	bf00      	nop
  }
}
 800ba58:	bf00      	nop
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	781a      	ldrb	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	781a      	ldrb	r2, [r3, #0]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	3301      	adds	r3, #1
 800ba88:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	f7ff faa9 	bl	800afe2 <SWAPBYTE>
 800ba90:	4603      	mov	r3, r0
 800ba92:	461a      	mov	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	3301      	adds	r3, #1
 800baa2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f7ff fa9c 	bl	800afe2 <SWAPBYTE>
 800baaa:	4603      	mov	r3, r0
 800baac:	461a      	mov	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	3301      	adds	r3, #1
 800bab6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	3301      	adds	r3, #1
 800babc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f7ff fa8f 	bl	800afe2 <SWAPBYTE>
 800bac4:	4603      	mov	r3, r0
 800bac6:	461a      	mov	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	80da      	strh	r2, [r3, #6]
}
 800bacc:	bf00      	nop
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bade:	2180      	movs	r1, #128	; 0x80
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f003 fa2b 	bl	800ef3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bae6:	2100      	movs	r1, #0
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f003 fa27 	bl	800ef3c <USBD_LL_StallEP>
}
 800baee:	bf00      	nop
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b086      	sub	sp, #24
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	60f8      	str	r0, [r7, #12]
 800bafe:	60b9      	str	r1, [r7, #8]
 800bb00:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb02:	2300      	movs	r3, #0
 800bb04:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d036      	beq.n	800bb7a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb10:	6938      	ldr	r0, [r7, #16]
 800bb12:	f000 f836 	bl	800bb82 <USBD_GetLen>
 800bb16:	4603      	mov	r3, r0
 800bb18:	3301      	adds	r3, #1
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bb24:	7dfb      	ldrb	r3, [r7, #23]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	4413      	add	r3, r2
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	7812      	ldrb	r2, [r2, #0]
 800bb2e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb30:	7dfb      	ldrb	r3, [r7, #23]
 800bb32:	3301      	adds	r3, #1
 800bb34:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb36:	7dfb      	ldrb	r3, [r7, #23]
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	2203      	movs	r2, #3
 800bb3e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
 800bb42:	3301      	adds	r3, #1
 800bb44:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb46:	e013      	b.n	800bb70 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb48:	7dfb      	ldrb	r3, [r7, #23]
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	693a      	ldr	r2, [r7, #16]
 800bb50:	7812      	ldrb	r2, [r2, #0]
 800bb52:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	3301      	adds	r3, #1
 800bb58:	613b      	str	r3, [r7, #16]
    idx++;
 800bb5a:	7dfb      	ldrb	r3, [r7, #23]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	4413      	add	r3, r2
 800bb66:	2200      	movs	r2, #0
 800bb68:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb6a:	7dfb      	ldrb	r3, [r7, #23]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e7      	bne.n	800bb48 <USBD_GetString+0x52>
 800bb78:	e000      	b.n	800bb7c <USBD_GetString+0x86>
    return;
 800bb7a:	bf00      	nop
  }
}
 800bb7c:	3718      	adds	r7, #24
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb82:	b480      	push	{r7}
 800bb84:	b085      	sub	sp, #20
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb92:	e005      	b.n	800bba0 <USBD_GetLen+0x1e>
  {
    len++;
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
 800bb96:	3301      	adds	r3, #1
 800bb98:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1f5      	bne.n	800bb94 <USBD_GetLen+0x12>
  }

  return len;
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b084      	sub	sp, #16
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	60f8      	str	r0, [r7, #12]
 800bbbe:	60b9      	str	r1, [r7, #8]
 800bbc0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2202      	movs	r2, #2
 800bbc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	2100      	movs	r1, #0
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f003 fa30 	bl	800f042 <USBD_LL_Transmit>

  return USBD_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f003 fa1f 	bl	800f042 <USBD_LL_Transmit>

  return USBD_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	60f8      	str	r0, [r7, #12]
 800bc16:	60b9      	str	r1, [r7, #8]
 800bc18:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2203      	movs	r2, #3
 800bc1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	68ba      	ldr	r2, [r7, #8]
 800bc36:	2100      	movs	r1, #0
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f003 fa23 	bl	800f084 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	2100      	movs	r1, #0
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f003 fa12 	bl	800f084 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b082      	sub	sp, #8
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2204      	movs	r2, #4
 800bc76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2100      	movs	r1, #0
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f003 f9de 	bl	800f042 <USBD_LL_Transmit>

  return USBD_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2205      	movs	r2, #5
 800bc9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bca0:	2300      	movs	r3, #0
 800bca2:	2200      	movs	r2, #0
 800bca4:	2100      	movs	r1, #0
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f003 f9ec 	bl	800f084 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b088      	sub	sp, #32
 800bcba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bcc0:	f107 0308 	add.w	r3, r7, #8
 800bcc4:	2218      	movs	r2, #24
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f000 ff45 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800bcce:	233f      	movs	r3, #63	; 0x3f
 800bcd0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800bcd2:	2381      	movs	r3, #129	; 0x81
 800bcd4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800bcd6:	1dfb      	adds	r3, r7, #7
 800bcd8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bcde:	f107 0308 	add.w	r3, r7, #8
 800bce2:	2100      	movs	r1, #0
 800bce4:	4618      	mov	r0, r3
 800bce6:	f001 fa11 	bl	800d10c <hci_send_req>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	da01      	bge.n	800bcf4 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800bcf0:	23ff      	movs	r3, #255	; 0xff
 800bcf2:	e000      	b.n	800bcf6 <aci_gap_set_non_discoverable+0x40>
  return status;
 800bcf4:	79fb      	ldrb	r3, [r7, #7]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3720      	adds	r7, #32
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800bcfe:	b5b0      	push	{r4, r5, r7, lr}
 800bd00:	b0ce      	sub	sp, #312	; 0x138
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	4605      	mov	r5, r0
 800bd06:	460c      	mov	r4, r1
 800bd08:	4610      	mov	r0, r2
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	1dfb      	adds	r3, r7, #7
 800bd0e:	462a      	mov	r2, r5
 800bd10:	701a      	strb	r2, [r3, #0]
 800bd12:	1d3b      	adds	r3, r7, #4
 800bd14:	4622      	mov	r2, r4
 800bd16:	801a      	strh	r2, [r3, #0]
 800bd18:	1cbb      	adds	r3, r7, #2
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	801a      	strh	r2, [r3, #0]
 800bd1e:	1dbb      	adds	r3, r7, #6
 800bd20:	460a      	mov	r2, r1
 800bd22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800bd24:	f107 0310 	add.w	r3, r7, #16
 800bd28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800bd2c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800bd30:	3308      	adds	r3, #8
 800bd32:	f107 0210 	add.w	r2, r7, #16
 800bd36:	4413      	add	r3, r2
 800bd38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800bd3c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800bd40:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800bd44:	4413      	add	r3, r2
 800bd46:	3309      	adds	r3, #9
 800bd48:	f107 0210 	add.w	r2, r7, #16
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bd52:	f107 030f 	add.w	r3, r7, #15
 800bd56:	2200      	movs	r2, #0
 800bd58:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800bd60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bd64:	1dfa      	adds	r2, r7, #7
 800bd66:	7812      	ldrb	r2, [r2, #0]
 800bd68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bd6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd6e:	3301      	adds	r3, #1
 800bd70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800bd74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bd78:	1d3a      	adds	r2, r7, #4
 800bd7a:	8812      	ldrh	r2, [r2, #0]
 800bd7c:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800bd80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd84:	3302      	adds	r3, #2
 800bd86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800bd8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bd8e:	1cba      	adds	r2, r7, #2
 800bd90:	8812      	ldrh	r2, [r2, #0]
 800bd92:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800bd96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd9a:	3302      	adds	r3, #2
 800bd9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800bda0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bda4:	1dba      	adds	r2, r7, #6
 800bda6:	7812      	ldrb	r2, [r2, #0]
 800bda8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800bdaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bdae:	3301      	adds	r3, #1
 800bdb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800bdb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bdb8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800bdbc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800bdbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800bdc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bdcc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800bdd0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800bdd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800bddc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bde0:	3308      	adds	r3, #8
 800bde2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800bde6:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800bdea:	4618      	mov	r0, r3
 800bdec:	f000 fea4 	bl	800cb38 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800bdf0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800bdf4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bdf8:	4413      	add	r3, r2
 800bdfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800bdfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be02:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800be06:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800be08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be0c:	3301      	adds	r3, #1
 800be0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800be12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be16:	3301      	adds	r3, #1
 800be18:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800be1c:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800be20:	4618      	mov	r0, r3
 800be22:	f000 fe89 	bl	800cb38 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800be26:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800be2a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800be2e:	4413      	add	r3, r2
 800be30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800be34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be38:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800be3c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800be3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be42:	3302      	adds	r3, #2
 800be44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800be48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be4c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800be50:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800be52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be56:	3302      	adds	r3, #2
 800be58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800be5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800be60:	2218      	movs	r2, #24
 800be62:	2100      	movs	r1, #0
 800be64:	4618      	mov	r0, r3
 800be66:	f000 fe77 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800be6a:	233f      	movs	r3, #63	; 0x3f
 800be6c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800be70:	2383      	movs	r3, #131	; 0x83
 800be72:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800be76:	f107 0310 	add.w	r3, r7, #16
 800be7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800be7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800be86:	f107 030f 	add.w	r3, r7, #15
 800be8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800be8e:	2301      	movs	r3, #1
 800be90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800be94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800be98:	2100      	movs	r1, #0
 800be9a:	4618      	mov	r0, r3
 800be9c:	f001 f936 	bl	800d10c <hci_send_req>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	da01      	bge.n	800beaa <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800bea6:	23ff      	movs	r3, #255	; 0xff
 800bea8:	e002      	b.n	800beb0 <aci_gap_set_discoverable+0x1b2>
  return status;
 800beaa:	f107 030f 	add.w	r3, r7, #15
 800beae:	781b      	ldrb	r3, [r3, #0]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bdb0      	pop	{r4, r5, r7, pc}

0800beba <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b0cc      	sub	sp, #304	; 0x130
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	4602      	mov	r2, r0
 800bec2:	1dfb      	adds	r3, r7, #7
 800bec4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800bec6:	f107 0310 	add.w	r3, r7, #16
 800beca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bece:	f107 030f 	add.w	r3, r7, #15
 800bed2:	2200      	movs	r2, #0
 800bed4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800bedc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bee0:	1dfa      	adds	r2, r7, #7
 800bee2:	7812      	ldrb	r2, [r2, #0]
 800bee4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800beea:	3301      	adds	r3, #1
 800beec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bef0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bef4:	2218      	movs	r2, #24
 800bef6:	2100      	movs	r1, #0
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 fe2d 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800befe:	233f      	movs	r3, #63	; 0x3f
 800bf00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800bf04:	2385      	movs	r3, #133	; 0x85
 800bf06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bf0a:	f107 0310 	add.w	r3, r7, #16
 800bf0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bf12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bf1a:	f107 030f 	add.w	r3, r7, #15
 800bf1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bf22:	2301      	movs	r3, #1
 800bf24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bf28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f001 f8ec 	bl	800d10c <hci_send_req>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	da01      	bge.n	800bf3e <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800bf3a:	23ff      	movs	r3, #255	; 0xff
 800bf3c:	e002      	b.n	800bf44 <aci_gap_set_io_capability+0x8a>
  return status;
 800bf3e:	f107 030f 	add.w	r3, r7, #15
 800bf42:	781b      	ldrb	r3, [r3, #0]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800bf4e:	b5b0      	push	{r4, r5, r7, lr}
 800bf50:	b0cc      	sub	sp, #304	; 0x130
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	4605      	mov	r5, r0
 800bf56:	460c      	mov	r4, r1
 800bf58:	4610      	mov	r0, r2
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	1dfb      	adds	r3, r7, #7
 800bf5e:	462a      	mov	r2, r5
 800bf60:	701a      	strb	r2, [r3, #0]
 800bf62:	1dbb      	adds	r3, r7, #6
 800bf64:	4622      	mov	r2, r4
 800bf66:	701a      	strb	r2, [r3, #0]
 800bf68:	1d7b      	adds	r3, r7, #5
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	701a      	strb	r2, [r3, #0]
 800bf6e:	1d3b      	adds	r3, r7, #4
 800bf70:	460a      	mov	r2, r1
 800bf72:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800bf74:	f107 0310 	add.w	r3, r7, #16
 800bf78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bf7c:	f107 030f 	add.w	r3, r7, #15
 800bf80:	2200      	movs	r2, #0
 800bf82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800bf8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf8e:	1dfa      	adds	r2, r7, #7
 800bf90:	7812      	ldrb	r2, [r2, #0]
 800bf92:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bf94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf98:	3301      	adds	r3, #1
 800bf9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800bf9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfa2:	1dba      	adds	r2, r7, #6
 800bfa4:	7812      	ldrb	r2, [r2, #0]
 800bfa6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800bfa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bfac:	3301      	adds	r3, #1
 800bfae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800bfb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfb6:	1d7a      	adds	r2, r7, #5
 800bfb8:	7812      	ldrb	r2, [r2, #0]
 800bfba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800bfbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800bfc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfca:	1d3a      	adds	r2, r7, #4
 800bfcc:	7812      	ldrb	r2, [r2, #0]
 800bfce:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800bfd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800bfda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfde:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800bfe2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800bfe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bfe8:	3301      	adds	r3, #1
 800bfea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800bfee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bff2:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800bff6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800bff8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bffc:	3301      	adds	r3, #1
 800bffe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800c002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c006:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c00a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c00c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c010:	3301      	adds	r3, #1
 800c012:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800c016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c01a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c01e:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800c022:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c026:	3304      	adds	r3, #4
 800c028:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800c02c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c030:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800c034:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800c036:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c03a:	3301      	adds	r3, #1
 800c03c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c040:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c044:	2218      	movs	r2, #24
 800c046:	2100      	movs	r1, #0
 800c048:	4618      	mov	r0, r3
 800c04a:	f000 fd85 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c04e:	233f      	movs	r3, #63	; 0x3f
 800c050:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800c054:	2386      	movs	r3, #134	; 0x86
 800c056:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c05a:	f107 0310 	add.w	r3, r7, #16
 800c05e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c062:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c066:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c06a:	f107 030f 	add.w	r3, r7, #15
 800c06e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c072:	2301      	movs	r3, #1
 800c074:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c078:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c07c:	2100      	movs	r1, #0
 800c07e:	4618      	mov	r0, r3
 800c080:	f001 f844 	bl	800d10c <hci_send_req>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	da01      	bge.n	800c08e <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800c08a:	23ff      	movs	r3, #255	; 0xff
 800c08c:	e002      	b.n	800c094 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800c08e:	f107 030f 	add.w	r3, r7, #15
 800c092:	781b      	ldrb	r3, [r3, #0]
}
 800c094:	4618      	mov	r0, r3
 800c096:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bdb0      	pop	{r4, r5, r7, pc}

0800c09e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800c09e:	b590      	push	{r4, r7, lr}
 800c0a0:	b0cd      	sub	sp, #308	; 0x134
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	4608      	mov	r0, r1
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	463a      	mov	r2, r7
 800c0ac:	6013      	str	r3, [r2, #0]
 800c0ae:	1dfb      	adds	r3, r7, #7
 800c0b0:	4622      	mov	r2, r4
 800c0b2:	701a      	strb	r2, [r3, #0]
 800c0b4:	1dbb      	adds	r3, r7, #6
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	701a      	strb	r2, [r3, #0]
 800c0ba:	1d7b      	adds	r3, r7, #5
 800c0bc:	460a      	mov	r2, r1
 800c0be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800c0c0:	f107 0310 	add.w	r3, r7, #16
 800c0c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c0c8:	f107 0308 	add.w	r3, r7, #8
 800c0cc:	2207      	movs	r2, #7
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 fd41 	bl	800cb58 <Osal_MemSet>
  int index_input = 0;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800c0dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0e0:	1dfa      	adds	r2, r7, #7
 800c0e2:	7812      	ldrb	r2, [r2, #0]
 800c0e4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c0e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800c0f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0f4:	1dba      	adds	r2, r7, #6
 800c0f6:	7812      	ldrb	r2, [r2, #0]
 800c0f8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c0fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c0fe:	3301      	adds	r3, #1
 800c100:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800c104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c108:	1d7a      	adds	r2, r7, #5
 800c10a:	7812      	ldrb	r2, [r2, #0]
 800c10c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c10e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c112:	3301      	adds	r3, #1
 800c114:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c118:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c11c:	2218      	movs	r2, #24
 800c11e:	2100      	movs	r1, #0
 800c120:	4618      	mov	r0, r3
 800c122:	f000 fd19 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c126:	233f      	movs	r3, #63	; 0x3f
 800c128:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800c12c:	238a      	movs	r3, #138	; 0x8a
 800c12e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c132:	f107 0310 	add.w	r3, r7, #16
 800c136:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c13a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c13e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800c142:	f107 0308 	add.w	r3, r7, #8
 800c146:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800c14a:	2307      	movs	r3, #7
 800c14c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c150:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c154:	2100      	movs	r1, #0
 800c156:	4618      	mov	r0, r3
 800c158:	f000 ffd8 	bl	800d10c <hci_send_req>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	da01      	bge.n	800c166 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800c162:	23ff      	movs	r3, #255	; 0xff
 800c164:	e021      	b.n	800c1aa <aci_gap_init+0x10c>
  if ( resp.Status )
 800c166:	f107 0308 	add.w	r3, r7, #8
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d003      	beq.n	800c178 <aci_gap_init+0xda>
    return resp.Status;
 800c170:	f107 0308 	add.w	r3, r7, #8
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	e018      	b.n	800c1aa <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800c178:	f107 0308 	add.w	r3, r7, #8
 800c17c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c180:	b29a      	uxth	r2, r3
 800c182:	463b      	mov	r3, r7
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800c188:	f107 0308 	add.w	r3, r7, #8
 800c18c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c190:	b29a      	uxth	r2, r3
 800c192:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c196:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800c198:	f107 0308 	add.w	r3, r7, #8
 800c19c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c1a6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd90      	pop	{r4, r7, pc}

0800c1b4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b0cc      	sub	sp, #304	; 0x130
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	463b      	mov	r3, r7
 800c1be:	6019      	str	r1, [r3, #0]
 800c1c0:	1dfb      	adds	r3, r7, #7
 800c1c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800c1c4:	f107 0310 	add.w	r3, r7, #16
 800c1c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c1cc:	f107 030f 	add.w	r3, r7, #15
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800c1da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1de:	1dfa      	adds	r2, r7, #7
 800c1e0:	7812      	ldrb	r2, [r2, #0]
 800c1e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c1e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800c1ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1f2:	1c58      	adds	r0, r3, #1
 800c1f4:	1dfb      	adds	r3, r7, #7
 800c1f6:	781a      	ldrb	r2, [r3, #0]
 800c1f8:	463b      	mov	r3, r7
 800c1fa:	6819      	ldr	r1, [r3, #0]
 800c1fc:	f000 fc9c 	bl	800cb38 <Osal_MemCpy>
  index_input += AdvDataLen;
 800c200:	1dfb      	adds	r3, r7, #7
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c208:	4413      	add	r3, r2
 800c20a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c20e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c212:	2218      	movs	r2, #24
 800c214:	2100      	movs	r1, #0
 800c216:	4618      	mov	r0, r3
 800c218:	f000 fc9e 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c21c:	233f      	movs	r3, #63	; 0x3f
 800c21e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800c222:	238e      	movs	r3, #142	; 0x8e
 800c224:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c228:	f107 0310 	add.w	r3, r7, #16
 800c22c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c230:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c234:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c238:	f107 030f 	add.w	r3, r7, #15
 800c23c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c240:	2301      	movs	r3, #1
 800c242:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c246:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c24a:	2100      	movs	r1, #0
 800c24c:	4618      	mov	r0, r3
 800c24e:	f000 ff5d 	bl	800d10c <hci_send_req>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	da01      	bge.n	800c25c <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800c258:	23ff      	movs	r3, #255	; 0xff
 800c25a:	e002      	b.n	800c262 <aci_gap_update_adv_data+0xae>
  return status;
 800c25c:	f107 030f 	add.w	r3, r7, #15
 800c260:	781b      	ldrb	r3, [r3, #0]
}
 800c262:	4618      	mov	r0, r3
 800c264:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b088      	sub	sp, #32
 800c270:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c276:	f107 0308 	add.w	r3, r7, #8
 800c27a:	2218      	movs	r2, #24
 800c27c:	2100      	movs	r1, #0
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 fc6a 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c284:	233f      	movs	r3, #63	; 0x3f
 800c286:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800c288:	2392      	movs	r3, #146	; 0x92
 800c28a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c28c:	1dfb      	adds	r3, r7, #7
 800c28e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c290:	2301      	movs	r3, #1
 800c292:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c294:	f107 0308 	add.w	r3, r7, #8
 800c298:	2100      	movs	r1, #0
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 ff36 	bl	800d10c <hci_send_req>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	da01      	bge.n	800c2aa <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c2a6:	23ff      	movs	r3, #255	; 0xff
 800c2a8:	e000      	b.n	800c2ac <aci_gap_configure_whitelist+0x40>
  return status;
 800c2aa:	79fb      	ldrb	r3, [r7, #7]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3720      	adds	r7, #32
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b088      	sub	sp, #32
 800c2b8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c2be:	f107 0308 	add.w	r3, r7, #8
 800c2c2:	2218      	movs	r2, #24
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 fc46 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c2cc:	233f      	movs	r3, #63	; 0x3f
 800c2ce:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800c2d0:	f240 1301 	movw	r3, #257	; 0x101
 800c2d4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c2d6:	1dfb      	adds	r3, r7, #7
 800c2d8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c2de:	f107 0308 	add.w	r3, r7, #8
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 ff11 	bl	800d10c <hci_send_req>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	da01      	bge.n	800c2f4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800c2f0:	23ff      	movs	r3, #255	; 0xff
 800c2f2:	e000      	b.n	800c2f6 <aci_gatt_init+0x42>
  return status;
 800c2f4:	79fb      	ldrb	r3, [r7, #7]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3720      	adds	r7, #32
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800c2fe:	b590      	push	{r4, r7, lr}
 800c300:	b0cf      	sub	sp, #316	; 0x13c
 800c302:	af00      	add	r7, sp, #0
 800c304:	4604      	mov	r4, r0
 800c306:	4638      	mov	r0, r7
 800c308:	6001      	str	r1, [r0, #0]
 800c30a:	4610      	mov	r0, r2
 800c30c:	4619      	mov	r1, r3
 800c30e:	1dfb      	adds	r3, r7, #7
 800c310:	4622      	mov	r2, r4
 800c312:	701a      	strb	r2, [r3, #0]
 800c314:	1dbb      	adds	r3, r7, #6
 800c316:	4602      	mov	r2, r0
 800c318:	701a      	strb	r2, [r3, #0]
 800c31a:	1d7b      	adds	r3, r7, #5
 800c31c:	460a      	mov	r2, r1
 800c31e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800c320:	f107 0310 	add.w	r3, r7, #16
 800c324:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800c328:	1dfb      	adds	r3, r7, #7
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d007      	beq.n	800c340 <aci_gatt_add_service+0x42>
 800c330:	1dfb      	adds	r3, r7, #7
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	2b02      	cmp	r3, #2
 800c336:	d101      	bne.n	800c33c <aci_gatt_add_service+0x3e>
 800c338:	2311      	movs	r3, #17
 800c33a:	e002      	b.n	800c342 <aci_gatt_add_service+0x44>
 800c33c:	2301      	movs	r3, #1
 800c33e:	e000      	b.n	800c342 <aci_gatt_add_service+0x44>
 800c340:	2303      	movs	r3, #3
 800c342:	f107 0210 	add.w	r2, r7, #16
 800c346:	4413      	add	r3, r2
 800c348:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c34c:	f107 030c 	add.w	r3, r7, #12
 800c350:	2203      	movs	r2, #3
 800c352:	2100      	movs	r1, #0
 800c354:	4618      	mov	r0, r3
 800c356:	f000 fbff 	bl	800cb58 <Osal_MemSet>
  int index_input = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800c360:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c364:	1dfa      	adds	r2, r7, #7
 800c366:	7812      	ldrb	r2, [r2, #0]
 800c368:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c36a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c36e:	3301      	adds	r3, #1
 800c370:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800c374:	1dfb      	adds	r3, r7, #7
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d002      	beq.n	800c382 <aci_gatt_add_service+0x84>
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	d004      	beq.n	800c38a <aci_gatt_add_service+0x8c>
 800c380:	e007      	b.n	800c392 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800c382:	2302      	movs	r3, #2
 800c384:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800c388:	e005      	b.n	800c396 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800c38a:	2310      	movs	r3, #16
 800c38c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800c390:	e001      	b.n	800c396 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800c392:	2347      	movs	r3, #71	; 0x47
 800c394:	e05d      	b.n	800c452 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800c396:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c39a:	1c58      	adds	r0, r3, #1
 800c39c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800c3a0:	463b      	mov	r3, r7
 800c3a2:	6819      	ldr	r1, [r3, #0]
 800c3a4:	f000 fbc8 	bl	800cb38 <Osal_MemCpy>
    index_input += size;
 800c3a8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800c3ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c3b0:	4413      	add	r3, r2
 800c3b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800c3b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3ba:	1dba      	adds	r2, r7, #6
 800c3bc:	7812      	ldrb	r2, [r2, #0]
 800c3be:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c3c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800c3ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3ce:	1d7a      	adds	r2, r7, #5
 800c3d0:	7812      	ldrb	r2, [r2, #0]
 800c3d2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800c3d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c3d8:	3301      	adds	r3, #1
 800c3da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c3de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c3e2:	2218      	movs	r2, #24
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 fbb6 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c3ec:	233f      	movs	r3, #63	; 0x3f
 800c3ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800c3f2:	f44f 7381 	mov.w	r3, #258	; 0x102
 800c3f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c3fa:	f107 0310 	add.w	r3, r7, #16
 800c3fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c402:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c406:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800c40a:	f107 030c 	add.w	r3, r7, #12
 800c40e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800c412:	2303      	movs	r3, #3
 800c414:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c418:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c41c:	2100      	movs	r1, #0
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 fe74 	bl	800d10c <hci_send_req>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	da01      	bge.n	800c42e <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800c42a:	23ff      	movs	r3, #255	; 0xff
 800c42c:	e011      	b.n	800c452 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800c42e:	f107 030c 	add.w	r3, r7, #12
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d003      	beq.n	800c440 <aci_gatt_add_service+0x142>
    return resp.Status;
 800c438:	f107 030c 	add.w	r3, r7, #12
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	e008      	b.n	800c452 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800c440:	f107 030c 	add.w	r3, r7, #12
 800c444:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c448:	b29a      	uxth	r2, r3
 800c44a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c44e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd90      	pop	{r4, r7, pc}

0800c45c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800c45c:	b590      	push	{r4, r7, lr}
 800c45e:	b0d1      	sub	sp, #324	; 0x144
 800c460:	af00      	add	r7, sp, #0
 800c462:	4604      	mov	r4, r0
 800c464:	4608      	mov	r0, r1
 800c466:	f107 0108 	add.w	r1, r7, #8
 800c46a:	600a      	str	r2, [r1, #0]
 800c46c:	4619      	mov	r1, r3
 800c46e:	f107 030e 	add.w	r3, r7, #14
 800c472:	4622      	mov	r2, r4
 800c474:	801a      	strh	r2, [r3, #0]
 800c476:	f107 030d 	add.w	r3, r7, #13
 800c47a:	4602      	mov	r2, r0
 800c47c:	701a      	strb	r2, [r3, #0]
 800c47e:	1dbb      	adds	r3, r7, #6
 800c480:	460a      	mov	r2, r1
 800c482:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800c484:	f107 0318 	add.w	r3, r7, #24
 800c488:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800c48c:	f107 030d 	add.w	r3, r7, #13
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d008      	beq.n	800c4a8 <aci_gatt_add_char+0x4c>
 800c496:	f107 030d 	add.w	r3, r7, #13
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d101      	bne.n	800c4a4 <aci_gatt_add_char+0x48>
 800c4a0:	2313      	movs	r3, #19
 800c4a2:	e002      	b.n	800c4aa <aci_gatt_add_char+0x4e>
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	e000      	b.n	800c4aa <aci_gatt_add_char+0x4e>
 800c4a8:	2305      	movs	r3, #5
 800c4aa:	f107 0218 	add.w	r2, r7, #24
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c4b4:	f107 0314 	add.w	r3, r7, #20
 800c4b8:	2203      	movs	r2, #3
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f000 fb4b 	bl	800cb58 <Osal_MemSet>
  int index_input = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800c4c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c4cc:	f107 020e 	add.w	r2, r7, #14
 800c4d0:	8812      	ldrh	r2, [r2, #0]
 800c4d2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c4d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4d8:	3302      	adds	r3, #2
 800c4da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800c4de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c4e2:	f107 020d 	add.w	r2, r7, #13
 800c4e6:	7812      	ldrb	r2, [r2, #0]
 800c4e8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c4ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800c4f4:	f107 030d 	add.w	r3, r7, #13
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d002      	beq.n	800c504 <aci_gatt_add_char+0xa8>
 800c4fe:	2b02      	cmp	r3, #2
 800c500:	d004      	beq.n	800c50c <aci_gatt_add_char+0xb0>
 800c502:	e007      	b.n	800c514 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800c504:	2302      	movs	r3, #2
 800c506:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800c50a:	e005      	b.n	800c518 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800c50c:	2310      	movs	r3, #16
 800c50e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800c512:	e001      	b.n	800c518 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800c514:	2347      	movs	r3, #71	; 0x47
 800c516:	e086      	b.n	800c626 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800c518:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c51c:	1cd8      	adds	r0, r3, #3
 800c51e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800c522:	f107 0308 	add.w	r3, r7, #8
 800c526:	6819      	ldr	r1, [r3, #0]
 800c528:	f000 fb06 	bl	800cb38 <Osal_MemCpy>
    index_input += size;
 800c52c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800c530:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800c534:	4413      	add	r3, r2
 800c536:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800c53a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c53e:	1dba      	adds	r2, r7, #6
 800c540:	8812      	ldrh	r2, [r2, #0]
 800c542:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c544:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c548:	3302      	adds	r3, #2
 800c54a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800c54e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c552:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800c556:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800c558:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c55c:	3301      	adds	r3, #1
 800c55e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800c562:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c566:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c56a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800c56c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c570:	3301      	adds	r3, #1
 800c572:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800c576:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c57a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800c57e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800c580:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c584:	3301      	adds	r3, #1
 800c586:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800c58a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c58e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800c592:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800c594:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c598:	3301      	adds	r3, #1
 800c59a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800c59e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c5a2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800c5a6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800c5a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c5b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c5b6:	2218      	movs	r2, #24
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 facc 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c5c0:	233f      	movs	r3, #63	; 0x3f
 800c5c2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800c5c6:	f44f 7382 	mov.w	r3, #260	; 0x104
 800c5ca:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800c5ce:	f107 0318 	add.w	r3, r7, #24
 800c5d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800c5d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800c5de:	f107 0314 	add.w	r3, r7, #20
 800c5e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c5ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f000 fd8a 	bl	800d10c <hci_send_req>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	da01      	bge.n	800c602 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800c5fe:	23ff      	movs	r3, #255	; 0xff
 800c600:	e011      	b.n	800c626 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800c602:	f107 0314 	add.w	r3, r7, #20
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d003      	beq.n	800c614 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800c60c:	f107 0314 	add.w	r3, r7, #20
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	e008      	b.n	800c626 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800c614:	f107 0314 	add.w	r3, r7, #20
 800c618:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c61c:	b29a      	uxth	r2, r3
 800c61e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800c622:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd90      	pop	{r4, r7, pc}

0800c630 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800c630:	b5b0      	push	{r4, r5, r7, lr}
 800c632:	b0cc      	sub	sp, #304	; 0x130
 800c634:	af00      	add	r7, sp, #0
 800c636:	4605      	mov	r5, r0
 800c638:	460c      	mov	r4, r1
 800c63a:	4610      	mov	r0, r2
 800c63c:	4619      	mov	r1, r3
 800c63e:	1dbb      	adds	r3, r7, #6
 800c640:	462a      	mov	r2, r5
 800c642:	801a      	strh	r2, [r3, #0]
 800c644:	1d3b      	adds	r3, r7, #4
 800c646:	4622      	mov	r2, r4
 800c648:	801a      	strh	r2, [r3, #0]
 800c64a:	1cfb      	adds	r3, r7, #3
 800c64c:	4602      	mov	r2, r0
 800c64e:	701a      	strb	r2, [r3, #0]
 800c650:	1cbb      	adds	r3, r7, #2
 800c652:	460a      	mov	r2, r1
 800c654:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800c656:	f107 0310 	add.w	r3, r7, #16
 800c65a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c65e:	f107 030f 	add.w	r3, r7, #15
 800c662:	2200      	movs	r2, #0
 800c664:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c666:	2300      	movs	r3, #0
 800c668:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800c66c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c670:	1dba      	adds	r2, r7, #6
 800c672:	8812      	ldrh	r2, [r2, #0]
 800c674:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c676:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c67a:	3302      	adds	r3, #2
 800c67c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800c680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c684:	1d3a      	adds	r2, r7, #4
 800c686:	8812      	ldrh	r2, [r2, #0]
 800c688:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800c68a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c68e:	3302      	adds	r3, #2
 800c690:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800c694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c698:	1cfa      	adds	r2, r7, #3
 800c69a:	7812      	ldrb	r2, [r2, #0]
 800c69c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c69e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800c6a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c6ac:	1cba      	adds	r2, r7, #2
 800c6ae:	7812      	ldrb	r2, [r2, #0]
 800c6b0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c6b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800c6bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c6c0:	1d98      	adds	r0, r3, #6
 800c6c2:	1cbb      	adds	r3, r7, #2
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800c6cc:	f000 fa34 	bl	800cb38 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800c6d0:	1cbb      	adds	r3, r7, #2
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c6d8:	4413      	add	r3, r2
 800c6da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c6de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c6e2:	2218      	movs	r2, #24
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f000 fa36 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c6ec:	233f      	movs	r3, #63	; 0x3f
 800c6ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800c6f2:	f44f 7383 	mov.w	r3, #262	; 0x106
 800c6f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c6fa:	f107 0310 	add.w	r3, r7, #16
 800c6fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c702:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c706:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c70a:	f107 030f 	add.w	r3, r7, #15
 800c70e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c712:	2301      	movs	r3, #1
 800c714:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c718:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c71c:	2100      	movs	r1, #0
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 fcf4 	bl	800d10c <hci_send_req>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	da01      	bge.n	800c72e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800c72a:	23ff      	movs	r3, #255	; 0xff
 800c72c:	e002      	b.n	800c734 <aci_gatt_update_char_value+0x104>
  return status;
 800c72e:	f107 030f 	add.w	r3, r7, #15
 800c732:	781b      	ldrb	r3, [r3, #0]
}
 800c734:	4618      	mov	r0, r3
 800c736:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bdb0      	pop	{r4, r5, r7, pc}

0800c73e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b0cc      	sub	sp, #304	; 0x130
 800c742:	af00      	add	r7, sp, #0
 800c744:	463b      	mov	r3, r7
 800c746:	601a      	str	r2, [r3, #0]
 800c748:	1dfb      	adds	r3, r7, #7
 800c74a:	4602      	mov	r2, r0
 800c74c:	701a      	strb	r2, [r3, #0]
 800c74e:	1dbb      	adds	r3, r7, #6
 800c750:	460a      	mov	r2, r1
 800c752:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800c754:	f107 0310 	add.w	r3, r7, #16
 800c758:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c75c:	f107 030f 	add.w	r3, r7, #15
 800c760:	2200      	movs	r2, #0
 800c762:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c764:	2300      	movs	r3, #0
 800c766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800c76a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c76e:	1dfa      	adds	r2, r7, #7
 800c770:	7812      	ldrb	r2, [r2, #0]
 800c772:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c774:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c778:	3301      	adds	r3, #1
 800c77a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800c77e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c782:	1dba      	adds	r2, r7, #6
 800c784:	7812      	ldrb	r2, [r2, #0]
 800c786:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c788:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c78c:	3301      	adds	r3, #1
 800c78e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800c792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c796:	1c98      	adds	r0, r3, #2
 800c798:	1dbb      	adds	r3, r7, #6
 800c79a:	781a      	ldrb	r2, [r3, #0]
 800c79c:	463b      	mov	r3, r7
 800c79e:	6819      	ldr	r1, [r3, #0]
 800c7a0:	f000 f9ca 	bl	800cb38 <Osal_MemCpy>
  index_input += Length;
 800c7a4:	1dbb      	adds	r3, r7, #6
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c7ac:	4413      	add	r3, r2
 800c7ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c7b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c7b6:	2218      	movs	r2, #24
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f000 f9cc 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c7c0:	233f      	movs	r3, #63	; 0x3f
 800c7c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800c7c6:	230c      	movs	r3, #12
 800c7c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c7cc:	f107 0310 	add.w	r3, r7, #16
 800c7d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c7d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c7dc:	f107 030f 	add.w	r3, r7, #15
 800c7e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c7ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f000 fc8b 	bl	800d10c <hci_send_req>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	da01      	bge.n	800c800 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800c7fc:	23ff      	movs	r3, #255	; 0xff
 800c7fe:	e002      	b.n	800c806 <aci_hal_write_config_data+0xc8>
  return status;
 800c800:	f107 030f 	add.w	r3, r7, #15
 800c804:	781b      	ldrb	r3, [r3, #0]
}
 800c806:	4618      	mov	r0, r3
 800c808:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b0cc      	sub	sp, #304	; 0x130
 800c814:	af00      	add	r7, sp, #0
 800c816:	4602      	mov	r2, r0
 800c818:	1dfb      	adds	r3, r7, #7
 800c81a:	701a      	strb	r2, [r3, #0]
 800c81c:	1dbb      	adds	r3, r7, #6
 800c81e:	460a      	mov	r2, r1
 800c820:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800c822:	f107 0310 	add.w	r3, r7, #16
 800c826:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c82a:	f107 030f 	add.w	r3, r7, #15
 800c82e:	2200      	movs	r2, #0
 800c830:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c832:	2300      	movs	r3, #0
 800c834:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800c838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c83c:	1dfa      	adds	r2, r7, #7
 800c83e:	7812      	ldrb	r2, [r2, #0]
 800c840:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c842:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c846:	3301      	adds	r3, #1
 800c848:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800c84c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c850:	1dba      	adds	r2, r7, #6
 800c852:	7812      	ldrb	r2, [r2, #0]
 800c854:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c856:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c85a:	3301      	adds	r3, #1
 800c85c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c860:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c864:	2218      	movs	r2, #24
 800c866:	2100      	movs	r1, #0
 800c868:	4618      	mov	r0, r3
 800c86a:	f000 f975 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c86e:	233f      	movs	r3, #63	; 0x3f
 800c870:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800c874:	230f      	movs	r3, #15
 800c876:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c87a:	f107 0310 	add.w	r3, r7, #16
 800c87e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c882:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c886:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c88a:	f107 030f 	add.w	r3, r7, #15
 800c88e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c892:	2301      	movs	r3, #1
 800c894:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c898:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c89c:	2100      	movs	r1, #0
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 fc34 	bl	800d10c <hci_send_req>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	da01      	bge.n	800c8ae <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800c8aa:	23ff      	movs	r3, #255	; 0xff
 800c8ac:	e002      	b.n	800c8b4 <aci_hal_set_tx_power_level+0xa4>
  return status;
 800c8ae:	f107 030f 	add.w	r3, r7, #15
 800c8b2:	781b      	ldrb	r3, [r3, #0]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b0cc      	sub	sp, #304	; 0x130
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	1dbb      	adds	r3, r7, #6
 800c8c8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800c8ca:	f107 0310 	add.w	r3, r7, #16
 800c8ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c8d2:	f107 030f 	add.w	r3, r7, #15
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800c8e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8e4:	1dba      	adds	r2, r7, #6
 800c8e6:	8812      	ldrh	r2, [r2, #0]
 800c8e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c8ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8ee:	3302      	adds	r3, #2
 800c8f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c8f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c8f8:	2218      	movs	r2, #24
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f000 f92b 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c902:	233f      	movs	r3, #63	; 0x3f
 800c904:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800c908:	2318      	movs	r3, #24
 800c90a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c90e:	f107 0310 	add.w	r3, r7, #16
 800c912:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c916:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c91a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c91e:	f107 030f 	add.w	r3, r7, #15
 800c922:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c926:	2301      	movs	r3, #1
 800c928:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c92c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c930:	2100      	movs	r1, #0
 800c932:	4618      	mov	r0, r3
 800c934:	f000 fbea 	bl	800d10c <hci_send_req>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	da01      	bge.n	800c942 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800c93e:	23ff      	movs	r3, #255	; 0xff
 800c940:	e002      	b.n	800c948 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 800c942:	f107 030f 	add.w	r3, r7, #15
 800c946:	781b      	ldrb	r3, [r3, #0]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b088      	sub	sp, #32
 800c956:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c958:	2300      	movs	r3, #0
 800c95a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c95c:	f107 0308 	add.w	r3, r7, #8
 800c960:	2218      	movs	r2, #24
 800c962:	2100      	movs	r1, #0
 800c964:	4618      	mov	r0, r3
 800c966:	f000 f8f7 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x03;
 800c96a:	2303      	movs	r3, #3
 800c96c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800c96e:	2303      	movs	r3, #3
 800c970:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c972:	1dfb      	adds	r3, r7, #7
 800c974:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c976:	2301      	movs	r3, #1
 800c978:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c97a:	f107 0308 	add.w	r3, r7, #8
 800c97e:	2100      	movs	r1, #0
 800c980:	4618      	mov	r0, r3
 800c982:	f000 fbc3 	bl	800d10c <hci_send_req>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	da01      	bge.n	800c990 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c98c:	23ff      	movs	r3, #255	; 0xff
 800c98e:	e000      	b.n	800c992 <hci_reset+0x40>
  return status;
 800c990:	79fb      	ldrb	r3, [r7, #7]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3720      	adds	r7, #32
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b0ce      	sub	sp, #312	; 0x138
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	f107 0308 	add.w	r3, r7, #8
 800c9a4:	6019      	str	r1, [r3, #0]
 800c9a6:	1d3b      	adds	r3, r7, #4
 800c9a8:	601a      	str	r2, [r3, #0]
 800c9aa:	f107 030e 	add.w	r3, r7, #14
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800c9b2:	f107 0318 	add.w	r3, r7, #24
 800c9b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c9ba:	f107 0310 	add.w	r3, r7, #16
 800c9be:	2205      	movs	r2, #5
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f000 f8c8 	bl	800cb58 <Osal_MemSet>
  int index_input = 0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800c9ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c9d2:	f107 020e 	add.w	r2, r7, #14
 800c9d6:	8812      	ldrh	r2, [r2, #0]
 800c9d8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c9da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c9de:	3302      	adds	r3, #2
 800c9e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c9e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c9e8:	2218      	movs	r2, #24
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 f8b3 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x08;
 800c9f2:	2308      	movs	r3, #8
 800c9f4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800c9f8:	2330      	movs	r3, #48	; 0x30
 800c9fa:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800c9fe:	f107 0318 	add.w	r3, r7, #24
 800ca02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800ca06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ca0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800ca0e:	f107 0310 	add.w	r3, r7, #16
 800ca12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800ca16:	2305      	movs	r3, #5
 800ca18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ca1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ca20:	2100      	movs	r1, #0
 800ca22:	4618      	mov	r0, r3
 800ca24:	f000 fb72 	bl	800d10c <hci_send_req>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	da01      	bge.n	800ca32 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800ca2e:	23ff      	movs	r3, #255	; 0xff
 800ca30:	e016      	b.n	800ca60 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800ca32:	f107 0310 	add.w	r3, r7, #16
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d003      	beq.n	800ca44 <hci_le_read_phy+0xaa>
    return resp.Status;
 800ca3c:	f107 0310 	add.w	r3, r7, #16
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	e00d      	b.n	800ca60 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800ca44:	f107 0310 	add.w	r3, r7, #16
 800ca48:	78da      	ldrb	r2, [r3, #3]
 800ca4a:	f107 0308 	add.w	r3, r7, #8
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800ca52:	f107 0310 	add.w	r3, r7, #16
 800ca56:	791a      	ldrb	r2, [r3, #4]
 800ca58:	1d3b      	adds	r3, r7, #4
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800ca6a:	b590      	push	{r4, r7, lr}
 800ca6c:	b0cd      	sub	sp, #308	; 0x134
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	4604      	mov	r4, r0
 800ca72:	4608      	mov	r0, r1
 800ca74:	4611      	mov	r1, r2
 800ca76:	1dfb      	adds	r3, r7, #7
 800ca78:	4622      	mov	r2, r4
 800ca7a:	701a      	strb	r2, [r3, #0]
 800ca7c:	1dbb      	adds	r3, r7, #6
 800ca7e:	4602      	mov	r2, r0
 800ca80:	701a      	strb	r2, [r3, #0]
 800ca82:	1d7b      	adds	r3, r7, #5
 800ca84:	460a      	mov	r2, r1
 800ca86:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800ca88:	f107 0310 	add.w	r3, r7, #16
 800ca8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ca90:	f107 030f 	add.w	r3, r7, #15
 800ca94:	2200      	movs	r2, #0
 800ca96:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800ca9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800caa2:	1dfa      	adds	r2, r7, #7
 800caa4:	7812      	ldrb	r2, [r2, #0]
 800caa6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800caa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800caac:	3301      	adds	r3, #1
 800caae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800cab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cab6:	1dba      	adds	r2, r7, #6
 800cab8:	7812      	ldrb	r2, [r2, #0]
 800caba:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cabc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cac0:	3301      	adds	r3, #1
 800cac2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800cac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800caca:	1d7a      	adds	r2, r7, #5
 800cacc:	7812      	ldrb	r2, [r2, #0]
 800cace:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cad4:	3301      	adds	r3, #1
 800cad6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cada:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cade:	2218      	movs	r2, #24
 800cae0:	2100      	movs	r1, #0
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 f838 	bl	800cb58 <Osal_MemSet>
  rq.ogf = 0x08;
 800cae8:	2308      	movs	r3, #8
 800caea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800caee:	2331      	movs	r3, #49	; 0x31
 800caf0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800caf4:	f107 0310 	add.w	r3, r7, #16
 800caf8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cafc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cb04:	f107 030f 	add.w	r3, r7, #15
 800cb08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb16:	2100      	movs	r1, #0
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f000 faf7 	bl	800d10c <hci_send_req>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	da01      	bge.n	800cb28 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800cb24:	23ff      	movs	r3, #255	; 0xff
 800cb26:	e002      	b.n	800cb2e <hci_le_set_default_phy+0xc4>
  return status;
 800cb28:	f107 030f 	add.w	r3, r7, #15
 800cb2c:	781b      	ldrb	r3, [r3, #0]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd90      	pop	{r4, r7, pc}

0800cb38 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	68b9      	ldr	r1, [r7, #8]
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f002 fdc7 	bl	800f6dc <memcpy>
 800cb4e:	4603      	mov	r3, r0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	68b9      	ldr	r1, [r7, #8]
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f002 fdc2 	bl	800f6f2 <memset>
 800cb6e:	4603      	mov	r3, r0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b08a      	sub	sp, #40	; 0x28
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800cb80:	2300      	movs	r3, #0
 800cb82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800cb8c:	6a3b      	ldr	r3, [r7, #32]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	2bff      	cmp	r3, #255	; 0xff
 800cb92:	d000      	beq.n	800cb96 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800cb94:	e04a      	b.n	800cc2c <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800cb96:	6a3b      	ldr	r3, [r7, #32]
 800cb98:	3302      	adds	r3, #2
 800cb9a:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	881b      	ldrh	r3, [r3, #0]
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	461a      	mov	r2, r3
 800cba4:	f640 4301 	movw	r3, #3073	; 0xc01
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d000      	beq.n	800cbae <PeerToPeer_Event_Handler+0x36>
          break;
 800cbac:	e03d      	b.n	800cc2a <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	3302      	adds	r3, #2
 800cbb2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	885b      	ldrh	r3, [r3, #2]
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	461a      	mov	r2, r3
 800cbbc:	4b1e      	ldr	r3, [pc, #120]	; (800cc38 <PeerToPeer_Event_Handler+0xc0>)
 800cbbe:	889b      	ldrh	r3, [r3, #4]
 800cbc0:	3302      	adds	r3, #2
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d118      	bne.n	800cbf8 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	7a1b      	ldrb	r3, [r3, #8]
 800cbd0:	f003 0301 	and.w	r3, r3, #1
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d007      	beq.n	800cbe8 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800cbdc:	f107 0308 	add.w	r3, r7, #8
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f001 fb6f 	bl	800e2c4 <P2PS_STM_App_Notification>
        break;
 800cbe6:	e01f      	b.n	800cc28 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800cbec:	f107 0308 	add.w	r3, r7, #8
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f001 fb67 	bl	800e2c4 <P2PS_STM_App_Notification>
        break;
 800cbf6:	e017      	b.n	800cc28 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800cbf8:	69bb      	ldr	r3, [r7, #24]
 800cbfa:	885b      	ldrh	r3, [r3, #2]
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	461a      	mov	r2, r3
 800cc00:	4b0d      	ldr	r3, [pc, #52]	; (800cc38 <PeerToPeer_Event_Handler+0xc0>)
 800cc02:	885b      	ldrh	r3, [r3, #2]
 800cc04:	3301      	adds	r3, #1
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d10e      	bne.n	800cc28 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800cc0a:	2303      	movs	r3, #3
 800cc0c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	88db      	ldrh	r3, [r3, #6]
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800cc1e:	f107 0308 	add.w	r3, r7, #8
 800cc22:	4618      	mov	r0, r3
 800cc24:	f001 fb4e 	bl	800e2c4 <P2PS_STM_App_Notification>
        break;
 800cc28:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800cc2a:	bf00      	nop
  }

  return(return_value);
 800cc2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800cc30:	4618      	mov	r0, r3
 800cc32:	3728      	adds	r7, #40	; 0x28
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	200002c4 	.word	0x200002c4

0800cc3c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b08a      	sub	sp, #40	; 0x28
 800cc40:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800cc42:	484a      	ldr	r0, [pc, #296]	; (800cd6c <P2PS_STM_Init+0x130>)
 800cc44:	f000 f95a 	bl	800cefc <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800cc48:	238f      	movs	r3, #143	; 0x8f
 800cc4a:	703b      	strb	r3, [r7, #0]
 800cc4c:	23e5      	movs	r3, #229	; 0xe5
 800cc4e:	707b      	strb	r3, [r7, #1]
 800cc50:	23b3      	movs	r3, #179	; 0xb3
 800cc52:	70bb      	strb	r3, [r7, #2]
 800cc54:	23d5      	movs	r3, #213	; 0xd5
 800cc56:	70fb      	strb	r3, [r7, #3]
 800cc58:	232e      	movs	r3, #46	; 0x2e
 800cc5a:	713b      	strb	r3, [r7, #4]
 800cc5c:	237f      	movs	r3, #127	; 0x7f
 800cc5e:	717b      	strb	r3, [r7, #5]
 800cc60:	234a      	movs	r3, #74	; 0x4a
 800cc62:	71bb      	strb	r3, [r7, #6]
 800cc64:	2398      	movs	r3, #152	; 0x98
 800cc66:	71fb      	strb	r3, [r7, #7]
 800cc68:	232a      	movs	r3, #42	; 0x2a
 800cc6a:	723b      	strb	r3, [r7, #8]
 800cc6c:	2348      	movs	r3, #72	; 0x48
 800cc6e:	727b      	strb	r3, [r7, #9]
 800cc70:	237a      	movs	r3, #122	; 0x7a
 800cc72:	72bb      	strb	r3, [r7, #10]
 800cc74:	23cc      	movs	r3, #204	; 0xcc
 800cc76:	72fb      	strb	r3, [r7, #11]
 800cc78:	2340      	movs	r3, #64	; 0x40
 800cc7a:	733b      	strb	r3, [r7, #12]
 800cc7c:	23fe      	movs	r3, #254	; 0xfe
 800cc7e:	737b      	strb	r3, [r7, #13]
 800cc80:	2300      	movs	r3, #0
 800cc82:	73bb      	strb	r3, [r7, #14]
 800cc84:	2300      	movs	r3, #0
 800cc86:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800cc88:	4639      	mov	r1, r7
 800cc8a:	4b39      	ldr	r3, [pc, #228]	; (800cd70 <P2PS_STM_Init+0x134>)
 800cc8c:	9300      	str	r3, [sp, #0]
 800cc8e:	2308      	movs	r3, #8
 800cc90:	2201      	movs	r2, #1
 800cc92:	2002      	movs	r0, #2
 800cc94:	f7ff fb33 	bl	800c2fe <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800cc98:	2319      	movs	r3, #25
 800cc9a:	703b      	strb	r3, [r7, #0]
 800cc9c:	23ed      	movs	r3, #237	; 0xed
 800cc9e:	707b      	strb	r3, [r7, #1]
 800cca0:	2382      	movs	r3, #130	; 0x82
 800cca2:	70bb      	strb	r3, [r7, #2]
 800cca4:	23ae      	movs	r3, #174	; 0xae
 800cca6:	70fb      	strb	r3, [r7, #3]
 800cca8:	23ed      	movs	r3, #237	; 0xed
 800ccaa:	713b      	strb	r3, [r7, #4]
 800ccac:	2321      	movs	r3, #33	; 0x21
 800ccae:	717b      	strb	r3, [r7, #5]
 800ccb0:	234c      	movs	r3, #76	; 0x4c
 800ccb2:	71bb      	strb	r3, [r7, #6]
 800ccb4:	239d      	movs	r3, #157	; 0x9d
 800ccb6:	71fb      	strb	r3, [r7, #7]
 800ccb8:	2341      	movs	r3, #65	; 0x41
 800ccba:	723b      	strb	r3, [r7, #8]
 800ccbc:	2345      	movs	r3, #69	; 0x45
 800ccbe:	727b      	strb	r3, [r7, #9]
 800ccc0:	2322      	movs	r3, #34	; 0x22
 800ccc2:	72bb      	strb	r3, [r7, #10]
 800ccc4:	238e      	movs	r3, #142	; 0x8e
 800ccc6:	72fb      	strb	r3, [r7, #11]
 800ccc8:	2341      	movs	r3, #65	; 0x41
 800ccca:	733b      	strb	r3, [r7, #12]
 800cccc:	23fe      	movs	r3, #254	; 0xfe
 800ccce:	737b      	strb	r3, [r7, #13]
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73bb      	strb	r3, [r7, #14]
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ccd8:	4b25      	ldr	r3, [pc, #148]	; (800cd70 <P2PS_STM_Init+0x134>)
 800ccda:	8818      	ldrh	r0, [r3, #0]
 800ccdc:	463a      	mov	r2, r7
 800ccde:	4b25      	ldr	r3, [pc, #148]	; (800cd74 <P2PS_STM_Init+0x138>)
 800cce0:	9305      	str	r3, [sp, #20]
 800cce2:	2301      	movs	r3, #1
 800cce4:	9304      	str	r3, [sp, #16]
 800cce6:	230a      	movs	r3, #10
 800cce8:	9303      	str	r3, [sp, #12]
 800ccea:	2301      	movs	r3, #1
 800ccec:	9302      	str	r3, [sp, #8]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	9301      	str	r3, [sp, #4]
 800ccf2:	2306      	movs	r3, #6
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	2302      	movs	r3, #2
 800ccf8:	2102      	movs	r1, #2
 800ccfa:	f7ff fbaf 	bl	800c45c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800ccfe:	2319      	movs	r3, #25
 800cd00:	703b      	strb	r3, [r7, #0]
 800cd02:	23ed      	movs	r3, #237	; 0xed
 800cd04:	707b      	strb	r3, [r7, #1]
 800cd06:	2382      	movs	r3, #130	; 0x82
 800cd08:	70bb      	strb	r3, [r7, #2]
 800cd0a:	23ae      	movs	r3, #174	; 0xae
 800cd0c:	70fb      	strb	r3, [r7, #3]
 800cd0e:	23ed      	movs	r3, #237	; 0xed
 800cd10:	713b      	strb	r3, [r7, #4]
 800cd12:	2321      	movs	r3, #33	; 0x21
 800cd14:	717b      	strb	r3, [r7, #5]
 800cd16:	234c      	movs	r3, #76	; 0x4c
 800cd18:	71bb      	strb	r3, [r7, #6]
 800cd1a:	239d      	movs	r3, #157	; 0x9d
 800cd1c:	71fb      	strb	r3, [r7, #7]
 800cd1e:	2341      	movs	r3, #65	; 0x41
 800cd20:	723b      	strb	r3, [r7, #8]
 800cd22:	2345      	movs	r3, #69	; 0x45
 800cd24:	727b      	strb	r3, [r7, #9]
 800cd26:	2322      	movs	r3, #34	; 0x22
 800cd28:	72bb      	strb	r3, [r7, #10]
 800cd2a:	238e      	movs	r3, #142	; 0x8e
 800cd2c:	72fb      	strb	r3, [r7, #11]
 800cd2e:	2342      	movs	r3, #66	; 0x42
 800cd30:	733b      	strb	r3, [r7, #12]
 800cd32:	23fe      	movs	r3, #254	; 0xfe
 800cd34:	737b      	strb	r3, [r7, #13]
 800cd36:	2300      	movs	r3, #0
 800cd38:	73bb      	strb	r3, [r7, #14]
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800cd3e:	4b0c      	ldr	r3, [pc, #48]	; (800cd70 <P2PS_STM_Init+0x134>)
 800cd40:	8818      	ldrh	r0, [r3, #0]
 800cd42:	463a      	mov	r2, r7
 800cd44:	4b0c      	ldr	r3, [pc, #48]	; (800cd78 <P2PS_STM_Init+0x13c>)
 800cd46:	9305      	str	r3, [sp, #20]
 800cd48:	2301      	movs	r3, #1
 800cd4a:	9304      	str	r3, [sp, #16]
 800cd4c:	230a      	movs	r3, #10
 800cd4e:	9303      	str	r3, [sp, #12]
 800cd50:	2301      	movs	r3, #1
 800cd52:	9302      	str	r3, [sp, #8]
 800cd54:	2300      	movs	r3, #0
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	2310      	movs	r3, #16
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	2102      	movs	r1, #2
 800cd60:	f7ff fb7c 	bl	800c45c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800cd64:	bf00      	nop
}
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	0800cb79 	.word	0x0800cb79
 800cd70:	200002c4 	.word	0x200002c4
 800cd74:	200002c6 	.word	0x200002c6
 800cd78:	200002c8 	.word	0x200002c8

0800cd7c <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af02      	add	r7, sp, #8
 800cd82:	4603      	mov	r3, r0
 800cd84:	6039      	str	r1, [r7, #0]
 800cd86:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800cd88:	2342      	movs	r3, #66	; 0x42
 800cd8a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800cd8c:	88fb      	ldrh	r3, [r7, #6]
 800cd8e:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d000      	beq.n	800cd98 <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800cd96:	e00c      	b.n	800cdb2 <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800cd98:	4b08      	ldr	r3, [pc, #32]	; (800cdbc <P2PS_STM_App_Update_Char+0x40>)
 800cd9a:	8818      	ldrh	r0, [r3, #0]
 800cd9c:	4b07      	ldr	r3, [pc, #28]	; (800cdbc <P2PS_STM_App_Update_Char+0x40>)
 800cd9e:	8899      	ldrh	r1, [r3, #4]
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	2302      	movs	r3, #2
 800cda6:	2200      	movs	r2, #0
 800cda8:	f7ff fc42 	bl	800c630 <aci_gatt_update_char_value>
 800cdac:	4603      	mov	r3, r0
 800cdae:	73fb      	strb	r3, [r7, #15]
      break;
 800cdb0:	bf00      	nop
  }

  return result;
 800cdb2:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	200002c4 	.word	0x200002c4

0800cdc0 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	af00      	add	r7, sp, #0
  return;
 800cdc4:	bf00      	nop
}
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr

0800cdce <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800cdce:	b480      	push	{r7}
 800cdd0:	af00      	add	r7, sp, #0
  return;
 800cdd2:	bf00      	nop
}
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <DIS_Init>:
__weak void DIS_Init( void )
{
 800cddc:	b480      	push	{r7}
 800cdde:	af00      	add	r7, sp, #0
  return;
 800cde0:	bf00      	nop
}
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800cdea:	b480      	push	{r7}
 800cdec:	af00      	add	r7, sp, #0
  return;
 800cdee:	bf00      	nop
}
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	af00      	add	r7, sp, #0
  return;
 800cdfc:	bf00      	nop
}
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <HRS_Init>:
__weak void HRS_Init( void )
{
 800ce06:	b480      	push	{r7}
 800ce08:	af00      	add	r7, sp, #0
  return;
 800ce0a:	bf00      	nop
}
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <HTS_Init>:
__weak void HTS_Init( void )
{
 800ce14:	b480      	push	{r7}
 800ce16:	af00      	add	r7, sp, #0
  return;
 800ce18:	bf00      	nop
}
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <IAS_Init>:
__weak void IAS_Init( void )
{
 800ce22:	b480      	push	{r7}
 800ce24:	af00      	add	r7, sp, #0
  return;
 800ce26:	bf00      	nop
}
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <LLS_Init>:
__weak void LLS_Init( void )
{
 800ce30:	b480      	push	{r7}
 800ce32:	af00      	add	r7, sp, #0
  return;
 800ce34:	bf00      	nop
}
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr

0800ce3e <TPS_Init>:
__weak void TPS_Init( void )
{
 800ce3e:	b480      	push	{r7}
 800ce40:	af00      	add	r7, sp, #0
  return;
 800ce42:	bf00      	nop
}
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	af00      	add	r7, sp, #0
  return;
 800ce50:	bf00      	nop
}
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr

0800ce5a <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800ce5a:	b480      	push	{r7}
 800ce5c:	af00      	add	r7, sp, #0
  return;
 800ce5e:	bf00      	nop
}
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <MESH_Init>:
__weak void MESH_Init( void )
{
 800ce68:	b480      	push	{r7}
 800ce6a:	af00      	add	r7, sp, #0
  return;
 800ce6c:	bf00      	nop
}
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800ce76:	b480      	push	{r7}
 800ce78:	af00      	add	r7, sp, #0
  return;
 800ce7a:	bf00      	nop
}
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800ce84:	b480      	push	{r7}
 800ce86:	af00      	add	r7, sp, #0
  return;
 800ce88:	bf00      	nop
}
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
	...

0800ce94 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ce98:	4b04      	ldr	r3, [pc, #16]	; (800ceac <SVCCTL_Init+0x18>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ce9e:	4b04      	ldr	r3, [pc, #16]	; (800ceb0 <SVCCTL_Init+0x1c>)
 800cea0:	2200      	movs	r2, #0
 800cea2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800cea4:	f000 f806 	bl	800ceb4 <SVCCTL_SvcInit>

  return;
 800cea8:	bf00      	nop
}
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	200002cc 	.word	0x200002cc
 800ceb0:	200002ec 	.word	0x200002ec

0800ceb4 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	af00      	add	r7, sp, #0
  BLS_Init();
 800ceb8:	f7ff ff82 	bl	800cdc0 <BLS_Init>

  CRS_STM_Init();
 800cebc:	f7ff ff87 	bl	800cdce <CRS_STM_Init>

  DIS_Init();
 800cec0:	f7ff ff8c 	bl	800cddc <DIS_Init>

  EDS_STM_Init();
 800cec4:	f7ff ff91 	bl	800cdea <EDS_STM_Init>

  HIDS_Init();
 800cec8:	f7ff ff96 	bl	800cdf8 <HIDS_Init>

  HRS_Init();
 800cecc:	f7ff ff9b 	bl	800ce06 <HRS_Init>

  HTS_Init();
 800ced0:	f7ff ffa0 	bl	800ce14 <HTS_Init>

  IAS_Init();
 800ced4:	f7ff ffa5 	bl	800ce22 <IAS_Init>

  LLS_Init();
 800ced8:	f7ff ffaa 	bl	800ce30 <LLS_Init>

  TPS_Init();
 800cedc:	f7ff ffaf 	bl	800ce3e <TPS_Init>

  MOTENV_STM_Init();
 800cee0:	f7ff ffb4 	bl	800ce4c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800cee4:	f7ff feaa 	bl	800cc3c <P2PS_STM_Init>

  OTAS_STM_Init();
 800cee8:	f7ff ffb7 	bl	800ce5a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ceec:	f7ff ffc3 	bl	800ce76 <BVOPUS_STM_Init>

  MESH_Init();
 800cef0:	f7ff ffba 	bl	800ce68 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800cef4:	f7ff ffc6 	bl	800ce84 <SVCCTL_InitCustomSvc>
  
  return;
 800cef8:	bf00      	nop
}
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800cf04:	4b09      	ldr	r3, [pc, #36]	; (800cf2c <SVCCTL_RegisterSvcHandler+0x30>)
 800cf06:	7f1b      	ldrb	r3, [r3, #28]
 800cf08:	4619      	mov	r1, r3
 800cf0a:	4a08      	ldr	r2, [pc, #32]	; (800cf2c <SVCCTL_RegisterSvcHandler+0x30>)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800cf12:	4b06      	ldr	r3, [pc, #24]	; (800cf2c <SVCCTL_RegisterSvcHandler+0x30>)
 800cf14:	7f1b      	ldrb	r3, [r3, #28]
 800cf16:	3301      	adds	r3, #1
 800cf18:	b2da      	uxtb	r2, r3
 800cf1a:	4b04      	ldr	r3, [pc, #16]	; (800cf2c <SVCCTL_RegisterSvcHandler+0x30>)
 800cf1c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800cf1e:	bf00      	nop
}
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop
 800cf2c:	200002cc 	.word	0x200002cc

0800cf30 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2bff      	cmp	r3, #255	; 0xff
 800cf48:	d000      	beq.n	800cf4c <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800cf4a:	e025      	b.n	800cf98 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	3302      	adds	r3, #2
 800cf50:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cf5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cf60:	d000      	beq.n	800cf64 <SVCCTL_UserEvtRx+0x34>
          break;
 800cf62:	e018      	b.n	800cf96 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800cf64:	2300      	movs	r3, #0
 800cf66:	757b      	strb	r3, [r7, #21]
 800cf68:	e00d      	b.n	800cf86 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800cf6a:	7d7b      	ldrb	r3, [r7, #21]
 800cf6c:	4a18      	ldr	r2, [pc, #96]	; (800cfd0 <SVCCTL_UserEvtRx+0xa0>)
 800cf6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	4798      	blx	r3
 800cf76:	4603      	mov	r3, r0
 800cf78:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800cf7a:	7dfb      	ldrb	r3, [r7, #23]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d108      	bne.n	800cf92 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800cf80:	7d7b      	ldrb	r3, [r7, #21]
 800cf82:	3301      	adds	r3, #1
 800cf84:	757b      	strb	r3, [r7, #21]
 800cf86:	4b12      	ldr	r3, [pc, #72]	; (800cfd0 <SVCCTL_UserEvtRx+0xa0>)
 800cf88:	7f1b      	ldrb	r3, [r3, #28]
 800cf8a:	7d7a      	ldrb	r2, [r7, #21]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d3ec      	bcc.n	800cf6a <SVCCTL_UserEvtRx+0x3a>
          break;
 800cf90:	e000      	b.n	800cf94 <SVCCTL_UserEvtRx+0x64>
              break;
 800cf92:	bf00      	nop
          break;
 800cf94:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800cf96:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d009      	beq.n	800cfb2 <SVCCTL_UserEvtRx+0x82>
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	d00a      	beq.n	800cfb8 <SVCCTL_UserEvtRx+0x88>
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d10b      	bne.n	800cfbe <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 febe 	bl	800dd28 <SVCCTL_App_Notification>
 800cfac:	4603      	mov	r3, r0
 800cfae:	75bb      	strb	r3, [r7, #22]
      break;
 800cfb0:	e008      	b.n	800cfc4 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	75bb      	strb	r3, [r7, #22]
      break;
 800cfb6:	e005      	b.n	800cfc4 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	75bb      	strb	r3, [r7, #22]
      break;
 800cfbc:	e002      	b.n	800cfc4 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	75bb      	strb	r3, [r7, #22]
      break;
 800cfc2:	bf00      	nop
  }

  return (return_status);
 800cfc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	200002cc 	.word	0x200002cc

0800cfd4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b088      	sub	sp, #32
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800cfdc:	f107 030c 	add.w	r3, r7, #12
 800cfe0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	2121      	movs	r1, #33	; 0x21
 800cfec:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800cff0:	f000 fa5e 	bl	800d4b0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	330b      	adds	r3, #11
 800cff8:	78db      	ldrb	r3, [r3, #3]
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3720      	adds	r7, #32
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b088      	sub	sp, #32
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d00a:	f107 030c 	add.w	r3, r7, #12
 800d00e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800d016:	69fb      	ldr	r3, [r7, #28]
 800d018:	210f      	movs	r1, #15
 800d01a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800d01e:	f000 fa47 	bl	800d4b0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	330b      	adds	r3, #11
 800d026:	78db      	ldrb	r3, [r3, #3]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3720      	adds	r7, #32
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	4a08      	ldr	r2, [pc, #32]	; (800d060 <hci_init+0x30>)
 800d040:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800d042:	4a08      	ldr	r2, [pc, #32]	; (800d064 <hci_init+0x34>)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800d048:	4806      	ldr	r0, [pc, #24]	; (800d064 <hci_init+0x34>)
 800d04a:	f000 f9af 	bl	800d3ac <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4618      	mov	r0, r3
 800d054:	f000 f8dc 	bl	800d210 <TlInit>

  return;
 800d058:	bf00      	nop
}
 800d05a:	3708      	adds	r7, #8
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	200004b8 	.word	0x200004b8
 800d064:	20000490 	.word	0x20000490

0800d068 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d06e:	4824      	ldr	r0, [pc, #144]	; (800d100 <hci_user_evt_proc+0x98>)
 800d070:	f000 fd2a 	bl	800dac8 <LST_is_empty>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d12f      	bne.n	800d0da <hci_user_evt_proc+0x72>
 800d07a:	4b22      	ldr	r3, [pc, #136]	; (800d104 <hci_user_evt_proc+0x9c>)
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d02b      	beq.n	800d0da <hci_user_evt_proc+0x72>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d082:	f107 030c 	add.w	r3, r7, #12
 800d086:	4619      	mov	r1, r3
 800d088:	481d      	ldr	r0, [pc, #116]	; (800d100 <hci_user_evt_proc+0x98>)
 800d08a:	f000 fda4 	bl	800dbd6 <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	4618      	mov	r0, r3
 800d092:	f000 f97b 	bl	800d38c <OutputEvtTrace>

    if (hciContext.UserEvtRx != NULL)
 800d096:	4b1c      	ldr	r3, [pc, #112]	; (800d108 <hci_user_evt_proc+0xa0>)
 800d098:	69db      	ldr	r3, [r3, #28]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00c      	beq.n	800d0b8 <hci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d0a6:	4b18      	ldr	r3, [pc, #96]	; (800d108 <hci_user_evt_proc+0xa0>)
 800d0a8:	69db      	ldr	r3, [r3, #28]
 800d0aa:	1d3a      	adds	r2, r7, #4
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800d0b0:	793a      	ldrb	r2, [r7, #4]
 800d0b2:	4b14      	ldr	r3, [pc, #80]	; (800d104 <hci_user_evt_proc+0x9c>)
 800d0b4:	701a      	strb	r2, [r3, #0]
 800d0b6:	e002      	b.n	800d0be <hci_user_evt_proc+0x56>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d0b8:	4b12      	ldr	r3, [pc, #72]	; (800d104 <hci_user_evt_proc+0x9c>)
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800d0be:	4b11      	ldr	r3, [pc, #68]	; (800d104 <hci_user_evt_proc+0x9c>)
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d004      	beq.n	800d0d0 <hci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f000 fc41 	bl	800d950 <TL_MM_EvtDone>
 800d0ce:	e004      	b.n	800d0da <hci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	480a      	ldr	r0, [pc, #40]	; (800d100 <hci_user_evt_proc+0x98>)
 800d0d6:	f000 fd17 	bl	800db08 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d0da:	4809      	ldr	r0, [pc, #36]	; (800d100 <hci_user_evt_proc+0x98>)
 800d0dc:	f000 fcf4 	bl	800dac8 <LST_is_empty>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d107      	bne.n	800d0f6 <hci_user_evt_proc+0x8e>
 800d0e6:	4b07      	ldr	r3, [pc, #28]	; (800d104 <hci_user_evt_proc+0x9c>)
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d003      	beq.n	800d0f6 <hci_user_evt_proc+0x8e>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800d0ee:	4804      	ldr	r0, [pc, #16]	; (800d100 <hci_user_evt_proc+0x98>)
 800d0f0:	f001 f88f 	bl	800e212 <hci_notify_asynch_evt>
  }


  return;
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop
}
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	200002f4 	.word	0x200002f4
 800d104:	20000300 	.word	0x20000300
 800d108:	20000490 	.word	0x20000490

0800d10c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b088      	sub	sp, #32
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	460b      	mov	r3, r1
 800d116:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800d118:	2000      	movs	r0, #0
 800d11a:	f000 f8d5 	bl	800d2c8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800d11e:	2300      	movs	r3, #0
 800d120:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	885b      	ldrh	r3, [r3, #2]
 800d126:	b21b      	sxth	r3, r3
 800d128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d12c:	b21a      	sxth	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	029b      	lsls	r3, r3, #10
 800d134:	b21b      	sxth	r3, r3
 800d136:	4313      	orrs	r3, r2
 800d138:	b21b      	sxth	r3, r3
 800d13a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	b2d9      	uxtb	r1, r3
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	689a      	ldr	r2, [r3, #8]
 800d146:	8bbb      	ldrh	r3, [r7, #28]
 800d148:	4618      	mov	r0, r3
 800d14a:	f000 f891 	bl	800d270 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800d14e:	e052      	b.n	800d1f6 <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800d150:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d154:	f001 f874 	bl	800e240 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d158:	e047      	b.n	800d1ea <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800d15a:	f107 030c 	add.w	r3, r7, #12
 800d15e:	4619      	mov	r1, r3
 800d160:	482a      	ldr	r0, [pc, #168]	; (800d20c <hci_send_req+0x100>)
 800d162:	f000 fd38 	bl	800dbd6 <LST_remove_head>

      OutputRspTrace(pevtpacket);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	4618      	mov	r0, r3
 800d16a:	f000 f8fb 	bl	800d364 <OutputRspTrace>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	7a5b      	ldrb	r3, [r3, #9]
 800d172:	2b0f      	cmp	r3, #15
 800d174:	d114      	bne.n	800d1a0 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	330b      	adds	r3, #11
 800d17a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	885b      	ldrh	r3, [r3, #2]
 800d180:	b29b      	uxth	r3, r3
 800d182:	8bba      	ldrh	r2, [r7, #28]
 800d184:	429a      	cmp	r2, r3
 800d186:	d104      	bne.n	800d192 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	693a      	ldr	r2, [r7, #16]
 800d18e:	7812      	ldrb	r2, [r2, #0]
 800d190:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	785b      	ldrb	r3, [r3, #1]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d027      	beq.n	800d1ea <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d19a:	2301      	movs	r3, #1
 800d19c:	77fb      	strb	r3, [r7, #31]
 800d19e:	e024      	b.n	800d1ea <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	330b      	adds	r3, #11
 800d1a4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	8bba      	ldrh	r2, [r7, #28]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d114      	bne.n	800d1de <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	7a9b      	ldrb	r3, [r3, #10]
 800d1b8:	3b03      	subs	r3, #3
 800d1ba:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	695a      	ldr	r2, [r3, #20]
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	bfa8      	it	ge
 800d1c6:	461a      	movge	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6918      	ldr	r0, [r3, #16]
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	1cd9      	adds	r1, r3, #3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	695b      	ldr	r3, [r3, #20]
 800d1d8:	461a      	mov	r2, r3
 800d1da:	f002 fa7f 	bl	800f6dc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d1ea:	4808      	ldr	r0, [pc, #32]	; (800d20c <hci_send_req+0x100>)
 800d1ec:	f000 fc6c 	bl	800dac8 <LST_is_empty>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d0b1      	beq.n	800d15a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800d1f6:	7ffb      	ldrb	r3, [r7, #31]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d0a9      	beq.n	800d150 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800d1fc:	2001      	movs	r0, #1
 800d1fe:	f000 f863 	bl	800d2c8 <NotifyCmdStatus>

  return 0;
 800d202:	2300      	movs	r3, #0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3720      	adds	r7, #32
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	200004b0 	.word	0x200004b0

0800d210 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800d218:	480f      	ldr	r0, [pc, #60]	; (800d258 <TlInit+0x48>)
 800d21a:	f000 fc45 	bl	800daa8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800d21e:	4a0f      	ldr	r2, [pc, #60]	; (800d25c <TlInit+0x4c>)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800d224:	480e      	ldr	r0, [pc, #56]	; (800d260 <TlInit+0x50>)
 800d226:	f000 fc3f 	bl	800daa8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d22a:	4b0e      	ldr	r3, [pc, #56]	; (800d264 <TlInit+0x54>)
 800d22c:	2201      	movs	r2, #1
 800d22e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800d230:	4b0d      	ldr	r3, [pc, #52]	; (800d268 <TlInit+0x58>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00a      	beq.n	800d24e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800d23c:	4b0b      	ldr	r3, [pc, #44]	; (800d26c <TlInit+0x5c>)
 800d23e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800d240:	4b09      	ldr	r3, [pc, #36]	; (800d268 <TlInit+0x58>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f107 0208 	add.w	r2, r7, #8
 800d248:	4610      	mov	r0, r2
 800d24a:	4798      	blx	r3
  }

  return;
 800d24c:	bf00      	nop
 800d24e:	bf00      	nop
}
 800d250:	3718      	adds	r7, #24
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	200004b0 	.word	0x200004b0
 800d25c:	200002fc 	.word	0x200002fc
 800d260:	200002f4 	.word	0x200002f4
 800d264:	20000300 	.word	0x20000300
 800d268:	20000490 	.word	0x20000490
 800d26c:	0800d309 	.word	0x0800d309

0800d270 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	4603      	mov	r3, r0
 800d278:	603a      	str	r2, [r7, #0]
 800d27a:	80fb      	strh	r3, [r7, #6]
 800d27c:	460b      	mov	r3, r1
 800d27e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800d280:	4b0f      	ldr	r3, [pc, #60]	; (800d2c0 <SendCmd+0x50>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	88fa      	ldrh	r2, [r7, #6]
 800d286:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800d28a:	4b0d      	ldr	r3, [pc, #52]	; (800d2c0 <SendCmd+0x50>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	797a      	ldrb	r2, [r7, #5]
 800d290:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800d292:	4b0b      	ldr	r3, [pc, #44]	; (800d2c0 <SendCmd+0x50>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	330c      	adds	r3, #12
 800d298:	797a      	ldrb	r2, [r7, #5]
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f002 fa1d 	bl	800f6dc <memcpy>

  OutputCmdTrace(pCmdBuffer);
 800d2a2:	4b07      	ldr	r3, [pc, #28]	; (800d2c0 <SendCmd+0x50>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f000 f852 	bl	800d350 <OutputCmdTrace>

  hciContext.io.Send(0,0);
 800d2ac:	4b05      	ldr	r3, [pc, #20]	; (800d2c4 <SendCmd+0x54>)
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	2000      	movs	r0, #0
 800d2b4:	4798      	blx	r3

  return;
 800d2b6:	bf00      	nop
}
 800d2b8:	3708      	adds	r7, #8
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	200002fc 	.word	0x200002fc
 800d2c4:	20000490 	.word	0x20000490

0800d2c8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800d2d2:	79fb      	ldrb	r3, [r7, #7]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d108      	bne.n	800d2ea <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800d2d8:	4b0a      	ldr	r3, [pc, #40]	; (800d304 <NotifyCmdStatus+0x3c>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00d      	beq.n	800d2fc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800d2e0:	4b08      	ldr	r3, [pc, #32]	; (800d304 <NotifyCmdStatus+0x3c>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800d2e8:	e008      	b.n	800d2fc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800d2ea:	4b06      	ldr	r3, [pc, #24]	; (800d304 <NotifyCmdStatus+0x3c>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d004      	beq.n	800d2fc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800d2f2:	4b04      	ldr	r3, [pc, #16]	; (800d304 <NotifyCmdStatus+0x3c>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2001      	movs	r0, #1
 800d2f8:	4798      	blx	r3
  return;
 800d2fa:	bf00      	nop
 800d2fc:	bf00      	nop
}
 800d2fe:	3708      	adds	r7, #8
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	200004b8 	.word	0x200004b8

0800d308 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	7a5b      	ldrb	r3, [r3, #9]
 800d314:	2b0f      	cmp	r3, #15
 800d316:	d003      	beq.n	800d320 <TlEvtReceived+0x18>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7a5b      	ldrb	r3, [r3, #9]
 800d31c:	2b0e      	cmp	r3, #14
 800d31e:	d107      	bne.n	800d330 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800d320:	6879      	ldr	r1, [r7, #4]
 800d322:	4809      	ldr	r0, [pc, #36]	; (800d348 <TlEvtReceived+0x40>)
 800d324:	f000 fc14 	bl	800db50 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800d328:	2000      	movs	r0, #0
 800d32a:	f000 ff7e 	bl	800e22a <hci_cmd_resp_release>
 800d32e:	e006      	b.n	800d33e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800d330:	6879      	ldr	r1, [r7, #4]
 800d332:	4806      	ldr	r0, [pc, #24]	; (800d34c <TlEvtReceived+0x44>)
 800d334:	f000 fc0c 	bl	800db50 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d338:	4804      	ldr	r0, [pc, #16]	; (800d34c <TlEvtReceived+0x44>)
 800d33a:	f000 ff6a 	bl	800e212 <hci_notify_asynch_evt>
  }

  return;
 800d33e:	bf00      	nop
}
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	200004b0 	.word	0x200004b0
 800d34c:	200002f4 	.word	0x200002f4

0800d350 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 800d358:	bf00      	nop
}
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *hcievt)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  switch(hcievt->evtserial.evt.evtcode)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	7a5b      	ldrb	r3, [r3, #9]
 800d370:	2b0e      	cmp	r3, #14
 800d372:	d002      	beq.n	800d37a <OutputRspTrace+0x16>
 800d374:	2b0f      	cmp	r3, #15
 800d376:	d002      	beq.n	800d37e <OutputRspTrace+0x1a>
      }
      break;

    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", hcievt->evtserial.evt.evtcode);
      break;
 800d378:	e002      	b.n	800d380 <OutputRspTrace+0x1c>
      break;
 800d37a:	bf00      	nop
 800d37c:	e000      	b.n	800d380 <OutputRspTrace+0x1c>
      break;
 800d37e:	bf00      	nop
  }

  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 800d380:	bf00      	nop
}
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	7a5b      	ldrb	r3, [r3, #9]
 800d398:	2bff      	cmp	r3, #255	; 0xff
 800d39a:	d100      	bne.n	800d39e <OutputEvtTrace+0x12>
    }
  }

  TL_HCI_EVT_DBG_MSG("\r\n");

  return;
 800d39c:	bf00      	nop
 800d39e:	bf00      	nop
}
 800d3a0:	370c      	adds	r7, #12
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
	...

0800d3ac <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	4a05      	ldr	r2, [pc, #20]	; (800d3cc <hci_register_io_bus+0x20>)
 800d3b8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4a04      	ldr	r2, [pc, #16]	; (800d3d0 <hci_register_io_bus+0x24>)
 800d3be:	611a      	str	r2, [r3, #16]

  return;
 800d3c0:	bf00      	nop
}
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr
 800d3cc:	0800d729 	.word	0x0800d729
 800d3d0:	0800d791 	.word	0x0800d791

0800d3d4 <shci_init>:
static void OutputRspTrace(TL_EvtPacket_t *p_rsp);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	4a08      	ldr	r2, [pc, #32]	; (800d404 <shci_init+0x30>)
 800d3e4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800d3e6:	4a08      	ldr	r2, [pc, #32]	; (800d408 <shci_init+0x34>)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800d3ec:	4806      	ldr	r0, [pc, #24]	; (800d408 <shci_init+0x34>)
 800d3ee:	f000 f947 	bl	800d680 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 f8a0 	bl	800d53c <TlInit>

  return;
 800d3fc:	bf00      	nop
}
 800d3fe:	3708      	adds	r7, #8
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	200004dc 	.word	0x200004dc
 800d408:	200004bc 	.word	0x200004bc

0800d40c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d412:	4824      	ldr	r0, [pc, #144]	; (800d4a4 <shci_user_evt_proc+0x98>)
 800d414:	f000 fb58 	bl	800dac8 <LST_is_empty>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d12f      	bne.n	800d47e <shci_user_evt_proc+0x72>
 800d41e:	4b22      	ldr	r3, [pc, #136]	; (800d4a8 <shci_user_evt_proc+0x9c>)
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d02b      	beq.n	800d47e <shci_user_evt_proc+0x72>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d426:	f107 030c 	add.w	r3, r7, #12
 800d42a:	4619      	mov	r1, r3
 800d42c:	481d      	ldr	r0, [pc, #116]	; (800d4a4 <shci_user_evt_proc+0x98>)
 800d42e:	f000 fbd2 	bl	800dbd6 <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	4618      	mov	r0, r3
 800d436:	f000 f913 	bl	800d660 <OutputEvtTrace>

    if (shciContext.UserEvtRx != NULL)
 800d43a:	4b1c      	ldr	r3, [pc, #112]	; (800d4ac <shci_user_evt_proc+0xa0>)
 800d43c:	69db      	ldr	r3, [r3, #28]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d00c      	beq.n	800d45c <shci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800d446:	2301      	movs	r3, #1
 800d448:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d44a:	4b18      	ldr	r3, [pc, #96]	; (800d4ac <shci_user_evt_proc+0xa0>)
 800d44c:	69db      	ldr	r3, [r3, #28]
 800d44e:	1d3a      	adds	r2, r7, #4
 800d450:	4610      	mov	r0, r2
 800d452:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800d454:	793a      	ldrb	r2, [r7, #4]
 800d456:	4b14      	ldr	r3, [pc, #80]	; (800d4a8 <shci_user_evt_proc+0x9c>)
 800d458:	701a      	strb	r2, [r3, #0]
 800d45a:	e002      	b.n	800d462 <shci_user_evt_proc+0x56>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d45c:	4b12      	ldr	r3, [pc, #72]	; (800d4a8 <shci_user_evt_proc+0x9c>)
 800d45e:	2201      	movs	r2, #1
 800d460:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800d462:	4b11      	ldr	r3, [pc, #68]	; (800d4a8 <shci_user_evt_proc+0x9c>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d004      	beq.n	800d474 <shci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f000 fa6f 	bl	800d950 <TL_MM_EvtDone>
 800d472:	e004      	b.n	800d47e <shci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	4619      	mov	r1, r3
 800d478:	480a      	ldr	r0, [pc, #40]	; (800d4a4 <shci_user_evt_proc+0x98>)
 800d47a:	f000 fb45 	bl	800db08 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d47e:	4809      	ldr	r0, [pc, #36]	; (800d4a4 <shci_user_evt_proc+0x98>)
 800d480:	f000 fb22 	bl	800dac8 <LST_is_empty>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d107      	bne.n	800d49a <shci_user_evt_proc+0x8e>
 800d48a:	4b07      	ldr	r3, [pc, #28]	; (800d4a8 <shci_user_evt_proc+0x9c>)
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d003      	beq.n	800d49a <shci_user_evt_proc+0x8e>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800d492:	4804      	ldr	r0, [pc, #16]	; (800d4a4 <shci_user_evt_proc+0x98>)
 800d494:	f7f3 f925 	bl	80006e2 <shci_notify_asynch_evt>
  }


  return;
 800d498:	bf00      	nop
 800d49a:	bf00      	nop
}
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	20000304 	.word	0x20000304
 800d4a8:	20000314 	.word	0x20000314
 800d4ac:	200004bc 	.word	0x200004bc

0800d4b0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60ba      	str	r2, [r7, #8]
 800d4b8:	607b      	str	r3, [r7, #4]
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	81fb      	strh	r3, [r7, #14]
 800d4be:	460b      	mov	r3, r1
 800d4c0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	f000 f86c 	bl	800d5a0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800d4c8:	4b1a      	ldr	r3, [pc, #104]	; (800d534 <shci_send+0x84>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	89fa      	ldrh	r2, [r7, #14]
 800d4ce:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800d4d2:	4b18      	ldr	r3, [pc, #96]	; (800d534 <shci_send+0x84>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	7b7a      	ldrb	r2, [r7, #13]
 800d4d8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800d4da:	4b16      	ldr	r3, [pc, #88]	; (800d534 <shci_send+0x84>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	330c      	adds	r3, #12
 800d4e0:	7b7a      	ldrb	r2, [r7, #13]
 800d4e2:	68b9      	ldr	r1, [r7, #8]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f002 f8f9 	bl	800f6dc <memcpy>

  OutputCmdTrace(pCmdBuffer);
 800d4ea:	4b12      	ldr	r3, [pc, #72]	; (800d534 <shci_send+0x84>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f000 f89c 	bl	800d62c <OutputCmdTrace>

  shciContext.io.Send(0,0);
 800d4f4:	4b10      	ldr	r3, [pc, #64]	; (800d538 <shci_send+0x88>)
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800d4fe:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d502:	f7f3 f905 	bl	8000710 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f103 0008 	add.w	r0, r3, #8
 800d50c:	4b09      	ldr	r3, [pc, #36]	; (800d534 <shci_send+0x84>)
 800d50e:	6819      	ldr	r1, [r3, #0]
 800d510:	4b08      	ldr	r3, [pc, #32]	; (800d534 <shci_send+0x84>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	789b      	ldrb	r3, [r3, #2]
 800d516:	3303      	adds	r3, #3
 800d518:	461a      	mov	r2, r3
 800d51a:	f002 f8df 	bl	800f6dc <memcpy>

  OutputRspTrace(p_rsp);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f88e 	bl	800d640 <OutputRspTrace>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d524:	2001      	movs	r0, #1
 800d526:	f000 f83b 	bl	800d5a0 <Cmd_SetStatus>

  return;
 800d52a:	bf00      	nop
}
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	20000310 	.word	0x20000310
 800d538:	200004bc 	.word	0x200004bc

0800d53c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800d544:	4a10      	ldr	r2, [pc, #64]	; (800d588 <TlInit+0x4c>)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800d54a:	4810      	ldr	r0, [pc, #64]	; (800d58c <TlInit+0x50>)
 800d54c:	f000 faac 	bl	800daa8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d550:	2001      	movs	r0, #1
 800d552:	f000 f825 	bl	800d5a0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d556:	4b0e      	ldr	r3, [pc, #56]	; (800d590 <TlInit+0x54>)
 800d558:	2201      	movs	r2, #1
 800d55a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800d55c:	4b0d      	ldr	r3, [pc, #52]	; (800d594 <TlInit+0x58>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d00c      	beq.n	800d57e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800d568:	4b0b      	ldr	r3, [pc, #44]	; (800d598 <TlInit+0x5c>)
 800d56a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800d56c:	4b0b      	ldr	r3, [pc, #44]	; (800d59c <TlInit+0x60>)
 800d56e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800d570:	4b08      	ldr	r3, [pc, #32]	; (800d594 <TlInit+0x58>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f107 020c 	add.w	r2, r7, #12
 800d578:	4610      	mov	r0, r2
 800d57a:	4798      	blx	r3
  }

  return;
 800d57c:	bf00      	nop
 800d57e:	bf00      	nop
}
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	20000310 	.word	0x20000310
 800d58c:	20000304 	.word	0x20000304
 800d590:	20000314 	.word	0x20000314
 800d594:	200004bc 	.word	0x200004bc
 800d598:	0800d5f1 	.word	0x0800d5f1
 800d59c:	0800d609 	.word	0x0800d609

0800d5a0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800d5aa:	79fb      	ldrb	r3, [r7, #7]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d10b      	bne.n	800d5c8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800d5b0:	4b0d      	ldr	r3, [pc, #52]	; (800d5e8 <Cmd_SetStatus+0x48>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d003      	beq.n	800d5c0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800d5b8:	4b0b      	ldr	r3, [pc, #44]	; (800d5e8 <Cmd_SetStatus+0x48>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2000      	movs	r0, #0
 800d5be:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800d5c0:	4b0a      	ldr	r3, [pc, #40]	; (800d5ec <Cmd_SetStatus+0x4c>)
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800d5c6:	e00b      	b.n	800d5e0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800d5c8:	4b08      	ldr	r3, [pc, #32]	; (800d5ec <Cmd_SetStatus+0x4c>)
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800d5ce:	4b06      	ldr	r3, [pc, #24]	; (800d5e8 <Cmd_SetStatus+0x48>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d004      	beq.n	800d5e0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800d5d6:	4b04      	ldr	r3, [pc, #16]	; (800d5e8 <Cmd_SetStatus+0x48>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	2001      	movs	r0, #1
 800d5dc:	4798      	blx	r3
  return;
 800d5de:	bf00      	nop
 800d5e0:	bf00      	nop
}
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	200004dc 	.word	0x200004dc
 800d5ec:	2000030c 	.word	0x2000030c

0800d5f0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	f7f3 f87e 	bl	80006fa <shci_cmd_resp_release>

  return;
 800d5fe:	bf00      	nop
}
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
	...

0800d608 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800d610:	6879      	ldr	r1, [r7, #4]
 800d612:	4805      	ldr	r0, [pc, #20]	; (800d628 <TlUserEvtReceived+0x20>)
 800d614:	f000 fa9c 	bl	800db50 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d618:	4803      	ldr	r0, [pc, #12]	; (800d628 <TlUserEvtReceived+0x20>)
 800d61a:	f7f3 f862 	bl	80006e2 <shci_notify_asynch_evt>

  return;
 800d61e:	bf00      	nop
}
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	20000304 	.word	0x20000304

0800d62c <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
    TL_SHCI_CMD_DBG_MSG(" payload:");
    TL_SHCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 800d634:	bf00      	nop
}
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *p_rsp)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  switch(p_rsp->evtserial.evt.evtcode)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	7a5b      	ldrb	r3, [r3, #9]
 800d64c:	2b0e      	cmp	r3, #14
 800d64e:	d000      	beq.n	800d652 <OutputRspTrace+0x12>
      }
      break;

    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_rsp->evtserial.evt.evtcode);
      break;
 800d650:	e000      	b.n	800d654 <OutputRspTrace+0x14>
      break;
 800d652:	bf00      	nop
  }

  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 800d654:	bf00      	nop
}
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	7a5b      	ldrb	r3, [r3, #9]
 800d66c:	2bff      	cmp	r3, #255	; 0xff
 800d66e:	d100      	bne.n	800d672 <OutputEvtTrace+0x12>
    }
  }

  TL_SHCI_EVT_DBG_MSG("\r\n");

  return;
 800d670:	bf00      	nop
 800d672:	bf00      	nop
}
 800d674:	370c      	adds	r7, #12
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
	...

0800d680 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a05      	ldr	r2, [pc, #20]	; (800d6a0 <shci_register_io_bus+0x20>)
 800d68c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4a04      	ldr	r2, [pc, #16]	; (800d6a4 <shci_register_io_bus+0x24>)
 800d692:	611a      	str	r2, [r3, #16]

  return;
 800d694:	bf00      	nop
}
 800d696:	370c      	adds	r7, #12
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr
 800d6a0:	0800d805 	.word	0x0800d805
 800d6a4:	0800d859 	.word	0x0800d859

0800d6a8 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800d6ac:	f000 ffca 	bl	800e644 <HW_IPCC_Enable>

  return;
 800d6b0:	bf00      	nop
}
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <TL_Init>:


void TL_Init( void )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800d6b8:	4b10      	ldr	r3, [pc, #64]	; (800d6fc <TL_Init+0x48>)
 800d6ba:	4a11      	ldr	r2, [pc, #68]	; (800d700 <TL_Init+0x4c>)
 800d6bc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800d6be:	4b0f      	ldr	r3, [pc, #60]	; (800d6fc <TL_Init+0x48>)
 800d6c0:	4a10      	ldr	r2, [pc, #64]	; (800d704 <TL_Init+0x50>)
 800d6c2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800d6c4:	4b0d      	ldr	r3, [pc, #52]	; (800d6fc <TL_Init+0x48>)
 800d6c6:	4a10      	ldr	r2, [pc, #64]	; (800d708 <TL_Init+0x54>)
 800d6c8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800d6ca:	4b0c      	ldr	r3, [pc, #48]	; (800d6fc <TL_Init+0x48>)
 800d6cc:	4a0f      	ldr	r2, [pc, #60]	; (800d70c <TL_Init+0x58>)
 800d6ce:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800d6d0:	4b0a      	ldr	r3, [pc, #40]	; (800d6fc <TL_Init+0x48>)
 800d6d2:	4a0f      	ldr	r2, [pc, #60]	; (800d710 <TL_Init+0x5c>)
 800d6d4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800d6d6:	4b09      	ldr	r3, [pc, #36]	; (800d6fc <TL_Init+0x48>)
 800d6d8:	4a0e      	ldr	r2, [pc, #56]	; (800d714 <TL_Init+0x60>)
 800d6da:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800d6dc:	4b07      	ldr	r3, [pc, #28]	; (800d6fc <TL_Init+0x48>)
 800d6de:	4a0e      	ldr	r2, [pc, #56]	; (800d718 <TL_Init+0x64>)
 800d6e0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800d6e2:	4b06      	ldr	r3, [pc, #24]	; (800d6fc <TL_Init+0x48>)
 800d6e4:	4a0d      	ldr	r2, [pc, #52]	; (800d71c <TL_Init+0x68>)
 800d6e6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800d6e8:	4b04      	ldr	r3, [pc, #16]	; (800d6fc <TL_Init+0x48>)
 800d6ea:	4a0d      	ldr	r2, [pc, #52]	; (800d720 <TL_Init+0x6c>)
 800d6ec:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800d6ee:	4b03      	ldr	r3, [pc, #12]	; (800d6fc <TL_Init+0x48>)
 800d6f0:	4a0c      	ldr	r2, [pc, #48]	; (800d724 <TL_Init+0x70>)
 800d6f2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800d6f4:	f000 ffb6 	bl	800e664 <HW_IPCC_Init>

  return;
 800d6f8:	bf00      	nop
}
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	20030000 	.word	0x20030000
 800d700:	20030028 	.word	0x20030028
 800d704:	20030048 	.word	0x20030048
 800d708:	20030058 	.word	0x20030058
 800d70c:	20030064 	.word	0x20030064
 800d710:	2003006c 	.word	0x2003006c
 800d714:	20030074 	.word	0x20030074
 800d718:	2003007c 	.word	0x2003007c
 800d71c:	20030098 	.word	0x20030098
 800d720:	2003009c 	.word	0x2003009c
 800d724:	200300a8 	.word	0x200300a8

0800d728 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800d734:	4811      	ldr	r0, [pc, #68]	; (800d77c <TL_BLE_Init+0x54>)
 800d736:	f000 f9b7 	bl	800daa8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800d73a:	4b11      	ldr	r3, [pc, #68]	; (800d780 <TL_BLE_Init+0x58>)
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	689a      	ldr	r2, [r3, #8]
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	68da      	ldr	r2, [r3, #12]
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	4a0c      	ldr	r2, [pc, #48]	; (800d784 <TL_BLE_Init+0x5c>)
 800d754:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	4a08      	ldr	r2, [pc, #32]	; (800d77c <TL_BLE_Init+0x54>)
 800d75a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800d75c:	f000 ff98 	bl	800e690 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a08      	ldr	r2, [pc, #32]	; (800d788 <TL_BLE_Init+0x60>)
 800d766:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	4a07      	ldr	r2, [pc, #28]	; (800d78c <TL_BLE_Init+0x64>)
 800d76e:	6013      	str	r3, [r2, #0]

  return 0;
 800d770:	2300      	movs	r3, #0
}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	200300c4 	.word	0x200300c4
 800d780:	20030000 	.word	0x20030000
 800d784:	20030a48 	.word	0x20030a48
 800d788:	200004e8 	.word	0x200004e8
 800d78c:	200004ec 	.word	0x200004ec

0800d790 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	460b      	mov	r3, r1
 800d79a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800d79c:	4b05      	ldr	r3, [pc, #20]	; (800d7b4 <TL_BLE_SendCmd+0x24>)
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800d7a6:	f000 ff7d 	bl	800e6a4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	20030000 	.word	0x20030000

0800d7b8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800d7be:	e009      	b.n	800d7d4 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800d7c0:	1d3b      	adds	r3, r7, #4
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	4808      	ldr	r0, [pc, #32]	; (800d7e8 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800d7c6:	f000 fa06 	bl	800dbd6 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800d7ca:	4b08      	ldr	r3, [pc, #32]	; (800d7ec <HW_IPCC_BLE_RxEvtNot+0x34>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d7d4:	4804      	ldr	r0, [pc, #16]	; (800d7e8 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800d7d6:	f000 f977 	bl	800dac8 <LST_is_empty>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d0ef      	beq.n	800d7c0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800d7e0:	bf00      	nop
}
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	200300c4 	.word	0x200300c4
 800d7ec:	200004e8 	.word	0x200004e8

0800d7f0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800d7f4:	4b02      	ldr	r3, [pc, #8]	; (800d800 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4798      	blx	r3

  return;
 800d7fa:	bf00      	nop
}
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	200004ec 	.word	0x200004ec

0800d804 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800d810:	480d      	ldr	r0, [pc, #52]	; (800d848 <TL_SYS_Init+0x44>)
 800d812:	f000 f949 	bl	800daa8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800d816:	4b0d      	ldr	r3, [pc, #52]	; (800d84c <TL_SYS_Init+0x48>)
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	689a      	ldr	r2, [r3, #8]
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	4a08      	ldr	r2, [pc, #32]	; (800d848 <TL_SYS_Init+0x44>)
 800d828:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800d82a:	f000 ff5d 	bl	800e6e8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a07      	ldr	r2, [pc, #28]	; (800d850 <TL_SYS_Init+0x4c>)
 800d834:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	4a06      	ldr	r2, [pc, #24]	; (800d854 <TL_SYS_Init+0x50>)
 800d83c:	6013      	str	r3, [r2, #0]

  return 0;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	200300cc 	.word	0x200300cc
 800d84c:	20030000 	.word	0x20030000
 800d850:	200004f0 	.word	0x200004f0
 800d854:	200004f4 	.word	0x200004f4

0800d858 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	460b      	mov	r3, r1
 800d862:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800d864:	4b05      	ldr	r3, [pc, #20]	; (800d87c <TL_SYS_SendCmd+0x24>)
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2210      	movs	r2, #16
 800d86c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800d86e:	f000 ff45 	bl	800e6fc <HW_IPCC_SYS_SendCmd>

  return 0;
 800d872:	2300      	movs	r3, #0
}
 800d874:	4618      	mov	r0, r3
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	20030000 	.word	0x20030000

0800d880 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d884:	4b04      	ldr	r3, [pc, #16]	; (800d898 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a04      	ldr	r2, [pc, #16]	; (800d89c <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800d88a:	68d2      	ldr	r2, [r2, #12]
 800d88c:	6812      	ldr	r2, [r2, #0]
 800d88e:	4610      	mov	r0, r2
 800d890:	4798      	blx	r3

  return;
 800d892:	bf00      	nop
}
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	200004f0 	.word	0x200004f0
 800d89c:	20030000 	.word	0x20030000

0800d8a0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d8a6:	e009      	b.n	800d8bc <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800d8a8:	1d3b      	adds	r3, r7, #4
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	4808      	ldr	r0, [pc, #32]	; (800d8d0 <HW_IPCC_SYS_EvtNot+0x30>)
 800d8ae:	f000 f992 	bl	800dbd6 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800d8b2:	4b08      	ldr	r3, [pc, #32]	; (800d8d4 <HW_IPCC_SYS_EvtNot+0x34>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	4610      	mov	r0, r2
 800d8ba:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d8bc:	4804      	ldr	r0, [pc, #16]	; (800d8d0 <HW_IPCC_SYS_EvtNot+0x30>)
 800d8be:	f000 f903 	bl	800dac8 <LST_is_empty>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d0ef      	beq.n	800d8a8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800d8c8:	bf00      	nop
}
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	200300cc 	.word	0x200300cc
 800d8d4:	200004f4 	.word	0x200004f4

0800d8d8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800d8e0:	4817      	ldr	r0, [pc, #92]	; (800d940 <TL_MM_Init+0x68>)
 800d8e2:	f000 f8e1 	bl	800daa8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800d8e6:	4817      	ldr	r0, [pc, #92]	; (800d944 <TL_MM_Init+0x6c>)
 800d8e8:	f000 f8de 	bl	800daa8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800d8ec:	4b16      	ldr	r3, [pc, #88]	; (800d948 <TL_MM_Init+0x70>)
 800d8ee:	691b      	ldr	r3, [r3, #16]
 800d8f0:	4a16      	ldr	r2, [pc, #88]	; (800d94c <TL_MM_Init+0x74>)
 800d8f2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800d8f4:	4b15      	ldr	r3, [pc, #84]	; (800d94c <TL_MM_Init+0x74>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	6892      	ldr	r2, [r2, #8]
 800d8fc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800d8fe:	4b13      	ldr	r3, [pc, #76]	; (800d94c <TL_MM_Init+0x74>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	68d2      	ldr	r2, [r2, #12]
 800d906:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800d908:	4b10      	ldr	r3, [pc, #64]	; (800d94c <TL_MM_Init+0x74>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4a0c      	ldr	r2, [pc, #48]	; (800d940 <TL_MM_Init+0x68>)
 800d90e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800d910:	4b0e      	ldr	r3, [pc, #56]	; (800d94c <TL_MM_Init+0x74>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	6812      	ldr	r2, [r2, #0]
 800d918:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800d91a:	4b0c      	ldr	r3, [pc, #48]	; (800d94c <TL_MM_Init+0x74>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	6852      	ldr	r2, [r2, #4]
 800d922:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800d924:	4b09      	ldr	r3, [pc, #36]	; (800d94c <TL_MM_Init+0x74>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	687a      	ldr	r2, [r7, #4]
 800d92a:	6912      	ldr	r2, [r2, #16]
 800d92c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800d92e:	4b07      	ldr	r3, [pc, #28]	; (800d94c <TL_MM_Init+0x74>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	6952      	ldr	r2, [r2, #20]
 800d936:	619a      	str	r2, [r3, #24]

  return;
 800d938:	bf00      	nop
}
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	200300b4 	.word	0x200300b4
 800d944:	200004e0 	.word	0x200004e0
 800d948:	20030000 	.word	0x20030000
 800d94c:	200004f8 	.word	0x200004f8

0800d950 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800d958:	6879      	ldr	r1, [r7, #4]
 800d95a:	4806      	ldr	r0, [pc, #24]	; (800d974 <TL_MM_EvtDone+0x24>)
 800d95c:	f000 f8f8 	bl	800db50 <LST_insert_tail>

  OutputMemReleaseTrace(phcievt);
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 f82b 	bl	800d9bc <OutputMemReleaseTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800d966:	4804      	ldr	r0, [pc, #16]	; (800d978 <TL_MM_EvtDone+0x28>)
 800d968:	f000 feee 	bl	800e748 <HW_IPCC_MM_SendFreeBuf>

  return;
 800d96c:	bf00      	nop
}
 800d96e:	3708      	adds	r7, #8
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	200004e0 	.word	0x200004e0
 800d978:	0800d97d 	.word	0x0800d97d

0800d97c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d982:	e00c      	b.n	800d99e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800d984:	1d3b      	adds	r3, r7, #4
 800d986:	4619      	mov	r1, r3
 800d988:	480a      	ldr	r0, [pc, #40]	; (800d9b4 <SendFreeBuf+0x38>)
 800d98a:	f000 f924 	bl	800dbd6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800d98e:	4b0a      	ldr	r3, [pc, #40]	; (800d9b8 <SendFreeBuf+0x3c>)
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	691b      	ldr	r3, [r3, #16]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	4611      	mov	r1, r2
 800d998:	4618      	mov	r0, r3
 800d99a:	f000 f8d9 	bl	800db50 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d99e:	4805      	ldr	r0, [pc, #20]	; (800d9b4 <SendFreeBuf+0x38>)
 800d9a0:	f000 f892 	bl	800dac8 <LST_is_empty>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d0ec      	beq.n	800d984 <SendFreeBuf+0x8>
  }

  return;
 800d9aa:	bf00      	nop
}
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	200004e0 	.word	0x200004e0
 800d9b8:	20030000 	.word	0x20030000

0800d9bc <OutputMemReleaseTrace>:

static void OutputMemReleaseTrace(TL_EvtPacket_t * phcievt)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  switch(phcievt->evtserial.evt.evtcode)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	7a5b      	ldrb	r3, [r3, #9]
 800d9c8:	2b0f      	cmp	r3, #15
 800d9ca:	d004      	beq.n	800d9d6 <OutputMemReleaseTrace+0x1a>
 800d9cc:	2bff      	cmp	r3, #255	; 0xff
 800d9ce:	d004      	beq.n	800d9da <OutputMemReleaseTrace+0x1e>
 800d9d0:	2b0e      	cmp	r3, #14
 800d9d2:	d004      	beq.n	800d9de <OutputMemReleaseTrace+0x22>
      break;

    default:
      TL_MM_DBG__MSG("mm evt released: 0x%02X", phcievt->evtserial.evt.evtcode);
      TL_MM_DBG__MSG(" buffer addr: 0x%08X", phcievt);
      break;
 800d9d4:	e004      	b.n	800d9e0 <OutputMemReleaseTrace+0x24>
      break;
 800d9d6:	bf00      	nop
 800d9d8:	e002      	b.n	800d9e0 <OutputMemReleaseTrace+0x24>
      break;
 800d9da:	bf00      	nop
 800d9dc:	e000      	b.n	800d9e0 <OutputMemReleaseTrace+0x24>
      break;
 800d9de:	bf00      	nop
  }

  TL_MM_DBG__MSG("\r\n");

  return;
 800d9e0:	bf00      	nop
}
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800d9f0:	4805      	ldr	r0, [pc, #20]	; (800da08 <TL_TRACES_Init+0x1c>)
 800d9f2:	f000 f859 	bl	800daa8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800d9f6:	4b05      	ldr	r3, [pc, #20]	; (800da0c <TL_TRACES_Init+0x20>)
 800d9f8:	695b      	ldr	r3, [r3, #20]
 800d9fa:	4a03      	ldr	r2, [pc, #12]	; (800da08 <TL_TRACES_Init+0x1c>)
 800d9fc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800d9fe:	f000 fed9 	bl	800e7b4 <HW_IPCC_TRACES_Init>

  return;
 800da02:	bf00      	nop
}
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	200300bc 	.word	0x200300bc
 800da0c:	20030000 	.word	0x20030000

0800da10 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800da16:	e008      	b.n	800da2a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800da18:	1d3b      	adds	r3, r7, #4
 800da1a:	4619      	mov	r1, r3
 800da1c:	4808      	ldr	r0, [pc, #32]	; (800da40 <HW_IPCC_TRACES_EvtNot+0x30>)
 800da1e:	f000 f8da 	bl	800dbd6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4618      	mov	r0, r3
 800da26:	f000 f80d 	bl	800da44 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800da2a:	4805      	ldr	r0, [pc, #20]	; (800da40 <HW_IPCC_TRACES_EvtNot+0x30>)
 800da2c:	f000 f84c 	bl	800dac8 <LST_is_empty>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d0f0      	beq.n	800da18 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800da36:	bf00      	nop
}
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	200300bc 	.word	0x200300bc

0800da44 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800da4c:	bf00      	nop
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800da58:	b480      	push	{r7}
 800da5a:	b085      	sub	sp, #20
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	4603      	mov	r3, r0
 800da60:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800da62:	4b0f      	ldr	r3, [pc, #60]	; (800daa0 <OTP_Read+0x48>)
 800da64:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800da66:	e002      	b.n	800da6e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	3b08      	subs	r3, #8
 800da6c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	3307      	adds	r3, #7
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	79fa      	ldrb	r2, [r7, #7]
 800da76:	429a      	cmp	r2, r3
 800da78:	d003      	beq.n	800da82 <OTP_Read+0x2a>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	4a09      	ldr	r2, [pc, #36]	; (800daa4 <OTP_Read+0x4c>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d1f2      	bne.n	800da68 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	3307      	adds	r3, #7
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	79fa      	ldrb	r2, [r7, #7]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d001      	beq.n	800da92 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800da8e:	2300      	movs	r3, #0
 800da90:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800da92:	68fb      	ldr	r3, [r7, #12]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3714      	adds	r7, #20
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr
 800daa0:	1fff73f8 	.word	0x1fff73f8
 800daa4:	1fff7000 	.word	0x1fff7000

0800daa8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	605a      	str	r2, [r3, #4]
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800dac8:	b480      	push	{r7}
 800daca:	b087      	sub	sp, #28
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dad0:	f3ef 8310 	mrs	r3, PRIMASK
 800dad4:	60fb      	str	r3, [r7, #12]
  return(result);
 800dad6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dad8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800dada:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d102      	bne.n	800daec <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800dae6:	2301      	movs	r3, #1
 800dae8:	75fb      	strb	r3, [r7, #23]
 800daea:	e001      	b.n	800daf0 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800daec:	2300      	movs	r3, #0
 800daee:	75fb      	strb	r3, [r7, #23]
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	371c      	adds	r7, #28
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800db08:	b480      	push	{r7}
 800db0a:	b087      	sub	sp, #28
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db12:	f3ef 8310 	mrs	r3, PRIMASK
 800db16:	60fb      	str	r3, [r7, #12]
  return(result);
 800db18:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800db1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db1c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	683a      	ldr	r2, [r7, #0]
 800db30:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	683a      	ldr	r2, [r7, #0]
 800db38:	605a      	str	r2, [r3, #4]
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800db44:	bf00      	nop
 800db46:	371c      	adds	r7, #28
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800db50:	b480      	push	{r7}
 800db52:	b087      	sub	sp, #28
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db5a:	f3ef 8310 	mrs	r3, PRIMASK
 800db5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800db60:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800db62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db64:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	685a      	ldr	r2, [r3, #4]
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	683a      	ldr	r2, [r7, #0]
 800db78:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	683a      	ldr	r2, [r7, #0]
 800db80:	601a      	str	r2, [r3, #0]
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800db8c:	bf00      	nop
 800db8e:	371c      	adds	r7, #28
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800db98:	b480      	push	{r7}
 800db9a:	b087      	sub	sp, #28
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dba0:	f3ef 8310 	mrs	r3, PRIMASK
 800dba4:	60fb      	str	r3, [r7, #12]
  return(result);
 800dba6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dba8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbaa:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	6812      	ldr	r2, [r2, #0]
 800dbb4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	6852      	ldr	r2, [r2, #4]
 800dbbe:	605a      	str	r2, [r3, #4]
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dbca:	bf00      	nop
 800dbcc:	371c      	adds	r7, #28
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr

0800dbd6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800dbd6:	b580      	push	{r7, lr}
 800dbd8:	b086      	sub	sp, #24
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
 800dbde:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbe0:	f3ef 8310 	mrs	r3, PRIMASK
 800dbe4:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dbe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbea:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7ff ffcd 	bl	800db98 <LST_remove_node>
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dc08:	bf00      	nop
 800dc0a:	3718      	adds	r7, #24
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800dc10:	b480      	push	{r7}
 800dc12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800dc14:	4b03      	ldr	r3, [pc, #12]	; (800dc24 <LL_FLASH_GetUDN+0x14>)
 800dc16:	681b      	ldr	r3, [r3, #0]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	1fff7580 	.word	0x1fff7580

0800dc28 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800dc2c:	4b03      	ldr	r3, [pc, #12]	; (800dc3c <LL_FLASH_GetDeviceID+0x14>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	b2db      	uxtb	r3, r3
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	1fff7584 	.word	0x1fff7584

0800dc40 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800dc40:	b480      	push	{r7}
 800dc42:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800dc44:	4b03      	ldr	r3, [pc, #12]	; (800dc54 <LL_FLASH_GetSTCompanyID+0x14>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	0a1b      	lsrs	r3, r3, #8
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr
 800dc54:	1fff7584 	.word	0x1fff7584

0800dc58 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800dc58:	b5b0      	push	{r4, r5, r7, lr}
 800dc5a:	b08c      	sub	sp, #48	; 0x30
 800dc5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800dc5e:	4b28      	ldr	r3, [pc, #160]	; (800dd00 <APP_BLE_Init+0xa8>)
 800dc60:	463c      	mov	r4, r7
 800dc62:	461d      	mov	r5, r3
 800dc64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dc70:	c407      	stmia	r4!, {r0, r1, r2}
 800dc72:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800dc74:	f000 f8fe 	bl	800de74 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800dc78:	2101      	movs	r1, #1
 800dc7a:	2002      	movs	r0, #2
 800dc7c:	f001 fac8 	bl	800f210 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800dc80:	4a20      	ldr	r2, [pc, #128]	; (800dd04 <APP_BLE_Init+0xac>)
 800dc82:	2100      	movs	r1, #0
 800dc84:	2004      	movs	r0, #4
 800dc86:	f001 fbd1 	bl	800f42c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800dc8a:	463b      	mov	r3, r7
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7ff f9a1 	bl	800cfd4 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800dc92:	f000 f905 	bl	800dea0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800dc96:	f7ff f8fd 	bl	800ce94 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800dc9a:	4b1b      	ldr	r3, [pc, #108]	; (800dd08 <APP_BLE_Init+0xb0>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800dca2:	4b19      	ldr	r3, [pc, #100]	; (800dd08 <APP_BLE_Init+0xb0>)
 800dca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dca8:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800dcaa:	4a18      	ldr	r2, [pc, #96]	; (800dd0c <APP_BLE_Init+0xb4>)
 800dcac:	2100      	movs	r1, #0
 800dcae:	2001      	movs	r0, #1
 800dcb0:	f001 fbbc 	bl	800f42c <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800dcb4:	2006      	movs	r0, #6
 800dcb6:	f7fe fe02 	bl	800c8be <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800dcba:	f000 fb3d 	bl	800e338 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800dcbe:	4b14      	ldr	r3, [pc, #80]	; (800dd10 <APP_BLE_Init+0xb8>)
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	4914      	ldr	r1, [pc, #80]	; (800dd14 <APP_BLE_Init+0xbc>)
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	f7f3 fa35 	bl	8001134 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800dcca:	4b13      	ldr	r3, [pc, #76]	; (800dd18 <APP_BLE_Init+0xc0>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	4913      	ldr	r1, [pc, #76]	; (800dd1c <APP_BLE_Init+0xc4>)
 800dcd0:	2000      	movs	r0, #0
 800dcd2:	f7f3 fa2f 	bl	8001134 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800dcd6:	4b0c      	ldr	r3, [pc, #48]	; (800dd08 <APP_BLE_Init+0xb0>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800dcde:	4b0a      	ldr	r3, [pc, #40]	; (800dd08 <APP_BLE_Init+0xb0>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800dce6:	4b0e      	ldr	r3, [pc, #56]	; (800dd20 <APP_BLE_Init+0xc8>)
 800dce8:	2280      	movs	r2, #128	; 0x80
 800dcea:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800dcec:	4b0d      	ldr	r3, [pc, #52]	; (800dd24 <APP_BLE_Init+0xcc>)
 800dcee:	22a0      	movs	r2, #160	; 0xa0
 800dcf0:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800dcf2:	2001      	movs	r0, #1
 800dcf4:	f000 f9ae 	bl	800e054 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800dcf8:	bf00      	nop
}
 800dcfa:	3730      	adds	r7, #48	; 0x30
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bdb0      	pop	{r4, r5, r7, pc}
 800dd00:	08010988 	.word	0x08010988
 800dd04:	0800d069 	.word	0x0800d069
 800dd08:	20000318 	.word	0x20000318
 800dd0c:	0800e1c1 	.word	0x0800e1c1
 800dd10:	0800e1f5 	.word	0x0800e1f5
 800dd14:	200003a9 	.word	0x200003a9
 800dd18:	0800e205 	.word	0x0800e205
 800dd1c:	200003aa 	.word	0x200003aa
 800dd20:	200003ac 	.word	0x200003ac
 800dd24:	200003ae 	.word	0x200003ae

0800dd28 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08a      	sub	sp, #40	; 0x28
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800dd30:	2342      	movs	r3, #66	; 0x42
 800dd32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	2b3e      	cmp	r3, #62	; 0x3e
 800dd42:	d027      	beq.n	800dd94 <SVCCTL_App_Notification+0x6c>
 800dd44:	2bff      	cmp	r3, #255	; 0xff
 800dd46:	d076      	beq.n	800de36 <SVCCTL_App_Notification+0x10e>
 800dd48:	2b05      	cmp	r3, #5
 800dd4a:	d000      	beq.n	800dd4e <SVCCTL_App_Notification+0x26>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 800dd4c:	e086      	b.n	800de5c <SVCCTL_App_Notification+0x134>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800dd4e:	6a3b      	ldr	r3, [r7, #32]
 800dd50:	3302      	adds	r3, #2
 800dd52:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dd5a:	b29a      	uxth	r2, r3
 800dd5c:	4b42      	ldr	r3, [pc, #264]	; (800de68 <SVCCTL_App_Notification+0x140>)
 800dd5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d106      	bne.n	800dd72 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800dd64:	4b40      	ldr	r3, [pc, #256]	; (800de68 <SVCCTL_App_Notification+0x140>)
 800dd66:	2200      	movs	r2, #0
 800dd68:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800dd6a:	4b3f      	ldr	r3, [pc, #252]	; (800de68 <SVCCTL_App_Notification+0x140>)
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800dd72:	2001      	movs	r0, #1
 800dd74:	f000 f96e 	bl	800e054 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800dd78:	4b3c      	ldr	r3, [pc, #240]	; (800de6c <SVCCTL_App_Notification+0x144>)
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800dd7e:	4b3a      	ldr	r3, [pc, #232]	; (800de68 <SVCCTL_App_Notification+0x140>)
 800dd80:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800dd82:	4b3a      	ldr	r3, [pc, #232]	; (800de6c <SVCCTL_App_Notification+0x144>)
 800dd84:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 800dd86:	4839      	ldr	r0, [pc, #228]	; (800de6c <SVCCTL_App_Notification+0x144>)
 800dd88:	f000 fac2 	bl	800e310 <P2PS_APP_Notification>
      bleStatus = 0;
 800dd8c:	4b38      	ldr	r3, [pc, #224]	; (800de70 <SVCCTL_App_Notification+0x148>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	701a      	strb	r2, [r3, #0]
    break; /* EVT_DISCONN_COMPLETE */
 800dd92:	e063      	b.n	800de5c <SVCCTL_App_Notification+0x134>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800dd94:	6a3b      	ldr	r3, [r7, #32]
 800dd96:	3302      	adds	r3, #2
 800dd98:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	2b03      	cmp	r3, #3
 800dda0:	d045      	beq.n	800de2e <SVCCTL_App_Notification+0x106>
 800dda2:	2b0c      	cmp	r3, #12
 800dda4:	d002      	beq.n	800ddac <SVCCTL_App_Notification+0x84>
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d016      	beq.n	800ddd8 <SVCCTL_App_Notification+0xb0>
          break;
 800ddaa:	e043      	b.n	800de34 <SVCCTL_App_Notification+0x10c>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800ddac:	69bb      	ldr	r3, [r7, #24]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800ddb2:	4b2d      	ldr	r3, [pc, #180]	; (800de68 <SVCCTL_App_Notification+0x140>)
 800ddb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ddb6:	f107 020a 	add.w	r2, r7, #10
 800ddba:	f107 010b 	add.w	r1, r7, #11
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7fe fdeb 	bl	800c99a <hci_le_read_phy>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800ddca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d12f      	bne.n	800de32 <SVCCTL_App_Notification+0x10a>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800ddd2:	7afb      	ldrb	r3, [r7, #11]
 800ddd4:	2b02      	cmp	r3, #2
          break;
 800ddd6:	e02c      	b.n	800de32 <SVCCTL_App_Notification+0x10a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	3301      	adds	r3, #1
 800dddc:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800ddde:	4b22      	ldr	r3, [pc, #136]	; (800de68 <SVCCTL_App_Notification+0x140>)
 800dde0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7f3 fa1b 	bl	8001220 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800ddea:	4b1f      	ldr	r3, [pc, #124]	; (800de68 <SVCCTL_App_Notification+0x140>)
 800ddec:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ddf0:	2b04      	cmp	r3, #4
 800ddf2:	d104      	bne.n	800ddfe <SVCCTL_App_Notification+0xd6>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800ddf4:	4b1c      	ldr	r3, [pc, #112]	; (800de68 <SVCCTL_App_Notification+0x140>)
 800ddf6:	2206      	movs	r2, #6
 800ddf8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800ddfc:	e003      	b.n	800de06 <SVCCTL_App_Notification+0xde>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800ddfe:	4b1a      	ldr	r3, [pc, #104]	; (800de68 <SVCCTL_App_Notification+0x140>)
 800de00:	2205      	movs	r2, #5
 800de02:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	4b16      	ldr	r3, [pc, #88]	; (800de68 <SVCCTL_App_Notification+0x140>)
 800de10:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800de12:	4b16      	ldr	r3, [pc, #88]	; (800de6c <SVCCTL_App_Notification+0x144>)
 800de14:	2200      	movs	r2, #0
 800de16:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800de18:	4b13      	ldr	r3, [pc, #76]	; (800de68 <SVCCTL_App_Notification+0x140>)
 800de1a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800de1c:	4b13      	ldr	r3, [pc, #76]	; (800de6c <SVCCTL_App_Notification+0x144>)
 800de1e:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800de20:	4812      	ldr	r0, [pc, #72]	; (800de6c <SVCCTL_App_Notification+0x144>)
 800de22:	f000 fa75 	bl	800e310 <P2PS_APP_Notification>
          bleStatus = 1;
 800de26:	4b12      	ldr	r3, [pc, #72]	; (800de70 <SVCCTL_App_Notification+0x148>)
 800de28:	2201      	movs	r2, #1
 800de2a:	701a      	strb	r2, [r3, #0]
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800de2c:	e002      	b.n	800de34 <SVCCTL_App_Notification+0x10c>
          break;
 800de2e:	bf00      	nop
 800de30:	e014      	b.n	800de5c <SVCCTL_App_Notification+0x134>
          break;
 800de32:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800de34:	e012      	b.n	800de5c <SVCCTL_App_Notification+0x134>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800de36:	6a3b      	ldr	r3, [r7, #32]
 800de38:	3302      	adds	r3, #2
 800de3a:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	881b      	ldrh	r3, [r3, #0]
 800de40:	b29b      	uxth	r3, r3
 800de42:	f240 4207 	movw	r2, #1031	; 0x407
 800de46:	4293      	cmp	r3, r2
 800de48:	d004      	beq.n	800de54 <SVCCTL_App_Notification+0x12c>
 800de4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de4e:	d003      	beq.n	800de58 <SVCCTL_App_Notification+0x130>
 800de50:	2b04      	cmp	r3, #4
          break; /* RADIO_ACTIVITY_EVENT */
 800de52:	e002      	b.n	800de5a <SVCCTL_App_Notification+0x132>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800de54:	bf00      	nop
 800de56:	e000      	b.n	800de5a <SVCCTL_App_Notification+0x132>
      break;
 800de58:	bf00      	nop
      break; /* EVT_VENDOR */
 800de5a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800de5c:	2301      	movs	r3, #1
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3728      	adds	r7, #40	; 0x28
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	20000318 	.word	0x20000318
 800de6c:	20000970 	.word	0x20000970
 800de70:	20000824 	.word	0x20000824

0800de74 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800de7a:	4b06      	ldr	r3, [pc, #24]	; (800de94 <Ble_Tl_Init+0x20>)
 800de7c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800de7e:	4b06      	ldr	r3, [pc, #24]	; (800de98 <Ble_Tl_Init+0x24>)
 800de80:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800de82:	463b      	mov	r3, r7
 800de84:	4619      	mov	r1, r3
 800de86:	4805      	ldr	r0, [pc, #20]	; (800de9c <Ble_Tl_Init+0x28>)
 800de88:	f7ff f8d2 	bl	800d030 <hci_init>

  return;
 800de8c:	bf00      	nop
}
 800de8e:	3708      	adds	r7, #8
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	200300d4 	.word	0x200300d4
 800de98:	0800e28f 	.word	0x0800e28f
 800de9c:	0800e257 	.word	0x0800e257

0800dea0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800dea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dea2:	b091      	sub	sp, #68	; 0x44
 800dea4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800dea6:	2300      	movs	r3, #0
 800dea8:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800deaa:	f7fe fd52 	bl	800c952 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800deae:	f000 f943 	bl	800e138 <BleGetBdAddress>
 800deb2:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800deb4:	6a3a      	ldr	r2, [r7, #32]
 800deb6:	2106      	movs	r1, #6
 800deb8:	2000      	movs	r0, #0
 800deba:	f7fe fc40 	bl	800c73e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800debe:	6a3b      	ldr	r3, [r7, #32]
 800dec0:	795a      	ldrb	r2, [r3, #5]
 800dec2:	4b5e      	ldr	r3, [pc, #376]	; (800e03c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800dec4:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	791a      	ldrb	r2, [r3, #4]
 800deca:	4b5c      	ldr	r3, [pc, #368]	; (800e03c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800decc:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800dece:	6a3b      	ldr	r3, [r7, #32]
 800ded0:	78da      	ldrb	r2, [r3, #3]
 800ded2:	4b5a      	ldr	r3, [pc, #360]	; (800e03c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ded4:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800ded6:	6a3b      	ldr	r3, [r7, #32]
 800ded8:	789a      	ldrb	r2, [r3, #2]
 800deda:	4b58      	ldr	r3, [pc, #352]	; (800e03c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800dedc:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800dede:	6a3b      	ldr	r3, [r7, #32]
 800dee0:	785a      	ldrb	r2, [r3, #1]
 800dee2:	4b56      	ldr	r3, [pc, #344]	; (800e03c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800dee4:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800dee6:	6a3b      	ldr	r3, [r7, #32]
 800dee8:	781a      	ldrb	r2, [r3, #0]
 800deea:	4b54      	ldr	r3, [pc, #336]	; (800e03c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800deec:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800deee:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800def2:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800def4:	f7ff fe8c 	bl	800dc10 <LL_FLASH_GetUDN>
 800def8:	4603      	mov	r3, r0
 800defa:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800defc:	f107 0308 	add.w	r3, r7, #8
 800df00:	461a      	mov	r2, r3
 800df02:	2106      	movs	r1, #6
 800df04:	202e      	movs	r0, #46	; 0x2e
 800df06:	f7fe fc1a 	bl	800c73e <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800df0a:	4a4d      	ldr	r2, [pc, #308]	; (800e040 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800df0c:	2110      	movs	r1, #16
 800df0e:	2018      	movs	r0, #24
 800df10:	f7fe fc15 	bl	800c73e <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800df14:	4a4b      	ldr	r2, [pc, #300]	; (800e044 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800df16:	2110      	movs	r1, #16
 800df18:	2008      	movs	r0, #8
 800df1a:	f7fe fc10 	bl	800c73e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800df1e:	2118      	movs	r1, #24
 800df20:	2001      	movs	r0, #1
 800df22:	f7fe fc75 	bl	800c810 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800df26:	f7fe f9c5 	bl	800c2b4 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800df2a:	2300      	movs	r3, #0
 800df2c:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800df2e:	7ffb      	ldrb	r3, [r7, #31]
 800df30:	f043 0301 	orr.w	r3, r3, #1
 800df34:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800df36:	7ffb      	ldrb	r3, [r7, #31]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d01e      	beq.n	800df7a <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "ATPen";
 800df3c:	4b42      	ldr	r3, [pc, #264]	; (800e048 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800df3e:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800df40:	f107 0216 	add.w	r2, r7, #22
 800df44:	7ff8      	ldrb	r0, [r7, #31]
 800df46:	f107 0312 	add.w	r3, r7, #18
 800df4a:	9301      	str	r3, [sp, #4]
 800df4c:	f107 0314 	add.w	r3, r7, #20
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	4613      	mov	r3, r2
 800df54:	2207      	movs	r2, #7
 800df56:	2100      	movs	r1, #0
 800df58:	f7fe f8a1 	bl	800c09e <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800df5c:	8afc      	ldrh	r4, [r7, #22]
 800df5e:	8abd      	ldrh	r5, [r7, #20]
 800df60:	69b8      	ldr	r0, [r7, #24]
 800df62:	f7f2 f90d 	bl	8000180 <strlen>
 800df66:	4603      	mov	r3, r0
 800df68:	b2da      	uxtb	r2, r3
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	9300      	str	r3, [sp, #0]
 800df6e:	4613      	mov	r3, r2
 800df70:	2200      	movs	r2, #0
 800df72:	4629      	mov	r1, r5
 800df74:	4620      	mov	r0, r4
 800df76:	f7fe fb5b 	bl	800c630 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800df7a:	8af8      	ldrh	r0, [r7, #22]
 800df7c:	8a79      	ldrh	r1, [r7, #18]
 800df7e:	1d3b      	adds	r3, r7, #4
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	2302      	movs	r3, #2
 800df84:	2200      	movs	r2, #0
 800df86:	f7fe fb53 	bl	800c630 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800df8a:	2202      	movs	r2, #2
 800df8c:	2102      	movs	r1, #2
 800df8e:	2000      	movs	r0, #0
 800df90:	f7fe fd6b 	bl	800ca6a <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800df94:	4b2d      	ldr	r3, [pc, #180]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800df96:	2201      	movs	r2, #1
 800df98:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800df9a:	4b2c      	ldr	r3, [pc, #176]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fd ff8b 	bl	800beba <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800dfa4:	4b29      	ldr	r3, [pc, #164]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800dfaa:	4b28      	ldr	r3, [pc, #160]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800dfac:	2200      	movs	r2, #0
 800dfae:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800dfb0:	4b26      	ldr	r3, [pc, #152]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800dfb2:	2208      	movs	r2, #8
 800dfb4:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800dfb6:	4b25      	ldr	r3, [pc, #148]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800dfb8:	2210      	movs	r2, #16
 800dfba:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800dfbc:	4b23      	ldr	r3, [pc, #140]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800dfc2:	4b22      	ldr	r3, [pc, #136]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800dfc4:	4a22      	ldr	r2, [pc, #136]	; (800e050 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800dfc6:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800dfc8:	4b20      	ldr	r3, [pc, #128]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800dfce:	2300      	movs	r3, #0
 800dfd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfd4:	e00b      	b.n	800dfee <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800dfd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfda:	4a1c      	ldr	r2, [pc, #112]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800dfdc:	4413      	add	r3, r2
 800dfde:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dfe2:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800dfe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfe8:	3301      	adds	r3, #1
 800dfea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dff2:	2b0f      	cmp	r3, #15
 800dff4:	d9ef      	bls.n	800dfd6 <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800dff6:	4b15      	ldr	r3, [pc, #84]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800dff8:	789d      	ldrb	r5, [r3, #2]
 800dffa:	4b14      	ldr	r3, [pc, #80]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800dffc:	785e      	ldrb	r6, [r3, #1]
 800dffe:	4b13      	ldr	r3, [pc, #76]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e000:	7d5b      	ldrb	r3, [r3, #21]
 800e002:	4a12      	ldr	r2, [pc, #72]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e004:	7d92      	ldrb	r2, [r2, #22]
 800e006:	4911      	ldr	r1, [pc, #68]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e008:	7d09      	ldrb	r1, [r1, #20]
 800e00a:	4810      	ldr	r0, [pc, #64]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e00c:	6980      	ldr	r0, [r0, #24]
 800e00e:	2400      	movs	r4, #0
 800e010:	9404      	str	r4, [sp, #16]
 800e012:	9003      	str	r0, [sp, #12]
 800e014:	9102      	str	r1, [sp, #8]
 800e016:	9201      	str	r2, [sp, #4]
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	2300      	movs	r3, #0
 800e01c:	2201      	movs	r2, #1
 800e01e:	4631      	mov	r1, r6
 800e020:	4628      	mov	r0, r5
 800e022:	f7fd ff94 	bl	800bf4e <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800e026:	4b09      	ldr	r3, [pc, #36]	; (800e04c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800e028:	789b      	ldrb	r3, [r3, #2]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d001      	beq.n	800e032 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800e02e:	f7fe f91d 	bl	800c26c <aci_gap_configure_whitelist>
   }
}
 800e032:	bf00      	nop
 800e034:	372c      	adds	r7, #44	; 0x2c
 800e036:	46bd      	mov	sp, r7
 800e038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e03a:	bf00      	nop
 800e03c:	20000144 	.word	0x20000144
 800e040:	08011888 	.word	0x08011888
 800e044:	08011898 	.word	0x08011898
 800e048:	080109b8 	.word	0x080109b8
 800e04c:	20000318 	.word	0x20000318
 800e050:	0001b207 	.word	0x0001b207

0800e054 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b08c      	sub	sp, #48	; 0x30
 800e058:	af08      	add	r7, sp, #32
 800e05a:	4603      	mov	r3, r0
 800e05c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e05e:	2342      	movs	r3, #66	; 0x42
 800e060:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 800e062:	79fb      	ldrb	r3, [r7, #7]
 800e064:	2b01      	cmp	r3, #1
 800e066:	d106      	bne.n	800e076 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800e068:	4b2c      	ldr	r3, [pc, #176]	; (800e11c <Adv_Request+0xc8>)
 800e06a:	881b      	ldrh	r3, [r3, #0]
 800e06c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800e06e:	4b2c      	ldr	r3, [pc, #176]	; (800e120 <Adv_Request+0xcc>)
 800e070:	881b      	ldrh	r3, [r3, #0]
 800e072:	81bb      	strh	r3, [r7, #12]
 800e074:	e005      	b.n	800e082 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800e076:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800e07a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800e07c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e080:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800e082:	4b28      	ldr	r3, [pc, #160]	; (800e124 <Adv_Request+0xd0>)
 800e084:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e088:	4618      	mov	r0, r3
 800e08a:	f7f3 f8c9 	bl	8001220 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800e08e:	79fb      	ldrb	r3, [r7, #7]
 800e090:	2b02      	cmp	r3, #2
 800e092:	d10d      	bne.n	800e0b0 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800e094:	4b23      	ldr	r3, [pc, #140]	; (800e124 <Adv_Request+0xd0>)
 800e096:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d004      	beq.n	800e0a8 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800e09e:	4b21      	ldr	r3, [pc, #132]	; (800e124 <Adv_Request+0xd0>)
 800e0a0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d103      	bne.n	800e0b0 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800e0a8:	f7fd fe05 	bl	800bcb6 <aci_gap_set_non_discoverable>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800e0b0:	4a1c      	ldr	r2, [pc, #112]	; (800e124 <Adv_Request+0xd0>)
 800e0b2:	79fb      	ldrb	r3, [r7, #7]
 800e0b4:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800e0b8:	4b1a      	ldr	r3, [pc, #104]	; (800e124 <Adv_Request+0xd0>)
 800e0ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0be:	89b8      	ldrh	r0, [r7, #12]
 800e0c0:	89f9      	ldrh	r1, [r7, #14]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	9206      	str	r2, [sp, #24]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	9205      	str	r2, [sp, #20]
 800e0ca:	4a17      	ldr	r2, [pc, #92]	; (800e128 <Adv_Request+0xd4>)
 800e0cc:	9204      	str	r2, [sp, #16]
 800e0ce:	9303      	str	r3, [sp, #12]
 800e0d0:	4b16      	ldr	r3, [pc, #88]	; (800e12c <Adv_Request+0xd8>)
 800e0d2:	9302      	str	r3, [sp, #8]
 800e0d4:	2306      	movs	r3, #6
 800e0d6:	9301      	str	r3, [sp, #4]
 800e0d8:	2300      	movs	r3, #0
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	2300      	movs	r3, #0
 800e0de:	4602      	mov	r2, r0
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	f7fd fe0c 	bl	800bcfe <aci_gap_set_discoverable>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800e0ea:	4911      	ldr	r1, [pc, #68]	; (800e130 <Adv_Request+0xdc>)
 800e0ec:	200e      	movs	r0, #14
 800e0ee:	f7fe f861 	bl	800c1b4 <aci_gap_update_adv_data>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800e0f6:	7afb      	ldrb	r3, [r7, #11]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d10a      	bne.n	800e112 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800e0fc:	79fb      	ldrb	r3, [r7, #7]
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d107      	bne.n	800e112 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800e102:	4b08      	ldr	r3, [pc, #32]	; (800e124 <Adv_Request+0xd0>)
 800e104:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e108:	490a      	ldr	r1, [pc, #40]	; (800e134 <Adv_Request+0xe0>)
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7f3 f912 	bl	8001334 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800e110:	bf00      	nop
 800e112:	bf00      	nop
}
 800e114:	3710      	adds	r7, #16
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	200003ac 	.word	0x200003ac
 800e120:	200003ae 	.word	0x200003ae
 800e124:	20000318 	.word	0x20000318
 800e128:	20000341 	.word	0x20000341
 800e12c:	080118a8 	.word	0x080118a8
 800e130:	20000144 	.word	0x20000144
 800e134:	0001e046 	.word	0x0001e046

0800e138 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b086      	sub	sp, #24
 800e13c:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800e13e:	f7ff fd67 	bl	800dc10 <LL_FLASH_GetUDN>
 800e142:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e14a:	d023      	beq.n	800e194 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800e14c:	f7ff fd78 	bl	800dc40 <LL_FLASH_GetSTCompanyID>
 800e150:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800e152:	f7ff fd69 	bl	800dc28 <LL_FLASH_GetDeviceID>
 800e156:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	b2da      	uxtb	r2, r3
 800e15c:	4b16      	ldr	r3, [pc, #88]	; (800e1b8 <BleGetBdAddress+0x80>)
 800e15e:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	0a1b      	lsrs	r3, r3, #8
 800e164:	b2da      	uxtb	r2, r3
 800e166:	4b14      	ldr	r3, [pc, #80]	; (800e1b8 <BleGetBdAddress+0x80>)
 800e168:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	0c1b      	lsrs	r3, r3, #16
 800e16e:	b2da      	uxtb	r2, r3
 800e170:	4b11      	ldr	r3, [pc, #68]	; (800e1b8 <BleGetBdAddress+0x80>)
 800e172:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	b2da      	uxtb	r2, r3
 800e178:	4b0f      	ldr	r3, [pc, #60]	; (800e1b8 <BleGetBdAddress+0x80>)
 800e17a:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	4b0d      	ldr	r3, [pc, #52]	; (800e1b8 <BleGetBdAddress+0x80>)
 800e182:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	0a1b      	lsrs	r3, r3, #8
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	4b0b      	ldr	r3, [pc, #44]	; (800e1b8 <BleGetBdAddress+0x80>)
 800e18c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800e18e:	4b0a      	ldr	r3, [pc, #40]	; (800e1b8 <BleGetBdAddress+0x80>)
 800e190:	617b      	str	r3, [r7, #20]
 800e192:	e00b      	b.n	800e1ac <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800e194:	2000      	movs	r0, #0
 800e196:	f7ff fc5f 	bl	800da58 <OTP_Read>
 800e19a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d002      	beq.n	800e1a8 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	617b      	str	r3, [r7, #20]
 800e1a6:	e001      	b.n	800e1ac <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800e1a8:	4b04      	ldr	r3, [pc, #16]	; (800e1bc <BleGetBdAddress+0x84>)
 800e1aa:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800e1ac:	697b      	ldr	r3, [r7, #20]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3718      	adds	r7, #24
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	200004fc 	.word	0x200004fc
 800e1bc:	08011880 	.word	0x08011880

0800e1c0 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800e1c6:	4b0a      	ldr	r3, [pc, #40]	; (800e1f0 <Adv_Cancel+0x30>)
 800e1c8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e1cc:	2b05      	cmp	r3, #5
 800e1ce:	d00a      	beq.n	800e1e6 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800e1d4:	f7fd fd6f 	bl	800bcb6 <aci_gap_set_non_discoverable>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800e1dc:	4b04      	ldr	r3, [pc, #16]	; (800e1f0 <Adv_Cancel+0x30>)
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800e1e4:	bf00      	nop
 800e1e6:	bf00      	nop
}
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	20000318 	.word	0x20000318

0800e1f4 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	2001      	movs	r0, #1
 800e1fc:	f001 f936 	bl	800f46c <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800e200:	bf00      	nop
}
 800e202:	bd80      	pop	{r7, pc}

0800e204 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800e204:	b480      	push	{r7}
 800e206:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800e208:	bf00      	nop
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr

0800e212 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b082      	sub	sp, #8
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800e21a:	2100      	movs	r1, #0
 800e21c:	2004      	movs	r0, #4
 800e21e:	f001 f925 	bl	800f46c <UTIL_SEQ_SetTask>
  return;
 800e222:	bf00      	nop
}
 800e224:	3708      	adds	r7, #8
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b082      	sub	sp, #8
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800e232:	2001      	movs	r0, #1
 800e234:	f001 f980 	bl	800f538 <UTIL_SEQ_SetEvt>
  return;
 800e238:	bf00      	nop
}
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800e248:	2001      	movs	r0, #1
 800e24a:	f001 f993 	bl	800f574 <UTIL_SEQ_WaitEvt>
  return;
 800e24e:	bf00      	nop
}
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b084      	sub	sp, #16
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	3308      	adds	r3, #8
 800e268:	4618      	mov	r0, r3
 800e26a:	f7fe fe61 	bl	800cf30 <SVCCTL_UserEvtRx>
 800e26e:	4603      	mov	r3, r0
 800e270:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800e272:	7afb      	ldrb	r3, [r7, #11]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d003      	beq.n	800e280 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2201      	movs	r2, #1
 800e27c:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800e27e:	e002      	b.n	800e286 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2200      	movs	r2, #0
 800e284:	701a      	strb	r2, [r3, #0]
}
 800e286:	bf00      	nop
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b084      	sub	sp, #16
 800e292:	af00      	add	r7, sp, #0
 800e294:	4603      	mov	r3, r0
 800e296:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800e298:	79fb      	ldrb	r3, [r7, #7]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d002      	beq.n	800e2a4 <BLE_StatusNot+0x16>
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d006      	beq.n	800e2b0 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800e2a2:	e00b      	b.n	800e2bc <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800e2a4:	2307      	movs	r3, #7
 800e2a6:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f001 f909 	bl	800f4c0 <UTIL_SEQ_PauseTask>
      break;
 800e2ae:	e005      	b.n	800e2bc <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800e2b0:	2307      	movs	r3, #7
 800e2b2:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800e2b4:	68f8      	ldr	r0, [r7, #12]
 800e2b6:	f001 f921 	bl	800f4fc <UTIL_SEQ_ResumeTask>
      break;
 800e2ba:	bf00      	nop
  }
  return;
 800e2bc:	bf00      	nop
}
 800e2be:	3710      	adds	r7, #16
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <P2PS_STM_App_Notification>:
static void P2PS_Send_Notification( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d012      	beq.n	800e2fa <P2PS_STM_App_Notification+0x36>
 800e2d4:	2b03      	cmp	r3, #3
 800e2d6:	d002      	beq.n	800e2de <P2PS_STM_App_Notification+0x1a>
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d010      	beq.n	800e2fe <P2PS_STM_App_Notification+0x3a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800e2dc:	e010      	b.n	800e300 <P2PS_STM_App_Notification+0x3c>
    	if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d103      	bne.n	800e2f2 <P2PS_STM_App_Notification+0x2e>
    		ledStatus = 1;
 800e2ea:	4b08      	ldr	r3, [pc, #32]	; (800e30c <P2PS_STM_App_Notification+0x48>)
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	701a      	strb	r2, [r3, #0]
      break;
 800e2f0:	e006      	b.n	800e300 <P2PS_STM_App_Notification+0x3c>
    		ledStatus = 0;
 800e2f2:	4b06      	ldr	r3, [pc, #24]	; (800e30c <P2PS_STM_App_Notification+0x48>)
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	701a      	strb	r2, [r3, #0]
      break;
 800e2f8:	e002      	b.n	800e300 <P2PS_STM_App_Notification+0x3c>
      break;
 800e2fa:	bf00      	nop
 800e2fc:	e000      	b.n	800e300 <P2PS_STM_App_Notification+0x3c>
      break;
 800e2fe:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800e300:	bf00      	nop
}
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr
 800e30c:	20000415 	.word	0x20000415

0800e310 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d002      	beq.n	800e326 <P2PS_APP_Notification+0x16>
 800e320:	2b01      	cmp	r3, #1
 800e322:	d002      	beq.n	800e32a <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800e324:	e002      	b.n	800e32c <P2PS_APP_Notification+0x1c>
    break;
 800e326:	bf00      	nop
 800e328:	e000      	b.n	800e32c <P2PS_APP_Notification+0x1c>
    break;
 800e32a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800e32c:	bf00      	nop
}
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU,
 800e33c:	4a03      	ldr	r2, [pc, #12]	; (800e34c <P2PS_APP_Init+0x14>)
 800e33e:	2100      	movs	r1, #0
 800e340:	2002      	movs	r0, #2
 800e342:	f001 f873 	bl	800f42c <UTIL_SEQ_RegTask>
	P2PS_Send_Notification );
/* USER CODE END P2PS_APP_Init */
  return;
 800e346:	bf00      	nop
}
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	0800e351 	.word	0x0800e351

0800e350 <P2PS_Send_Notification>:

/* USER CODE BEGIN FD */
void P2PS_Send_Notification(void)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	af00      	add	r7, sp, #0
	P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, 0x00);
 800e354:	2100      	movs	r1, #0
 800e356:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800e35a:	f7fe fd0f 	bl	800cd7c <P2PS_STM_App_Update_Char>
	return;
 800e35e:	bf00      	nop
}
 800e360:	bd80      	pop	{r7, pc}
	...

0800e364 <LL_PWR_EnableBootC2>:
{
 800e364:	b480      	push	{r7}
 800e366:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800e368:	4b05      	ldr	r3, [pc, #20]	; (800e380 <LL_PWR_EnableBootC2+0x1c>)
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	4a04      	ldr	r2, [pc, #16]	; (800e380 <LL_PWR_EnableBootC2+0x1c>)
 800e36e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e372:	60d3      	str	r3, [r2, #12]
}
 800e374:	bf00      	nop
 800e376:	46bd      	mov	sp, r7
 800e378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37c:	4770      	bx	lr
 800e37e:	bf00      	nop
 800e380:	58000400 	.word	0x58000400

0800e384 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800e38c:	4b06      	ldr	r3, [pc, #24]	; (800e3a8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e38e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800e392:	4905      	ldr	r1, [pc, #20]	; (800e3a8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	4313      	orrs	r3, r2
 800e398:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr
 800e3a8:	58000800 	.word	0x58000800

0800e3ac <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800e3b4:	4b05      	ldr	r3, [pc, #20]	; (800e3cc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e3b6:	6a1a      	ldr	r2, [r3, #32]
 800e3b8:	4904      	ldr	r1, [pc, #16]	; (800e3cc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	620b      	str	r3, [r1, #32]
}
 800e3c0:	bf00      	nop
 800e3c2:	370c      	adds	r7, #12
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr
 800e3cc:	58000800 	.word	0x58000800

0800e3d0 <LL_AHB3_GRP1_EnableClock>:
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b085      	sub	sp, #20
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800e3d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800e3e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	4013      	ands	r3, r2
 800e3f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
}
 800e3f6:	bf00      	nop
 800e3f8:	3714      	adds	r7, #20
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr

0800e402 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800e402:	b480      	push	{r7}
 800e404:	b083      	sub	sp, #12
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	601a      	str	r2, [r3, #0]
}
 800e416:	bf00      	nop
 800e418:	370c      	adds	r7, #12
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr

0800e422 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800e422:	b480      	push	{r7}
 800e424:	b083      	sub	sp, #12
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f043 0201 	orr.w	r2, r3, #1
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	601a      	str	r2, [r3, #0]
}
 800e436:	bf00      	nop
 800e438:	370c      	adds	r7, #12
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr

0800e442 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e442:	b480      	push	{r7}
 800e444:	b083      	sub	sp, #12
 800e446:	af00      	add	r7, sp, #0
 800e448:	6078      	str	r0, [r7, #4]
 800e44a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	685a      	ldr	r2, [r3, #4]
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	041b      	lsls	r3, r3, #16
 800e454:	43db      	mvns	r3, r3
 800e456:	401a      	ands	r2, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	605a      	str	r2, [r3, #4]
}
 800e45c:	bf00      	nop
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	685a      	ldr	r2, [r3, #4]
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	041b      	lsls	r3, r3, #16
 800e47a:	431a      	orrs	r2, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	605a      	str	r2, [r3, #4]
}
 800e480:	bf00      	nop
 800e482:	370c      	adds	r7, #12
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	685a      	ldr	r2, [r3, #4]
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	43db      	mvns	r3, r3
 800e49e:	401a      	ands	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	605a      	str	r2, [r3, #4]
}
 800e4a4:	bf00      	nop
 800e4a6:	370c      	adds	r7, #12
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr

0800e4b0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	683a      	ldr	r2, [r7, #0]
 800e4be:	609a      	str	r2, [r3, #8]
}
 800e4c0:	bf00      	nop
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr

0800e4cc <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b083      	sub	sp, #12
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	041a      	lsls	r2, r3, #16
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	609a      	str	r2, [r3, #8]
}
 800e4de:	bf00      	nop
 800e4e0:	370c      	adds	r7, #12
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr

0800e4ea <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e4ea:	b480      	push	{r7}
 800e4ec:	b083      	sub	sp, #12
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]
 800e4f2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	68da      	ldr	r2, [r3, #12]
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	4013      	ands	r3, r2
 800e4fc:	683a      	ldr	r2, [r7, #0]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d101      	bne.n	800e506 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800e502:	2301      	movs	r3, #1
 800e504:	e000      	b.n	800e508 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800e506:	2300      	movs	r3, #0
}
 800e508:	4618      	mov	r0, r3
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	69da      	ldr	r2, [r3, #28]
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	4013      	ands	r3, r2
 800e526:	683a      	ldr	r2, [r7, #0]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d101      	bne.n	800e530 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800e52c:	2301      	movs	r3, #1
 800e52e:	e000      	b.n	800e532 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	370c      	adds	r7, #12
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr
	...

0800e540 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800e540:	b580      	push	{r7, lr}
 800e542:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800e544:	2102      	movs	r1, #2
 800e546:	4819      	ldr	r0, [pc, #100]	; (800e5ac <HW_IPCC_Rx_Handler+0x6c>)
 800e548:	f7ff ffe4 	bl	800e514 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d009      	beq.n	800e566 <HW_IPCC_Rx_Handler+0x26>
 800e552:	4b16      	ldr	r3, [pc, #88]	; (800e5ac <HW_IPCC_Rx_Handler+0x6c>)
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	43db      	mvns	r3, r3
 800e558:	f003 0302 	and.w	r3, r3, #2
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d002      	beq.n	800e566 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800e560:	f000 f8e6 	bl	800e730 <HW_IPCC_SYS_EvtHandler>
 800e564:	e01f      	b.n	800e5a6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800e566:	2101      	movs	r1, #1
 800e568:	4810      	ldr	r0, [pc, #64]	; (800e5ac <HW_IPCC_Rx_Handler+0x6c>)
 800e56a:	f7ff ffd3 	bl	800e514 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e56e:	4603      	mov	r3, r0
 800e570:	2b00      	cmp	r3, #0
 800e572:	d008      	beq.n	800e586 <HW_IPCC_Rx_Handler+0x46>
 800e574:	4b0d      	ldr	r3, [pc, #52]	; (800e5ac <HW_IPCC_Rx_Handler+0x6c>)
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	f003 0301 	and.w	r3, r3, #1
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d102      	bne.n	800e586 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800e580:	f000 f89a 	bl	800e6b8 <HW_IPCC_BLE_EvtHandler>
 800e584:	e00f      	b.n	800e5a6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800e586:	2108      	movs	r1, #8
 800e588:	4808      	ldr	r0, [pc, #32]	; (800e5ac <HW_IPCC_Rx_Handler+0x6c>)
 800e58a:	f7ff ffc3 	bl	800e514 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d009      	beq.n	800e5a8 <HW_IPCC_Rx_Handler+0x68>
 800e594:	4b05      	ldr	r3, [pc, #20]	; (800e5ac <HW_IPCC_Rx_Handler+0x6c>)
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	43db      	mvns	r3, r3
 800e59a:	f003 0308 	and.w	r3, r3, #8
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d002      	beq.n	800e5a8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800e5a2:	f000 f911 	bl	800e7c8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800e5a6:	bf00      	nop
 800e5a8:	bf00      	nop
}
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	58000c00 	.word	0x58000c00

0800e5b0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800e5b4:	2102      	movs	r1, #2
 800e5b6:	4822      	ldr	r0, [pc, #136]	; (800e640 <HW_IPCC_Tx_Handler+0x90>)
 800e5b8:	f7ff ff97 	bl	800e4ea <LL_C1_IPCC_IsActiveFlag_CHx>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d109      	bne.n	800e5d6 <HW_IPCC_Tx_Handler+0x26>
 800e5c2:	4b1f      	ldr	r3, [pc, #124]	; (800e640 <HW_IPCC_Tx_Handler+0x90>)
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	43db      	mvns	r3, r3
 800e5c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d002      	beq.n	800e5d6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800e5d0:	f000 f8a2 	bl	800e718 <HW_IPCC_SYS_CmdEvtHandler>
 800e5d4:	e031      	b.n	800e63a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800e5d6:	2102      	movs	r1, #2
 800e5d8:	4819      	ldr	r0, [pc, #100]	; (800e640 <HW_IPCC_Tx_Handler+0x90>)
 800e5da:	f7ff ff86 	bl	800e4ea <LL_C1_IPCC_IsActiveFlag_CHx>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d109      	bne.n	800e5f8 <HW_IPCC_Tx_Handler+0x48>
 800e5e4:	4b16      	ldr	r3, [pc, #88]	; (800e640 <HW_IPCC_Tx_Handler+0x90>)
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	43db      	mvns	r3, r3
 800e5ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d002      	beq.n	800e5f8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800e5f2:	f000 f891 	bl	800e718 <HW_IPCC_SYS_CmdEvtHandler>
 800e5f6:	e020      	b.n	800e63a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800e5f8:	2108      	movs	r1, #8
 800e5fa:	4811      	ldr	r0, [pc, #68]	; (800e640 <HW_IPCC_Tx_Handler+0x90>)
 800e5fc:	f7ff ff75 	bl	800e4ea <LL_C1_IPCC_IsActiveFlag_CHx>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d109      	bne.n	800e61a <HW_IPCC_Tx_Handler+0x6a>
 800e606:	4b0e      	ldr	r3, [pc, #56]	; (800e640 <HW_IPCC_Tx_Handler+0x90>)
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	43db      	mvns	r3, r3
 800e60c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e610:	2b00      	cmp	r3, #0
 800e612:	d002      	beq.n	800e61a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800e614:	f000 f8ba 	bl	800e78c <HW_IPCC_MM_FreeBufHandler>
 800e618:	e00f      	b.n	800e63a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800e61a:	2120      	movs	r1, #32
 800e61c:	4808      	ldr	r0, [pc, #32]	; (800e640 <HW_IPCC_Tx_Handler+0x90>)
 800e61e:	f7ff ff64 	bl	800e4ea <LL_C1_IPCC_IsActiveFlag_CHx>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d109      	bne.n	800e63c <HW_IPCC_Tx_Handler+0x8c>
 800e628:	4b05      	ldr	r3, [pc, #20]	; (800e640 <HW_IPCC_Tx_Handler+0x90>)
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	43db      	mvns	r3, r3
 800e62e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800e636:	f000 f84b 	bl	800e6d0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800e63a:	bf00      	nop
 800e63c:	bf00      	nop
}
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	58000c00 	.word	0x58000c00

0800e644 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800e648:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e64c:	f7ff fe9a 	bl	800e384 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800e650:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e654:	f7ff feaa 	bl	800e3ac <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800e658:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800e65a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800e65c:	f7ff fe82 	bl	800e364 <LL_PWR_EnableBootC2>

  return;
 800e660:	bf00      	nop
}
 800e662:	bd80      	pop	{r7, pc}

0800e664 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800e664:	b580      	push	{r7, lr}
 800e666:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800e668:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e66c:	f7ff feb0 	bl	800e3d0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800e670:	4806      	ldr	r0, [pc, #24]	; (800e68c <HW_IPCC_Init+0x28>)
 800e672:	f7ff fed6 	bl	800e422 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800e676:	4805      	ldr	r0, [pc, #20]	; (800e68c <HW_IPCC_Init+0x28>)
 800e678:	f7ff fec3 	bl	800e402 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800e67c:	202c      	movs	r0, #44	; 0x2c
 800e67e:	f7f5 fc68 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800e682:	202d      	movs	r0, #45	; 0x2d
 800e684:	f7f5 fc65 	bl	8003f52 <HAL_NVIC_EnableIRQ>

  return;
 800e688:	bf00      	nop
}
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	58000c00 	.word	0x58000c00

0800e690 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e694:	2101      	movs	r1, #1
 800e696:	4802      	ldr	r0, [pc, #8]	; (800e6a0 <HW_IPCC_BLE_Init+0x10>)
 800e698:	f7ff fef8 	bl	800e48c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e69c:	bf00      	nop
}
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	58000c00 	.word	0x58000c00

0800e6a4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800e6a8:	2101      	movs	r1, #1
 800e6aa:	4802      	ldr	r0, [pc, #8]	; (800e6b4 <HW_IPCC_BLE_SendCmd+0x10>)
 800e6ac:	f7ff ff0e 	bl	800e4cc <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e6b0:	bf00      	nop
}
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	58000c00 	.word	0x58000c00

0800e6b8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800e6bc:	f7ff f87c 	bl	800d7b8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e6c0:	2101      	movs	r1, #1
 800e6c2:	4802      	ldr	r0, [pc, #8]	; (800e6cc <HW_IPCC_BLE_EvtHandler+0x14>)
 800e6c4:	f7ff fef4 	bl	800e4b0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e6c8:	bf00      	nop
}
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	58000c00 	.word	0x58000c00

0800e6d0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800e6d4:	2120      	movs	r1, #32
 800e6d6:	4803      	ldr	r0, [pc, #12]	; (800e6e4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800e6d8:	f7ff fec6 	bl	800e468 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800e6dc:	f7ff f888 	bl	800d7f0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800e6e0:	bf00      	nop
}
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	58000c00 	.word	0x58000c00

0800e6e8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e6ec:	2102      	movs	r1, #2
 800e6ee:	4802      	ldr	r0, [pc, #8]	; (800e6f8 <HW_IPCC_SYS_Init+0x10>)
 800e6f0:	f7ff fecc 	bl	800e48c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e6f4:	bf00      	nop
}
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	58000c00 	.word	0x58000c00

0800e6fc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e700:	2102      	movs	r1, #2
 800e702:	4804      	ldr	r0, [pc, #16]	; (800e714 <HW_IPCC_SYS_SendCmd+0x18>)
 800e704:	f7ff fee2 	bl	800e4cc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e708:	2102      	movs	r1, #2
 800e70a:	4802      	ldr	r0, [pc, #8]	; (800e714 <HW_IPCC_SYS_SendCmd+0x18>)
 800e70c:	f7ff fe99 	bl	800e442 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800e710:	bf00      	nop
}
 800e712:	bd80      	pop	{r7, pc}
 800e714:	58000c00 	.word	0x58000c00

0800e718 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e71c:	2102      	movs	r1, #2
 800e71e:	4803      	ldr	r0, [pc, #12]	; (800e72c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800e720:	f7ff fea2 	bl	800e468 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800e724:	f7ff f8ac 	bl	800d880 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800e728:	bf00      	nop
}
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	58000c00 	.word	0x58000c00

0800e730 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800e730:	b580      	push	{r7, lr}
 800e732:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800e734:	f7ff f8b4 	bl	800d8a0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e738:	2102      	movs	r1, #2
 800e73a:	4802      	ldr	r0, [pc, #8]	; (800e744 <HW_IPCC_SYS_EvtHandler+0x14>)
 800e73c:	f7ff feb8 	bl	800e4b0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e740:	bf00      	nop
}
 800e742:	bd80      	pop	{r7, pc}
 800e744:	58000c00 	.word	0x58000c00

0800e748 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800e750:	2108      	movs	r1, #8
 800e752:	480c      	ldr	r0, [pc, #48]	; (800e784 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e754:	f7ff fec9 	bl	800e4ea <LL_C1_IPCC_IsActiveFlag_CHx>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d007      	beq.n	800e76e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800e75e:	4a0a      	ldr	r2, [pc, #40]	; (800e788 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e764:	2108      	movs	r1, #8
 800e766:	4807      	ldr	r0, [pc, #28]	; (800e784 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e768:	f7ff fe6b 	bl	800e442 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800e76c:	e006      	b.n	800e77c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e772:	2108      	movs	r1, #8
 800e774:	4803      	ldr	r0, [pc, #12]	; (800e784 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e776:	f7ff fea9 	bl	800e4cc <LL_C1_IPCC_SetFlag_CHx>
  return;
 800e77a:	bf00      	nop
}
 800e77c:	3708      	adds	r7, #8
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	58000c00 	.word	0x58000c00
 800e788:	20000504 	.word	0x20000504

0800e78c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e790:	2108      	movs	r1, #8
 800e792:	4806      	ldr	r0, [pc, #24]	; (800e7ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e794:	f7ff fe68 	bl	800e468 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800e798:	4b05      	ldr	r3, [pc, #20]	; (800e7b0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e79e:	2108      	movs	r1, #8
 800e7a0:	4802      	ldr	r0, [pc, #8]	; (800e7ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e7a2:	f7ff fe93 	bl	800e4cc <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e7a6:	bf00      	nop
}
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	58000c00 	.word	0x58000c00
 800e7b0:	20000504 	.word	0x20000504

0800e7b4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e7b8:	2108      	movs	r1, #8
 800e7ba:	4802      	ldr	r0, [pc, #8]	; (800e7c4 <HW_IPCC_TRACES_Init+0x10>)
 800e7bc:	f7ff fe66 	bl	800e48c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e7c0:	bf00      	nop
}
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	58000c00 	.word	0x58000c00

0800e7c8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800e7cc:	f7ff f920 	bl	800da10 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e7d0:	2108      	movs	r1, #8
 800e7d2:	4802      	ldr	r0, [pc, #8]	; (800e7dc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800e7d4:	f7ff fe6c 	bl	800e4b0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e7d8:	bf00      	nop
}
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	58000c00 	.word	0x58000c00

0800e7e0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	4912      	ldr	r1, [pc, #72]	; (800e830 <MX_USB_Device_Init+0x50>)
 800e7e8:	4812      	ldr	r0, [pc, #72]	; (800e834 <MX_USB_Device_Init+0x54>)
 800e7ea:	f7fc f95b 	bl	800aaa4 <USBD_Init>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d001      	beq.n	800e7f8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e7f4:	f7f3 f9e2 	bl	8001bbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e7f8:	490f      	ldr	r1, [pc, #60]	; (800e838 <MX_USB_Device_Init+0x58>)
 800e7fa:	480e      	ldr	r0, [pc, #56]	; (800e834 <MX_USB_Device_Init+0x54>)
 800e7fc:	f7fc f996 	bl	800ab2c <USBD_RegisterClass>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d001      	beq.n	800e80a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e806:	f7f3 f9d9 	bl	8001bbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e80a:	490c      	ldr	r1, [pc, #48]	; (800e83c <MX_USB_Device_Init+0x5c>)
 800e80c:	4809      	ldr	r0, [pc, #36]	; (800e834 <MX_USB_Device_Init+0x54>)
 800e80e:	f7fc f8dd 	bl	800a9cc <USBD_CDC_RegisterInterface>
 800e812:	4603      	mov	r3, r0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d001      	beq.n	800e81c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e818:	f7f3 f9d0 	bl	8001bbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e81c:	4805      	ldr	r0, [pc, #20]	; (800e834 <MX_USB_Device_Init+0x54>)
 800e81e:	f7fc f9b3 	bl	800ab88 <USBD_Start>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d001      	beq.n	800e82c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e828:	f7f3 f9c8 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e82c:	bf00      	nop
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	20000168 	.word	0x20000168
 800e834:	20000974 	.word	0x20000974
 800e838:	20000040 	.word	0x20000040
 800e83c:	20000154 	.word	0x20000154

0800e840 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e844:	2200      	movs	r2, #0
 800e846:	4905      	ldr	r1, [pc, #20]	; (800e85c <CDC_Init_FS+0x1c>)
 800e848:	4805      	ldr	r0, [pc, #20]	; (800e860 <CDC_Init_FS+0x20>)
 800e84a:	f7fc f8d4 	bl	800a9f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e84e:	4905      	ldr	r1, [pc, #20]	; (800e864 <CDC_Init_FS+0x24>)
 800e850:	4803      	ldr	r0, [pc, #12]	; (800e860 <CDC_Init_FS+0x20>)
 800e852:	f7fc f8e9 	bl	800aa28 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e856:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e858:	4618      	mov	r0, r3
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	20001444 	.word	0x20001444
 800e860:	20000974 	.word	0x20000974
 800e864:	20000c44 	.word	0x20000c44

0800e868 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e868:	b480      	push	{r7}
 800e86a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e86c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e86e:	4618      	mov	r0, r3
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	4603      	mov	r3, r0
 800e880:	6039      	str	r1, [r7, #0]
 800e882:	71fb      	strb	r3, [r7, #7]
 800e884:	4613      	mov	r3, r2
 800e886:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e888:	79fb      	ldrb	r3, [r7, #7]
 800e88a:	2b23      	cmp	r3, #35	; 0x23
 800e88c:	d84a      	bhi.n	800e924 <CDC_Control_FS+0xac>
 800e88e:	a201      	add	r2, pc, #4	; (adr r2, 800e894 <CDC_Control_FS+0x1c>)
 800e890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e894:	0800e925 	.word	0x0800e925
 800e898:	0800e925 	.word	0x0800e925
 800e89c:	0800e925 	.word	0x0800e925
 800e8a0:	0800e925 	.word	0x0800e925
 800e8a4:	0800e925 	.word	0x0800e925
 800e8a8:	0800e925 	.word	0x0800e925
 800e8ac:	0800e925 	.word	0x0800e925
 800e8b0:	0800e925 	.word	0x0800e925
 800e8b4:	0800e925 	.word	0x0800e925
 800e8b8:	0800e925 	.word	0x0800e925
 800e8bc:	0800e925 	.word	0x0800e925
 800e8c0:	0800e925 	.word	0x0800e925
 800e8c4:	0800e925 	.word	0x0800e925
 800e8c8:	0800e925 	.word	0x0800e925
 800e8cc:	0800e925 	.word	0x0800e925
 800e8d0:	0800e925 	.word	0x0800e925
 800e8d4:	0800e925 	.word	0x0800e925
 800e8d8:	0800e925 	.word	0x0800e925
 800e8dc:	0800e925 	.word	0x0800e925
 800e8e0:	0800e925 	.word	0x0800e925
 800e8e4:	0800e925 	.word	0x0800e925
 800e8e8:	0800e925 	.word	0x0800e925
 800e8ec:	0800e925 	.word	0x0800e925
 800e8f0:	0800e925 	.word	0x0800e925
 800e8f4:	0800e925 	.word	0x0800e925
 800e8f8:	0800e925 	.word	0x0800e925
 800e8fc:	0800e925 	.word	0x0800e925
 800e900:	0800e925 	.word	0x0800e925
 800e904:	0800e925 	.word	0x0800e925
 800e908:	0800e925 	.word	0x0800e925
 800e90c:	0800e925 	.word	0x0800e925
 800e910:	0800e925 	.word	0x0800e925
 800e914:	0800e925 	.word	0x0800e925
 800e918:	0800e925 	.word	0x0800e925
 800e91c:	0800e925 	.word	0x0800e925
 800e920:	0800e925 	.word	0x0800e925
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e924:	bf00      	nop
  }

  return (USBD_OK);
 800e926:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e928:	4618      	mov	r0, r3
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e93e:	6879      	ldr	r1, [r7, #4]
 800e940:	4805      	ldr	r0, [pc, #20]	; (800e958 <CDC_Receive_FS+0x24>)
 800e942:	f7fc f871 	bl	800aa28 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e946:	4804      	ldr	r0, [pc, #16]	; (800e958 <CDC_Receive_FS+0x24>)
 800e948:	f7fc f882 	bl	800aa50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e94c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3708      	adds	r7, #8
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	20000974 	.word	0x20000974

0800e95c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b087      	sub	sp, #28
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	4613      	mov	r3, r2
 800e968:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e96a:	2300      	movs	r3, #0
 800e96c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e96e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e972:	4618      	mov	r0, r3
 800e974:	371c      	adds	r7, #28
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr
	...

0800e980 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	4603      	mov	r3, r0
 800e988:	6039      	str	r1, [r7, #0]
 800e98a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	2212      	movs	r2, #18
 800e990:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e992:	4b03      	ldr	r3, [pc, #12]	; (800e9a0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e994:	4618      	mov	r0, r3
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr
 800e9a0:	20000188 	.word	0x20000188

0800e9a4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	6039      	str	r1, [r7, #0]
 800e9ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	2204      	movs	r2, #4
 800e9b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e9b6:	4b03      	ldr	r3, [pc, #12]	; (800e9c4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	370c      	adds	r7, #12
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c2:	4770      	bx	lr
 800e9c4:	2000019c 	.word	0x2000019c

0800e9c8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	6039      	str	r1, [r7, #0]
 800e9d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e9d4:	79fb      	ldrb	r3, [r7, #7]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d105      	bne.n	800e9e6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e9da:	683a      	ldr	r2, [r7, #0]
 800e9dc:	4907      	ldr	r1, [pc, #28]	; (800e9fc <USBD_CDC_ProductStrDescriptor+0x34>)
 800e9de:	4808      	ldr	r0, [pc, #32]	; (800ea00 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e9e0:	f7fd f889 	bl	800baf6 <USBD_GetString>
 800e9e4:	e004      	b.n	800e9f0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e9e6:	683a      	ldr	r2, [r7, #0]
 800e9e8:	4904      	ldr	r1, [pc, #16]	; (800e9fc <USBD_CDC_ProductStrDescriptor+0x34>)
 800e9ea:	4805      	ldr	r0, [pc, #20]	; (800ea00 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e9ec:	f7fd f883 	bl	800baf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e9f0:	4b02      	ldr	r3, [pc, #8]	; (800e9fc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	20001c44 	.word	0x20001c44
 800ea00:	080109c0 	.word	0x080109c0

0800ea04 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	6039      	str	r1, [r7, #0]
 800ea0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ea10:	683a      	ldr	r2, [r7, #0]
 800ea12:	4904      	ldr	r1, [pc, #16]	; (800ea24 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ea14:	4804      	ldr	r0, [pc, #16]	; (800ea28 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ea16:	f7fd f86e 	bl	800baf6 <USBD_GetString>
  return USBD_StrDesc;
 800ea1a:	4b02      	ldr	r3, [pc, #8]	; (800ea24 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3708      	adds	r7, #8
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	20001c44 	.word	0x20001c44
 800ea28:	080109d8 	.word	0x080109d8

0800ea2c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	4603      	mov	r3, r0
 800ea34:	6039      	str	r1, [r7, #0]
 800ea36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	221a      	movs	r2, #26
 800ea3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ea3e:	f000 f843 	bl	800eac8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ea42:	4b02      	ldr	r3, [pc, #8]	; (800ea4c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	200001a0 	.word	0x200001a0

0800ea50 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	4603      	mov	r3, r0
 800ea58:	6039      	str	r1, [r7, #0]
 800ea5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ea5c:	79fb      	ldrb	r3, [r7, #7]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d105      	bne.n	800ea6e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ea62:	683a      	ldr	r2, [r7, #0]
 800ea64:	4907      	ldr	r1, [pc, #28]	; (800ea84 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ea66:	4808      	ldr	r0, [pc, #32]	; (800ea88 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ea68:	f7fd f845 	bl	800baf6 <USBD_GetString>
 800ea6c:	e004      	b.n	800ea78 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ea6e:	683a      	ldr	r2, [r7, #0]
 800ea70:	4904      	ldr	r1, [pc, #16]	; (800ea84 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ea72:	4805      	ldr	r0, [pc, #20]	; (800ea88 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ea74:	f7fd f83f 	bl	800baf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea78:	4b02      	ldr	r3, [pc, #8]	; (800ea84 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	20001c44 	.word	0x20001c44
 800ea88:	080109ec 	.word	0x080109ec

0800ea8c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b082      	sub	sp, #8
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	4603      	mov	r3, r0
 800ea94:	6039      	str	r1, [r7, #0]
 800ea96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea98:	79fb      	ldrb	r3, [r7, #7]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d105      	bne.n	800eaaa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ea9e:	683a      	ldr	r2, [r7, #0]
 800eaa0:	4907      	ldr	r1, [pc, #28]	; (800eac0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800eaa2:	4808      	ldr	r0, [pc, #32]	; (800eac4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800eaa4:	f7fd f827 	bl	800baf6 <USBD_GetString>
 800eaa8:	e004      	b.n	800eab4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800eaaa:	683a      	ldr	r2, [r7, #0]
 800eaac:	4904      	ldr	r1, [pc, #16]	; (800eac0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800eaae:	4805      	ldr	r0, [pc, #20]	; (800eac4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800eab0:	f7fd f821 	bl	800baf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eab4:	4b02      	ldr	r3, [pc, #8]	; (800eac0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	20001c44 	.word	0x20001c44
 800eac4:	080109f8 	.word	0x080109f8

0800eac8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eace:	4b0f      	ldr	r3, [pc, #60]	; (800eb0c <Get_SerialNum+0x44>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ead4:	4b0e      	ldr	r3, [pc, #56]	; (800eb10 <Get_SerialNum+0x48>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800eada:	4b0e      	ldr	r3, [pc, #56]	; (800eb14 <Get_SerialNum+0x4c>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	4413      	add	r3, r2
 800eae6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d009      	beq.n	800eb02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800eaee:	2208      	movs	r2, #8
 800eaf0:	4909      	ldr	r1, [pc, #36]	; (800eb18 <Get_SerialNum+0x50>)
 800eaf2:	68f8      	ldr	r0, [r7, #12]
 800eaf4:	f000 f814 	bl	800eb20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800eaf8:	2204      	movs	r2, #4
 800eafa:	4908      	ldr	r1, [pc, #32]	; (800eb1c <Get_SerialNum+0x54>)
 800eafc:	68b8      	ldr	r0, [r7, #8]
 800eafe:	f000 f80f 	bl	800eb20 <IntToUnicode>
  }
}
 800eb02:	bf00      	nop
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	1fff7590 	.word	0x1fff7590
 800eb10:	1fff7594 	.word	0x1fff7594
 800eb14:	1fff7598 	.word	0x1fff7598
 800eb18:	200001a2 	.word	0x200001a2
 800eb1c:	200001b2 	.word	0x200001b2

0800eb20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b087      	sub	sp, #28
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eb32:	2300      	movs	r3, #0
 800eb34:	75fb      	strb	r3, [r7, #23]
 800eb36:	e027      	b.n	800eb88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	0f1b      	lsrs	r3, r3, #28
 800eb3c:	2b09      	cmp	r3, #9
 800eb3e:	d80b      	bhi.n	800eb58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	0f1b      	lsrs	r3, r3, #28
 800eb44:	b2da      	uxtb	r2, r3
 800eb46:	7dfb      	ldrb	r3, [r7, #23]
 800eb48:	005b      	lsls	r3, r3, #1
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	440b      	add	r3, r1
 800eb50:	3230      	adds	r2, #48	; 0x30
 800eb52:	b2d2      	uxtb	r2, r2
 800eb54:	701a      	strb	r2, [r3, #0]
 800eb56:	e00a      	b.n	800eb6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	0f1b      	lsrs	r3, r3, #28
 800eb5c:	b2da      	uxtb	r2, r3
 800eb5e:	7dfb      	ldrb	r3, [r7, #23]
 800eb60:	005b      	lsls	r3, r3, #1
 800eb62:	4619      	mov	r1, r3
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	440b      	add	r3, r1
 800eb68:	3237      	adds	r2, #55	; 0x37
 800eb6a:	b2d2      	uxtb	r2, r2
 800eb6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	011b      	lsls	r3, r3, #4
 800eb72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800eb74:	7dfb      	ldrb	r3, [r7, #23]
 800eb76:	005b      	lsls	r3, r3, #1
 800eb78:	3301      	adds	r3, #1
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	2200      	movs	r2, #0
 800eb80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eb82:	7dfb      	ldrb	r3, [r7, #23]
 800eb84:	3301      	adds	r3, #1
 800eb86:	75fb      	strb	r3, [r7, #23]
 800eb88:	7dfa      	ldrb	r2, [r7, #23]
 800eb8a:	79fb      	ldrb	r3, [r7, #7]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d3d3      	bcc.n	800eb38 <IntToUnicode+0x18>
  }
}
 800eb90:	bf00      	nop
 800eb92:	371c      	adds	r7, #28
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <LL_AHB2_GRP1_EnableClock>:
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b085      	sub	sp, #20
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800eba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800ebb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ebb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4013      	ands	r3, r2
 800ebbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
}
 800ebc2:	bf00      	nop
 800ebc4:	3714      	adds	r7, #20
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr

0800ebce <LL_APB1_GRP1_EnableClock>:
{
 800ebce:	b480      	push	{r7}
 800ebd0:	b085      	sub	sp, #20
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800ebd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ebda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ebdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ebe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ebea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	4013      	ands	r3, r2
 800ebf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
}
 800ebf4:	bf00      	nop
 800ebf6:	3714      	adds	r7, #20
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b088      	sub	sp, #32
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec08:	f107 030c 	add.w	r3, r7, #12
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	601a      	str	r2, [r3, #0]
 800ec10:	605a      	str	r2, [r3, #4]
 800ec12:	609a      	str	r2, [r3, #8]
 800ec14:	60da      	str	r2, [r3, #12]
 800ec16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4a13      	ldr	r2, [pc, #76]	; (800ec6c <HAL_PCD_MspInit+0x6c>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d120      	bne.n	800ec64 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec22:	2001      	movs	r0, #1
 800ec24:	f7ff ffba 	bl	800eb9c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ec28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ec2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec2e:	2302      	movs	r3, #2
 800ec30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec32:	2300      	movs	r3, #0
 800ec34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec36:	2300      	movs	r3, #0
 800ec38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800ec3a:	230a      	movs	r3, #10
 800ec3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec3e:	f107 030c 	add.w	r3, r7, #12
 800ec42:	4619      	mov	r1, r3
 800ec44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ec48:	f7f5 f9c8 	bl	8003fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ec4c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800ec50:	f7ff ffbd 	bl	800ebce <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ec54:	2200      	movs	r2, #0
 800ec56:	2100      	movs	r1, #0
 800ec58:	2014      	movs	r0, #20
 800ec5a:	f7f5 f960 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ec5e:	2014      	movs	r0, #20
 800ec60:	f7f5 f977 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ec64:	bf00      	nop
 800ec66:	3720      	adds	r7, #32
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	40006800 	.word	0x40006800

0800ec70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ec84:	4619      	mov	r1, r3
 800ec86:	4610      	mov	r0, r2
 800ec88:	f7fb ffc9 	bl	800ac1e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ec8c:	bf00      	nop
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800eca6:	78fb      	ldrb	r3, [r7, #3]
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	015b      	lsls	r3, r3, #5
 800ecac:	4413      	add	r3, r2
 800ecae:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	78fb      	ldrb	r3, [r7, #3]
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	f7fc f804 	bl	800acc4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ecbc:	bf00      	nop
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	460b      	mov	r3, r1
 800ecce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800ecd6:	78fb      	ldrb	r3, [r7, #3]
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	015b      	lsls	r3, r3, #5
 800ecdc:	4413      	add	r3, r2
 800ecde:	333c      	adds	r3, #60	; 0x3c
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	78fb      	ldrb	r3, [r7, #3]
 800ece4:	4619      	mov	r1, r3
 800ece6:	f7fc f850 	bl	800ad8a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ecea:	bf00      	nop
 800ecec:	3708      	adds	r7, #8
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecf2:	b580      	push	{r7, lr}
 800ecf4:	b082      	sub	sp, #8
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7fc f954 	bl	800afae <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ed06:	bf00      	nop
 800ed08:	3708      	adds	r7, #8
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b084      	sub	sp, #16
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ed16:	2301      	movs	r3, #1
 800ed18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	2b02      	cmp	r3, #2
 800ed20:	d001      	beq.n	800ed26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ed22:	f7f2 ff4b 	bl	8001bbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ed2c:	7bfa      	ldrb	r2, [r7, #15]
 800ed2e:	4611      	mov	r1, r2
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7fc f901 	bl	800af38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7fc f8ba 	bl	800aeb6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ed42:	bf00      	nop
 800ed44:	3710      	adds	r7, #16
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
	...

0800ed4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fc f8fc 	bl	800af58 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	699b      	ldr	r3, [r3, #24]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d005      	beq.n	800ed74 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ed68:	4b04      	ldr	r3, [pc, #16]	; (800ed7c <HAL_PCD_SuspendCallback+0x30>)
 800ed6a:	691b      	ldr	r3, [r3, #16]
 800ed6c:	4a03      	ldr	r2, [pc, #12]	; (800ed7c <HAL_PCD_SuspendCallback+0x30>)
 800ed6e:	f043 0306 	orr.w	r3, r3, #6
 800ed72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ed74:	bf00      	nop
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	e000ed00 	.word	0xe000ed00

0800ed80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	699b      	ldr	r3, [r3, #24]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d007      	beq.n	800eda0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ed90:	4b08      	ldr	r3, [pc, #32]	; (800edb4 <HAL_PCD_ResumeCallback+0x34>)
 800ed92:	691b      	ldr	r3, [r3, #16]
 800ed94:	4a07      	ldr	r2, [pc, #28]	; (800edb4 <HAL_PCD_ResumeCallback+0x34>)
 800ed96:	f023 0306 	bic.w	r3, r3, #6
 800ed9a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ed9c:	f000 f9f4 	bl	800f188 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fc f8eb 	bl	800af82 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800edac:	bf00      	nop
 800edae:	3708      	adds	r7, #8
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	e000ed00 	.word	0xe000ed00

0800edb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800edc0:	4a2c      	ldr	r2, [pc, #176]	; (800ee74 <USBD_LL_Init+0xbc>)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4a2a      	ldr	r2, [pc, #168]	; (800ee74 <USBD_LL_Init+0xbc>)
 800edcc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800edd0:	f7f7 f9d6 	bl	8006180 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800edd4:	4b27      	ldr	r3, [pc, #156]	; (800ee74 <USBD_LL_Init+0xbc>)
 800edd6:	4a28      	ldr	r2, [pc, #160]	; (800ee78 <USBD_LL_Init+0xc0>)
 800edd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800edda:	4b26      	ldr	r3, [pc, #152]	; (800ee74 <USBD_LL_Init+0xbc>)
 800eddc:	2208      	movs	r2, #8
 800edde:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ede0:	4b24      	ldr	r3, [pc, #144]	; (800ee74 <USBD_LL_Init+0xbc>)
 800ede2:	2202      	movs	r2, #2
 800ede4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ede6:	4b23      	ldr	r3, [pc, #140]	; (800ee74 <USBD_LL_Init+0xbc>)
 800ede8:	2202      	movs	r2, #2
 800edea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800edec:	4b21      	ldr	r3, [pc, #132]	; (800ee74 <USBD_LL_Init+0xbc>)
 800edee:	2200      	movs	r2, #0
 800edf0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800edf2:	4b20      	ldr	r3, [pc, #128]	; (800ee74 <USBD_LL_Init+0xbc>)
 800edf4:	2200      	movs	r2, #0
 800edf6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800edf8:	4b1e      	ldr	r3, [pc, #120]	; (800ee74 <USBD_LL_Init+0xbc>)
 800edfa:	2200      	movs	r2, #0
 800edfc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800edfe:	4b1d      	ldr	r3, [pc, #116]	; (800ee74 <USBD_LL_Init+0xbc>)
 800ee00:	2200      	movs	r2, #0
 800ee02:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ee04:	481b      	ldr	r0, [pc, #108]	; (800ee74 <USBD_LL_Init+0xbc>)
 800ee06:	f7f6 fa63 	bl	80052d0 <HAL_PCD_Init>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d001      	beq.n	800ee14 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800ee10:	f7f2 fed4 	bl	8001bbc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee1a:	2318      	movs	r3, #24
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	2100      	movs	r1, #0
 800ee20:	f7f7 f928 	bl	8006074 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee2a:	2358      	movs	r3, #88	; 0x58
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	2180      	movs	r1, #128	; 0x80
 800ee30:	f7f7 f920 	bl	8006074 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee3a:	23c0      	movs	r3, #192	; 0xc0
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	2181      	movs	r1, #129	; 0x81
 800ee40:	f7f7 f918 	bl	8006074 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee4a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ee4e:	2200      	movs	r2, #0
 800ee50:	2101      	movs	r1, #1
 800ee52:	f7f7 f90f 	bl	8006074 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee60:	2200      	movs	r2, #0
 800ee62:	2182      	movs	r1, #130	; 0x82
 800ee64:	f7f7 f906 	bl	8006074 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	20001e44 	.word	0x20001e44
 800ee78:	40006800 	.word	0x40006800

0800ee7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee84:	2300      	movs	r3, #0
 800ee86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7f6 fad7 	bl	8005446 <HAL_PCD_Start>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee9c:	7bfb      	ldrb	r3, [r7, #15]
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f000 f978 	bl	800f194 <USBD_Get_USB_Status>
 800eea4:	4603      	mov	r3, r0
 800eea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eea8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3710      	adds	r7, #16
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b084      	sub	sp, #16
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
 800eeba:	4608      	mov	r0, r1
 800eebc:	4611      	mov	r1, r2
 800eebe:	461a      	mov	r2, r3
 800eec0:	4603      	mov	r3, r0
 800eec2:	70fb      	strb	r3, [r7, #3]
 800eec4:	460b      	mov	r3, r1
 800eec6:	70bb      	strb	r3, [r7, #2]
 800eec8:	4613      	mov	r3, r2
 800eeca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eecc:	2300      	movs	r3, #0
 800eece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eed0:	2300      	movs	r3, #0
 800eed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eeda:	78bb      	ldrb	r3, [r7, #2]
 800eedc:	883a      	ldrh	r2, [r7, #0]
 800eede:	78f9      	ldrb	r1, [r7, #3]
 800eee0:	f7f6 fc46 	bl	8005770 <HAL_PCD_EP_Open>
 800eee4:	4603      	mov	r3, r0
 800eee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eee8:	7bfb      	ldrb	r3, [r7, #15]
 800eeea:	4618      	mov	r0, r3
 800eeec:	f000 f952 	bl	800f194 <USBD_Get_USB_Status>
 800eef0:	4603      	mov	r3, r0
 800eef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b084      	sub	sp, #16
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
 800ef06:	460b      	mov	r3, r1
 800ef08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef18:	78fa      	ldrb	r2, [r7, #3]
 800ef1a:	4611      	mov	r1, r2
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7f6 fc87 	bl	8005830 <HAL_PCD_EP_Close>
 800ef22:	4603      	mov	r3, r0
 800ef24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef26:	7bfb      	ldrb	r3, [r7, #15]
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f000 f933 	bl	800f194 <USBD_Get_USB_Status>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3710      	adds	r7, #16
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	460b      	mov	r3, r1
 800ef46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef56:	78fa      	ldrb	r2, [r7, #3]
 800ef58:	4611      	mov	r1, r2
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7f6 fd32 	bl	80059c4 <HAL_PCD_EP_SetStall>
 800ef60:	4603      	mov	r3, r0
 800ef62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef64:	7bfb      	ldrb	r3, [r7, #15]
 800ef66:	4618      	mov	r0, r3
 800ef68:	f000 f914 	bl	800f194 <USBD_Get_USB_Status>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b084      	sub	sp, #16
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
 800ef82:	460b      	mov	r3, r1
 800ef84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef86:	2300      	movs	r3, #0
 800ef88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef94:	78fa      	ldrb	r2, [r7, #3]
 800ef96:	4611      	mov	r1, r2
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7f6 fd6d 	bl	8005a78 <HAL_PCD_EP_ClrStall>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efa2:	7bfb      	ldrb	r3, [r7, #15]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f000 f8f5 	bl	800f194 <USBD_Get_USB_Status>
 800efaa:	4603      	mov	r3, r0
 800efac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efae:	7bbb      	ldrb	r3, [r7, #14]
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3710      	adds	r7, #16
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efb8:	b480      	push	{r7}
 800efba:	b085      	sub	sp, #20
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	460b      	mov	r3, r1
 800efc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800efcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	da08      	bge.n	800efe6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800efd4:	78fb      	ldrb	r3, [r7, #3]
 800efd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	015b      	lsls	r3, r3, #5
 800efde:	4413      	add	r3, r2
 800efe0:	332a      	adds	r3, #42	; 0x2a
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	e008      	b.n	800eff8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800efe6:	78fb      	ldrb	r3, [r7, #3]
 800efe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efec:	68fa      	ldr	r2, [r7, #12]
 800efee:	015b      	lsls	r3, r3, #5
 800eff0:	4413      	add	r3, r2
 800eff2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800eff6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3714      	adds	r7, #20
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	460b      	mov	r3, r1
 800f00e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f010:	2300      	movs	r3, #0
 800f012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f014:	2300      	movs	r3, #0
 800f016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f01e:	78fa      	ldrb	r2, [r7, #3]
 800f020:	4611      	mov	r1, r2
 800f022:	4618      	mov	r0, r3
 800f024:	f7f6 fb7f 	bl	8005726 <HAL_PCD_SetAddress>
 800f028:	4603      	mov	r3, r0
 800f02a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f02c:	7bfb      	ldrb	r3, [r7, #15]
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 f8b0 	bl	800f194 <USBD_Get_USB_Status>
 800f034:	4603      	mov	r3, r0
 800f036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f038:	7bbb      	ldrb	r3, [r7, #14]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3710      	adds	r7, #16
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}

0800f042 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f042:	b580      	push	{r7, lr}
 800f044:	b086      	sub	sp, #24
 800f046:	af00      	add	r7, sp, #0
 800f048:	60f8      	str	r0, [r7, #12]
 800f04a:	607a      	str	r2, [r7, #4]
 800f04c:	603b      	str	r3, [r7, #0]
 800f04e:	460b      	mov	r3, r1
 800f050:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f052:	2300      	movs	r3, #0
 800f054:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f056:	2300      	movs	r3, #0
 800f058:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f060:	7af9      	ldrb	r1, [r7, #11]
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	f7f6 fc74 	bl	8005952 <HAL_PCD_EP_Transmit>
 800f06a:	4603      	mov	r3, r0
 800f06c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f06e:	7dfb      	ldrb	r3, [r7, #23]
 800f070:	4618      	mov	r0, r3
 800f072:	f000 f88f 	bl	800f194 <USBD_Get_USB_Status>
 800f076:	4603      	mov	r3, r0
 800f078:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f07a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3718      	adds	r7, #24
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b086      	sub	sp, #24
 800f088:	af00      	add	r7, sp, #0
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	607a      	str	r2, [r7, #4]
 800f08e:	603b      	str	r3, [r7, #0]
 800f090:	460b      	mov	r3, r1
 800f092:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f094:	2300      	movs	r3, #0
 800f096:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f098:	2300      	movs	r3, #0
 800f09a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f0a2:	7af9      	ldrb	r1, [r7, #11]
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	f7f6 fc04 	bl	80058b4 <HAL_PCD_EP_Receive>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0b0:	7dfb      	ldrb	r3, [r7, #23]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f000 f86e 	bl	800f194 <USBD_Get_USB_Status>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f0bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3718      	adds	r7, #24
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b082      	sub	sp, #8
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0d8:	78fa      	ldrb	r2, [r7, #3]
 800f0da:	4611      	mov	r1, r2
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7f6 fc23 	bl	8005928 <HAL_PCD_EP_GetRxCount>
 800f0e2:	4603      	mov	r3, r0
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3708      	adds	r7, #8
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f0f8:	78fb      	ldrb	r3, [r7, #3]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d002      	beq.n	800f104 <HAL_PCDEx_LPM_Callback+0x18>
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	d013      	beq.n	800f12a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f102:	e023      	b.n	800f14c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	699b      	ldr	r3, [r3, #24]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d007      	beq.n	800f11c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f10c:	f000 f83c 	bl	800f188 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f110:	4b10      	ldr	r3, [pc, #64]	; (800f154 <HAL_PCDEx_LPM_Callback+0x68>)
 800f112:	691b      	ldr	r3, [r3, #16]
 800f114:	4a0f      	ldr	r2, [pc, #60]	; (800f154 <HAL_PCDEx_LPM_Callback+0x68>)
 800f116:	f023 0306 	bic.w	r3, r3, #6
 800f11a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f122:	4618      	mov	r0, r3
 800f124:	f7fb ff2d 	bl	800af82 <USBD_LL_Resume>
    break;
 800f128:	e010      	b.n	800f14c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f130:	4618      	mov	r0, r3
 800f132:	f7fb ff11 	bl	800af58 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	699b      	ldr	r3, [r3, #24]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d005      	beq.n	800f14a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f13e:	4b05      	ldr	r3, [pc, #20]	; (800f154 <HAL_PCDEx_LPM_Callback+0x68>)
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	4a04      	ldr	r2, [pc, #16]	; (800f154 <HAL_PCDEx_LPM_Callback+0x68>)
 800f144:	f043 0306 	orr.w	r3, r3, #6
 800f148:	6113      	str	r3, [r2, #16]
    break;
 800f14a:	bf00      	nop
}
 800f14c:	bf00      	nop
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	e000ed00 	.word	0xe000ed00

0800f158 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f160:	4b03      	ldr	r3, [pc, #12]	; (800f170 <USBD_static_malloc+0x18>)
}
 800f162:	4618      	mov	r0, r3
 800f164:	370c      	adds	r7, #12
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr
 800f16e:	bf00      	nop
 800f170:	20000508 	.word	0x20000508

0800f174 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]

}
 800f17c:	bf00      	nop
 800f17e:	370c      	adds	r7, #12
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr

0800f188 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f18c:	f7f2 fab4 	bl	80016f8 <SystemClock_Config>
}
 800f190:	bf00      	nop
 800f192:	bd80      	pop	{r7, pc}

0800f194 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f194:	b480      	push	{r7}
 800f196:	b085      	sub	sp, #20
 800f198:	af00      	add	r7, sp, #0
 800f19a:	4603      	mov	r3, r0
 800f19c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f1a2:	79fb      	ldrb	r3, [r7, #7]
 800f1a4:	2b03      	cmp	r3, #3
 800f1a6:	d817      	bhi.n	800f1d8 <USBD_Get_USB_Status+0x44>
 800f1a8:	a201      	add	r2, pc, #4	; (adr r2, 800f1b0 <USBD_Get_USB_Status+0x1c>)
 800f1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ae:	bf00      	nop
 800f1b0:	0800f1c1 	.word	0x0800f1c1
 800f1b4:	0800f1c7 	.word	0x0800f1c7
 800f1b8:	0800f1cd 	.word	0x0800f1cd
 800f1bc:	0800f1d3 	.word	0x0800f1d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f1c4:	e00b      	b.n	800f1de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f1c6:	2303      	movs	r3, #3
 800f1c8:	73fb      	strb	r3, [r7, #15]
    break;
 800f1ca:	e008      	b.n	800f1de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f1d0:	e005      	b.n	800f1de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f1d2:	2303      	movs	r3, #3
 800f1d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f1d6:	e002      	b.n	800f1de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f1d8:	2303      	movs	r3, #3
 800f1da:	73fb      	strb	r3, [r7, #15]
    break;
 800f1dc:	bf00      	nop
  }
  return usb_status;
 800f1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3714      	adds	r7, #20
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr

0800f1ec <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800f1f0:	4b05      	ldr	r3, [pc, #20]	; (800f208 <UTIL_LPM_Init+0x1c>)
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800f1f6:	4b05      	ldr	r3, [pc, #20]	; (800f20c <UTIL_LPM_Init+0x20>)
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800f1fc:	bf00      	nop
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop
 800f208:	20000728 	.word	0x20000728
 800f20c:	2000072c 	.word	0x2000072c

0800f210 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800f210:	b480      	push	{r7}
 800f212:	b087      	sub	sp, #28
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	460b      	mov	r3, r1
 800f21a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f21c:	f3ef 8310 	mrs	r3, PRIMASK
 800f220:	613b      	str	r3, [r7, #16]
  return(result);
 800f222:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800f224:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f226:	b672      	cpsid	i
  
  switch(state)
 800f228:	78fb      	ldrb	r3, [r7, #3]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d009      	beq.n	800f242 <UTIL_LPM_SetOffMode+0x32>
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d000      	beq.n	800f234 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800f232:	e00e      	b.n	800f252 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800f234:	4b0c      	ldr	r3, [pc, #48]	; (800f268 <UTIL_LPM_SetOffMode+0x58>)
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	4313      	orrs	r3, r2
 800f23c:	4a0a      	ldr	r2, [pc, #40]	; (800f268 <UTIL_LPM_SetOffMode+0x58>)
 800f23e:	6013      	str	r3, [r2, #0]
      break;
 800f240:	e007      	b.n	800f252 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	43da      	mvns	r2, r3
 800f246:	4b08      	ldr	r3, [pc, #32]	; (800f268 <UTIL_LPM_SetOffMode+0x58>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	4013      	ands	r3, r2
 800f24c:	4a06      	ldr	r2, [pc, #24]	; (800f268 <UTIL_LPM_SetOffMode+0x58>)
 800f24e:	6013      	str	r3, [r2, #0]
      break;
 800f250:	bf00      	nop
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f25c:	bf00      	nop
 800f25e:	371c      	adds	r7, #28
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr
 800f268:	2000072c 	.word	0x2000072c

0800f26c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b08c      	sub	sp, #48	; 0x30
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800f274:	4b65      	ldr	r3, [pc, #404]	; (800f40c <UTIL_SEQ_Run+0x1a0>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800f27a:	4b64      	ldr	r3, [pc, #400]	; (800f40c <UTIL_SEQ_Run+0x1a0>)
 800f27c:	681a      	ldr	r2, [r3, #0]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	4013      	ands	r3, r2
 800f282:	4a62      	ldr	r2, [pc, #392]	; (800f40c <UTIL_SEQ_Run+0x1a0>)
 800f284:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800f286:	e081      	b.n	800f38c <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 800f288:	2300      	movs	r3, #0
 800f28a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800f28c:	e002      	b.n	800f294 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	3301      	adds	r3, #1
 800f292:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800f294:	4a5e      	ldr	r2, [pc, #376]	; (800f410 <UTIL_SEQ_Run+0x1a4>)
 800f296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f298:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f29c:	4b5d      	ldr	r3, [pc, #372]	; (800f414 <UTIL_SEQ_Run+0x1a8>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	401a      	ands	r2, r3
 800f2a2:	4b5a      	ldr	r3, [pc, #360]	; (800f40c <UTIL_SEQ_Run+0x1a0>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4013      	ands	r3, r2
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d0f0      	beq.n	800f28e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800f2ac:	4a58      	ldr	r2, [pc, #352]	; (800f410 <UTIL_SEQ_Run+0x1a4>)
 800f2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f2b4:	4b57      	ldr	r3, [pc, #348]	; (800f414 <UTIL_SEQ_Run+0x1a8>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	401a      	ands	r2, r3
 800f2ba:	4b54      	ldr	r3, [pc, #336]	; (800f40c <UTIL_SEQ_Run+0x1a0>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	4013      	ands	r3, r2
 800f2c0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800f2c2:	4a53      	ldr	r2, [pc, #332]	; (800f410 <UTIL_SEQ_Run+0x1a4>)
 800f2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c6:	00db      	lsls	r3, r3, #3
 800f2c8:	4413      	add	r3, r2
 800f2ca:	685a      	ldr	r2, [r3, #4]
 800f2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ce:	4013      	ands	r3, r2
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d106      	bne.n	800f2e2 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800f2d4:	4a4e      	ldr	r2, [pc, #312]	; (800f410 <UTIL_SEQ_Run+0x1a4>)
 800f2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d8:	00db      	lsls	r3, r3, #3
 800f2da:	4413      	add	r3, r2
 800f2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f2e0:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f2e2:	4a4b      	ldr	r2, [pc, #300]	; (800f410 <UTIL_SEQ_Run+0x1a4>)
 800f2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e6:	00db      	lsls	r3, r3, #3
 800f2e8:	4413      	add	r3, r2
 800f2ea:	685a      	ldr	r2, [r3, #4]
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ee:	4013      	ands	r3, r2
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f000 f98f 	bl	800f614 <SEQ_BitPosition>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	4b47      	ldr	r3, [pc, #284]	; (800f418 <UTIL_SEQ_Run+0x1ac>)
 800f2fc:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f2fe:	4a44      	ldr	r2, [pc, #272]	; (800f410 <UTIL_SEQ_Run+0x1a4>)
 800f300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f302:	00db      	lsls	r3, r3, #3
 800f304:	4413      	add	r3, r2
 800f306:	685a      	ldr	r2, [r3, #4]
 800f308:	4b43      	ldr	r3, [pc, #268]	; (800f418 <UTIL_SEQ_Run+0x1ac>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2101      	movs	r1, #1
 800f30e:	fa01 f303 	lsl.w	r3, r1, r3
 800f312:	43db      	mvns	r3, r3
 800f314:	401a      	ands	r2, r3
 800f316:	493e      	ldr	r1, [pc, #248]	; (800f410 <UTIL_SEQ_Run+0x1a4>)
 800f318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31a:	00db      	lsls	r3, r3, #3
 800f31c:	440b      	add	r3, r1
 800f31e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f320:	f3ef 8310 	mrs	r3, PRIMASK
 800f324:	61bb      	str	r3, [r7, #24]
  return(result);
 800f326:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f328:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800f32a:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800f32c:	4b3a      	ldr	r3, [pc, #232]	; (800f418 <UTIL_SEQ_Run+0x1ac>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2201      	movs	r2, #1
 800f332:	fa02 f303 	lsl.w	r3, r2, r3
 800f336:	43da      	mvns	r2, r3
 800f338:	4b38      	ldr	r3, [pc, #224]	; (800f41c <UTIL_SEQ_Run+0x1b0>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4013      	ands	r3, r2
 800f33e:	4a37      	ldr	r2, [pc, #220]	; (800f41c <UTIL_SEQ_Run+0x1b0>)
 800f340:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f342:	2302      	movs	r3, #2
 800f344:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f346:	e013      	b.n	800f370 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800f348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34a:	3b01      	subs	r3, #1
 800f34c:	4a30      	ldr	r2, [pc, #192]	; (800f410 <UTIL_SEQ_Run+0x1a4>)
 800f34e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800f352:	4b31      	ldr	r3, [pc, #196]	; (800f418 <UTIL_SEQ_Run+0x1ac>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2201      	movs	r2, #1
 800f358:	fa02 f303 	lsl.w	r3, r2, r3
 800f35c:	43da      	mvns	r2, r3
 800f35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f360:	3b01      	subs	r3, #1
 800f362:	400a      	ands	r2, r1
 800f364:	492a      	ldr	r1, [pc, #168]	; (800f410 <UTIL_SEQ_Run+0x1a4>)
 800f366:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36c:	3b01      	subs	r3, #1
 800f36e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1e8      	bne.n	800f348 <UTIL_SEQ_Run+0xdc>
 800f376:	6a3b      	ldr	r3, [r7, #32]
 800f378:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800f380:	4b25      	ldr	r3, [pc, #148]	; (800f418 <UTIL_SEQ_Run+0x1ac>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a26      	ldr	r2, [pc, #152]	; (800f420 <UTIL_SEQ_Run+0x1b4>)
 800f386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f38a:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800f38c:	4b23      	ldr	r3, [pc, #140]	; (800f41c <UTIL_SEQ_Run+0x1b0>)
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	4b20      	ldr	r3, [pc, #128]	; (800f414 <UTIL_SEQ_Run+0x1a8>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	401a      	ands	r2, r3
 800f396:	4b1d      	ldr	r3, [pc, #116]	; (800f40c <UTIL_SEQ_Run+0x1a0>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4013      	ands	r3, r2
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d007      	beq.n	800f3b0 <UTIL_SEQ_Run+0x144>
 800f3a0:	4b20      	ldr	r3, [pc, #128]	; (800f424 <UTIL_SEQ_Run+0x1b8>)
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	4b20      	ldr	r3, [pc, #128]	; (800f428 <UTIL_SEQ_Run+0x1bc>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4013      	ands	r3, r2
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f43f af6c 	beq.w	800f288 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800f3b0:	4b19      	ldr	r3, [pc, #100]	; (800f418 <UTIL_SEQ_Run+0x1ac>)
 800f3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f3b6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800f3b8:	f000 f91e 	bl	800f5f8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3bc:	f3ef 8310 	mrs	r3, PRIMASK
 800f3c0:	613b      	str	r3, [r7, #16]
  return(result);
 800f3c2:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f3c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f3c6:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800f3c8:	4b14      	ldr	r3, [pc, #80]	; (800f41c <UTIL_SEQ_Run+0x1b0>)
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	4b11      	ldr	r3, [pc, #68]	; (800f414 <UTIL_SEQ_Run+0x1a8>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	401a      	ands	r2, r3
 800f3d2:	4b0e      	ldr	r3, [pc, #56]	; (800f40c <UTIL_SEQ_Run+0x1a0>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4013      	ands	r3, r2
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d108      	bne.n	800f3ee <UTIL_SEQ_Run+0x182>
 800f3dc:	4b11      	ldr	r3, [pc, #68]	; (800f424 <UTIL_SEQ_Run+0x1b8>)
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	4b11      	ldr	r3, [pc, #68]	; (800f428 <UTIL_SEQ_Run+0x1bc>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	4013      	ands	r3, r2
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d101      	bne.n	800f3ee <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 800f3ea:	f7f1 f966 	bl	80006ba <UTIL_SEQ_Idle>
 800f3ee:	69fb      	ldr	r3, [r7, #28]
 800f3f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 800f3f8:	f000 f905 	bl	800f606 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800f3fc:	4a03      	ldr	r2, [pc, #12]	; (800f40c <UTIL_SEQ_Run+0x1a0>)
 800f3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f400:	6013      	str	r3, [r2, #0]

  return;
 800f402:	bf00      	nop
}
 800f404:	3730      	adds	r7, #48	; 0x30
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	200001c0 	.word	0x200001c0
 800f410:	200007c0 	.word	0x200007c0
 800f414:	200001bc 	.word	0x200001bc
 800f418:	2000073c 	.word	0x2000073c
 800f41c:	20000730 	.word	0x20000730
 800f420:	20000740 	.word	0x20000740
 800f424:	20000734 	.word	0x20000734
 800f428:	20000738 	.word	0x20000738

0800f42c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b088      	sub	sp, #32
 800f430:	af00      	add	r7, sp, #0
 800f432:	60f8      	str	r0, [r7, #12]
 800f434:	60b9      	str	r1, [r7, #8]
 800f436:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f438:	f3ef 8310 	mrs	r3, PRIMASK
 800f43c:	617b      	str	r3, [r7, #20]
  return(result);
 800f43e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800f440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f442:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f000 f8e5 	bl	800f614 <SEQ_BitPosition>
 800f44a:	4603      	mov	r3, r0
 800f44c:	4619      	mov	r1, r3
 800f44e:	4a06      	ldr	r2, [pc, #24]	; (800f468 <UTIL_SEQ_RegTask+0x3c>)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f45a:	69bb      	ldr	r3, [r7, #24]
 800f45c:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800f460:	bf00      	nop
}
 800f462:	3720      	adds	r7, #32
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	20000740 	.word	0x20000740

0800f46c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800f46c:	b480      	push	{r7}
 800f46e:	b087      	sub	sp, #28
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f476:	f3ef 8310 	mrs	r3, PRIMASK
 800f47a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f47c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f47e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f480:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 800f482:	4b0d      	ldr	r3, [pc, #52]	; (800f4b8 <UTIL_SEQ_SetTask+0x4c>)
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4313      	orrs	r3, r2
 800f48a:	4a0b      	ldr	r2, [pc, #44]	; (800f4b8 <UTIL_SEQ_SetTask+0x4c>)
 800f48c:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f48e:	4a0b      	ldr	r2, [pc, #44]	; (800f4bc <UTIL_SEQ_SetTask+0x50>)
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	431a      	orrs	r2, r3
 800f49a:	4908      	ldr	r1, [pc, #32]	; (800f4bc <UTIL_SEQ_SetTask+0x50>)
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f4ac:	bf00      	nop
}
 800f4ae:	371c      	adds	r7, #28
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	20000730 	.word	0x20000730
 800f4bc:	200007c0 	.word	0x200007c0

0800f4c0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b087      	sub	sp, #28
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4c8:	f3ef 8310 	mrs	r3, PRIMASK
 800f4cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f4d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f4d2:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	43da      	mvns	r2, r3
 800f4d8:	4b07      	ldr	r3, [pc, #28]	; (800f4f8 <UTIL_SEQ_PauseTask+0x38>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4013      	ands	r3, r2
 800f4de:	4a06      	ldr	r2, [pc, #24]	; (800f4f8 <UTIL_SEQ_PauseTask+0x38>)
 800f4e0:	6013      	str	r3, [r2, #0]
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f4ec:	bf00      	nop
}
 800f4ee:	371c      	adds	r7, #28
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr
 800f4f8:	200001bc 	.word	0x200001bc

0800f4fc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b087      	sub	sp, #28
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f504:	f3ef 8310 	mrs	r3, PRIMASK
 800f508:	60fb      	str	r3, [r7, #12]
  return(result);
 800f50a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f50c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f50e:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 800f510:	4b08      	ldr	r3, [pc, #32]	; (800f534 <UTIL_SEQ_ResumeTask+0x38>)
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	4313      	orrs	r3, r2
 800f518:	4a06      	ldr	r2, [pc, #24]	; (800f534 <UTIL_SEQ_ResumeTask+0x38>)
 800f51a:	6013      	str	r3, [r2, #0]
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f526:	bf00      	nop
}
 800f528:	371c      	adds	r7, #28
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr
 800f532:	bf00      	nop
 800f534:	200001bc 	.word	0x200001bc

0800f538 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800f538:	b480      	push	{r7}
 800f53a:	b087      	sub	sp, #28
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f540:	f3ef 8310 	mrs	r3, PRIMASK
 800f544:	60fb      	str	r3, [r7, #12]
  return(result);
 800f546:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f548:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f54a:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 800f54c:	4b08      	ldr	r3, [pc, #32]	; (800f570 <UTIL_SEQ_SetEvt+0x38>)
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4313      	orrs	r3, r2
 800f554:	4a06      	ldr	r2, [pc, #24]	; (800f570 <UTIL_SEQ_SetEvt+0x38>)
 800f556:	6013      	str	r3, [r2, #0]
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f562:	bf00      	nop
}
 800f564:	371c      	adds	r7, #28
 800f566:	46bd      	mov	sp, r7
 800f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56c:	4770      	bx	lr
 800f56e:	bf00      	nop
 800f570:	20000734 	.word	0x20000734

0800f574 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b086      	sub	sp, #24
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800f57c:	4b1b      	ldr	r3, [pc, #108]	; (800f5ec <UTIL_SEQ_WaitEvt+0x78>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800f582:	4b1a      	ldr	r3, [pc, #104]	; (800f5ec <UTIL_SEQ_WaitEvt+0x78>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f58a:	d102      	bne.n	800f592 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800f58c:	2300      	movs	r3, #0
 800f58e:	617b      	str	r3, [r7, #20]
 800f590:	e005      	b.n	800f59e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800f592:	4b16      	ldr	r3, [pc, #88]	; (800f5ec <UTIL_SEQ_WaitEvt+0x78>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2201      	movs	r2, #1
 800f598:	fa02 f303 	lsl.w	r3, r2, r3
 800f59c:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800f59e:	4b14      	ldr	r3, [pc, #80]	; (800f5f0 <UTIL_SEQ_WaitEvt+0x7c>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800f5a4:	4a12      	ldr	r2, [pc, #72]	; (800f5f0 <UTIL_SEQ_WaitEvt+0x7c>)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800f5aa:	e005      	b.n	800f5b8 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800f5ac:	4b10      	ldr	r3, [pc, #64]	; (800f5f0 <UTIL_SEQ_WaitEvt+0x7c>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	6978      	ldr	r0, [r7, #20]
 800f5b4:	f7f1 f888 	bl	80006c8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800f5b8:	4b0e      	ldr	r3, [pc, #56]	; (800f5f4 <UTIL_SEQ_WaitEvt+0x80>)
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	4b0c      	ldr	r3, [pc, #48]	; (800f5f0 <UTIL_SEQ_WaitEvt+0x7c>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4013      	ands	r3, r2
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d0f2      	beq.n	800f5ac <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800f5c6:	4a09      	ldr	r2, [pc, #36]	; (800f5ec <UTIL_SEQ_WaitEvt+0x78>)
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800f5cc:	4b08      	ldr	r3, [pc, #32]	; (800f5f0 <UTIL_SEQ_WaitEvt+0x7c>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	43da      	mvns	r2, r3
 800f5d2:	4b08      	ldr	r3, [pc, #32]	; (800f5f4 <UTIL_SEQ_WaitEvt+0x80>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4013      	ands	r3, r2
 800f5d8:	4a06      	ldr	r2, [pc, #24]	; (800f5f4 <UTIL_SEQ_WaitEvt+0x80>)
 800f5da:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800f5dc:	4a04      	ldr	r2, [pc, #16]	; (800f5f0 <UTIL_SEQ_WaitEvt+0x7c>)
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	6013      	str	r3, [r2, #0]

  return;
 800f5e2:	bf00      	nop
}
 800f5e4:	3718      	adds	r7, #24
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	2000073c 	.word	0x2000073c
 800f5f0:	20000738 	.word	0x20000738
 800f5f4:	20000734 	.word	0x20000734

0800f5f8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f5fc:	bf00      	nop
}
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr

0800f606 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800f606:	b480      	push	{r7}
 800f608:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f60a:	bf00      	nop
}
 800f60c:	46bd      	mov	sp, r7
 800f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f612:	4770      	bx	lr

0800f614 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800f614:	b480      	push	{r7}
 800f616:	b085      	sub	sp, #20
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800f61c:	2300      	movs	r3, #0
 800f61e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	0c1b      	lsrs	r3, r3, #16
 800f624:	041b      	lsls	r3, r3, #16
 800f626:	2b00      	cmp	r3, #0
 800f628:	d104      	bne.n	800f634 <SEQ_BitPosition+0x20>
 800f62a:	2310      	movs	r3, #16
 800f62c:	73fb      	strb	r3, [r7, #15]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	041b      	lsls	r3, r3, #16
 800f632:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d105      	bne.n	800f64a <SEQ_BitPosition+0x36>
 800f63e:	7bfb      	ldrb	r3, [r7, #15]
 800f640:	3308      	adds	r3, #8
 800f642:	73fb      	strb	r3, [r7, #15]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	021b      	lsls	r3, r3, #8
 800f648:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f650:	2b00      	cmp	r3, #0
 800f652:	d105      	bne.n	800f660 <SEQ_BitPosition+0x4c>
 800f654:	7bfb      	ldrb	r3, [r7, #15]
 800f656:	3304      	adds	r3, #4
 800f658:	73fb      	strb	r3, [r7, #15]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	011b      	lsls	r3, r3, #4
 800f65e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	0f1b      	lsrs	r3, r3, #28
 800f664:	4a07      	ldr	r2, [pc, #28]	; (800f684 <SEQ_BitPosition+0x70>)
 800f666:	5cd2      	ldrb	r2, [r2, r3]
 800f668:	7bfb      	ldrb	r3, [r7, #15]
 800f66a:	4413      	add	r3, r2
 800f66c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800f66e:	7bfb      	ldrb	r3, [r7, #15]
 800f670:	f1c3 031f 	rsb	r3, r3, #31
 800f674:	b2db      	uxtb	r3, r3
}
 800f676:	4618      	mov	r0, r3
 800f678:	3714      	adds	r7, #20
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	080118b0 	.word	0x080118b0

0800f688 <__errno>:
 800f688:	4b01      	ldr	r3, [pc, #4]	; (800f690 <__errno+0x8>)
 800f68a:	6818      	ldr	r0, [r3, #0]
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop
 800f690:	200001c4 	.word	0x200001c4

0800f694 <__libc_init_array>:
 800f694:	b570      	push	{r4, r5, r6, lr}
 800f696:	4e0d      	ldr	r6, [pc, #52]	; (800f6cc <__libc_init_array+0x38>)
 800f698:	4c0d      	ldr	r4, [pc, #52]	; (800f6d0 <__libc_init_array+0x3c>)
 800f69a:	1ba4      	subs	r4, r4, r6
 800f69c:	10a4      	asrs	r4, r4, #2
 800f69e:	2500      	movs	r5, #0
 800f6a0:	42a5      	cmp	r5, r4
 800f6a2:	d109      	bne.n	800f6b8 <__libc_init_array+0x24>
 800f6a4:	4e0b      	ldr	r6, [pc, #44]	; (800f6d4 <__libc_init_array+0x40>)
 800f6a6:	4c0c      	ldr	r4, [pc, #48]	; (800f6d8 <__libc_init_array+0x44>)
 800f6a8:	f001 f914 	bl	80108d4 <_init>
 800f6ac:	1ba4      	subs	r4, r4, r6
 800f6ae:	10a4      	asrs	r4, r4, #2
 800f6b0:	2500      	movs	r5, #0
 800f6b2:	42a5      	cmp	r5, r4
 800f6b4:	d105      	bne.n	800f6c2 <__libc_init_array+0x2e>
 800f6b6:	bd70      	pop	{r4, r5, r6, pc}
 800f6b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f6bc:	4798      	blx	r3
 800f6be:	3501      	adds	r5, #1
 800f6c0:	e7ee      	b.n	800f6a0 <__libc_init_array+0xc>
 800f6c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f6c6:	4798      	blx	r3
 800f6c8:	3501      	adds	r5, #1
 800f6ca:	e7f2      	b.n	800f6b2 <__libc_init_array+0x1e>
 800f6cc:	08011960 	.word	0x08011960
 800f6d0:	08011960 	.word	0x08011960
 800f6d4:	08011960 	.word	0x08011960
 800f6d8:	08011964 	.word	0x08011964

0800f6dc <memcpy>:
 800f6dc:	b510      	push	{r4, lr}
 800f6de:	1e43      	subs	r3, r0, #1
 800f6e0:	440a      	add	r2, r1
 800f6e2:	4291      	cmp	r1, r2
 800f6e4:	d100      	bne.n	800f6e8 <memcpy+0xc>
 800f6e6:	bd10      	pop	{r4, pc}
 800f6e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6f0:	e7f7      	b.n	800f6e2 <memcpy+0x6>

0800f6f2 <memset>:
 800f6f2:	4402      	add	r2, r0
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d100      	bne.n	800f6fc <memset+0xa>
 800f6fa:	4770      	bx	lr
 800f6fc:	f803 1b01 	strb.w	r1, [r3], #1
 800f700:	e7f9      	b.n	800f6f6 <memset+0x4>
	...

0800f704 <_free_r>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	4605      	mov	r5, r0
 800f708:	2900      	cmp	r1, #0
 800f70a:	d045      	beq.n	800f798 <_free_r+0x94>
 800f70c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f710:	1f0c      	subs	r4, r1, #4
 800f712:	2b00      	cmp	r3, #0
 800f714:	bfb8      	it	lt
 800f716:	18e4      	addlt	r4, r4, r3
 800f718:	f000 f9c2 	bl	800faa0 <__malloc_lock>
 800f71c:	4a1f      	ldr	r2, [pc, #124]	; (800f79c <_free_r+0x98>)
 800f71e:	6813      	ldr	r3, [r2, #0]
 800f720:	4610      	mov	r0, r2
 800f722:	b933      	cbnz	r3, 800f732 <_free_r+0x2e>
 800f724:	6063      	str	r3, [r4, #4]
 800f726:	6014      	str	r4, [r2, #0]
 800f728:	4628      	mov	r0, r5
 800f72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f72e:	f000 b9b8 	b.w	800faa2 <__malloc_unlock>
 800f732:	42a3      	cmp	r3, r4
 800f734:	d90c      	bls.n	800f750 <_free_r+0x4c>
 800f736:	6821      	ldr	r1, [r4, #0]
 800f738:	1862      	adds	r2, r4, r1
 800f73a:	4293      	cmp	r3, r2
 800f73c:	bf04      	itt	eq
 800f73e:	681a      	ldreq	r2, [r3, #0]
 800f740:	685b      	ldreq	r3, [r3, #4]
 800f742:	6063      	str	r3, [r4, #4]
 800f744:	bf04      	itt	eq
 800f746:	1852      	addeq	r2, r2, r1
 800f748:	6022      	streq	r2, [r4, #0]
 800f74a:	6004      	str	r4, [r0, #0]
 800f74c:	e7ec      	b.n	800f728 <_free_r+0x24>
 800f74e:	4613      	mov	r3, r2
 800f750:	685a      	ldr	r2, [r3, #4]
 800f752:	b10a      	cbz	r2, 800f758 <_free_r+0x54>
 800f754:	42a2      	cmp	r2, r4
 800f756:	d9fa      	bls.n	800f74e <_free_r+0x4a>
 800f758:	6819      	ldr	r1, [r3, #0]
 800f75a:	1858      	adds	r0, r3, r1
 800f75c:	42a0      	cmp	r0, r4
 800f75e:	d10b      	bne.n	800f778 <_free_r+0x74>
 800f760:	6820      	ldr	r0, [r4, #0]
 800f762:	4401      	add	r1, r0
 800f764:	1858      	adds	r0, r3, r1
 800f766:	4282      	cmp	r2, r0
 800f768:	6019      	str	r1, [r3, #0]
 800f76a:	d1dd      	bne.n	800f728 <_free_r+0x24>
 800f76c:	6810      	ldr	r0, [r2, #0]
 800f76e:	6852      	ldr	r2, [r2, #4]
 800f770:	605a      	str	r2, [r3, #4]
 800f772:	4401      	add	r1, r0
 800f774:	6019      	str	r1, [r3, #0]
 800f776:	e7d7      	b.n	800f728 <_free_r+0x24>
 800f778:	d902      	bls.n	800f780 <_free_r+0x7c>
 800f77a:	230c      	movs	r3, #12
 800f77c:	602b      	str	r3, [r5, #0]
 800f77e:	e7d3      	b.n	800f728 <_free_r+0x24>
 800f780:	6820      	ldr	r0, [r4, #0]
 800f782:	1821      	adds	r1, r4, r0
 800f784:	428a      	cmp	r2, r1
 800f786:	bf04      	itt	eq
 800f788:	6811      	ldreq	r1, [r2, #0]
 800f78a:	6852      	ldreq	r2, [r2, #4]
 800f78c:	6062      	str	r2, [r4, #4]
 800f78e:	bf04      	itt	eq
 800f790:	1809      	addeq	r1, r1, r0
 800f792:	6021      	streq	r1, [r4, #0]
 800f794:	605c      	str	r4, [r3, #4]
 800f796:	e7c7      	b.n	800f728 <_free_r+0x24>
 800f798:	bd38      	pop	{r3, r4, r5, pc}
 800f79a:	bf00      	nop
 800f79c:	200007d0 	.word	0x200007d0

0800f7a0 <_malloc_r>:
 800f7a0:	b570      	push	{r4, r5, r6, lr}
 800f7a2:	1ccd      	adds	r5, r1, #3
 800f7a4:	f025 0503 	bic.w	r5, r5, #3
 800f7a8:	3508      	adds	r5, #8
 800f7aa:	2d0c      	cmp	r5, #12
 800f7ac:	bf38      	it	cc
 800f7ae:	250c      	movcc	r5, #12
 800f7b0:	2d00      	cmp	r5, #0
 800f7b2:	4606      	mov	r6, r0
 800f7b4:	db01      	blt.n	800f7ba <_malloc_r+0x1a>
 800f7b6:	42a9      	cmp	r1, r5
 800f7b8:	d903      	bls.n	800f7c2 <_malloc_r+0x22>
 800f7ba:	230c      	movs	r3, #12
 800f7bc:	6033      	str	r3, [r6, #0]
 800f7be:	2000      	movs	r0, #0
 800f7c0:	bd70      	pop	{r4, r5, r6, pc}
 800f7c2:	f000 f96d 	bl	800faa0 <__malloc_lock>
 800f7c6:	4a21      	ldr	r2, [pc, #132]	; (800f84c <_malloc_r+0xac>)
 800f7c8:	6814      	ldr	r4, [r2, #0]
 800f7ca:	4621      	mov	r1, r4
 800f7cc:	b991      	cbnz	r1, 800f7f4 <_malloc_r+0x54>
 800f7ce:	4c20      	ldr	r4, [pc, #128]	; (800f850 <_malloc_r+0xb0>)
 800f7d0:	6823      	ldr	r3, [r4, #0]
 800f7d2:	b91b      	cbnz	r3, 800f7dc <_malloc_r+0x3c>
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	f000 f869 	bl	800f8ac <_sbrk_r>
 800f7da:	6020      	str	r0, [r4, #0]
 800f7dc:	4629      	mov	r1, r5
 800f7de:	4630      	mov	r0, r6
 800f7e0:	f000 f864 	bl	800f8ac <_sbrk_r>
 800f7e4:	1c43      	adds	r3, r0, #1
 800f7e6:	d124      	bne.n	800f832 <_malloc_r+0x92>
 800f7e8:	230c      	movs	r3, #12
 800f7ea:	6033      	str	r3, [r6, #0]
 800f7ec:	4630      	mov	r0, r6
 800f7ee:	f000 f958 	bl	800faa2 <__malloc_unlock>
 800f7f2:	e7e4      	b.n	800f7be <_malloc_r+0x1e>
 800f7f4:	680b      	ldr	r3, [r1, #0]
 800f7f6:	1b5b      	subs	r3, r3, r5
 800f7f8:	d418      	bmi.n	800f82c <_malloc_r+0x8c>
 800f7fa:	2b0b      	cmp	r3, #11
 800f7fc:	d90f      	bls.n	800f81e <_malloc_r+0x7e>
 800f7fe:	600b      	str	r3, [r1, #0]
 800f800:	50cd      	str	r5, [r1, r3]
 800f802:	18cc      	adds	r4, r1, r3
 800f804:	4630      	mov	r0, r6
 800f806:	f000 f94c 	bl	800faa2 <__malloc_unlock>
 800f80a:	f104 000b 	add.w	r0, r4, #11
 800f80e:	1d23      	adds	r3, r4, #4
 800f810:	f020 0007 	bic.w	r0, r0, #7
 800f814:	1ac3      	subs	r3, r0, r3
 800f816:	d0d3      	beq.n	800f7c0 <_malloc_r+0x20>
 800f818:	425a      	negs	r2, r3
 800f81a:	50e2      	str	r2, [r4, r3]
 800f81c:	e7d0      	b.n	800f7c0 <_malloc_r+0x20>
 800f81e:	428c      	cmp	r4, r1
 800f820:	684b      	ldr	r3, [r1, #4]
 800f822:	bf16      	itet	ne
 800f824:	6063      	strne	r3, [r4, #4]
 800f826:	6013      	streq	r3, [r2, #0]
 800f828:	460c      	movne	r4, r1
 800f82a:	e7eb      	b.n	800f804 <_malloc_r+0x64>
 800f82c:	460c      	mov	r4, r1
 800f82e:	6849      	ldr	r1, [r1, #4]
 800f830:	e7cc      	b.n	800f7cc <_malloc_r+0x2c>
 800f832:	1cc4      	adds	r4, r0, #3
 800f834:	f024 0403 	bic.w	r4, r4, #3
 800f838:	42a0      	cmp	r0, r4
 800f83a:	d005      	beq.n	800f848 <_malloc_r+0xa8>
 800f83c:	1a21      	subs	r1, r4, r0
 800f83e:	4630      	mov	r0, r6
 800f840:	f000 f834 	bl	800f8ac <_sbrk_r>
 800f844:	3001      	adds	r0, #1
 800f846:	d0cf      	beq.n	800f7e8 <_malloc_r+0x48>
 800f848:	6025      	str	r5, [r4, #0]
 800f84a:	e7db      	b.n	800f804 <_malloc_r+0x64>
 800f84c:	200007d0 	.word	0x200007d0
 800f850:	200007d4 	.word	0x200007d4

0800f854 <iprintf>:
 800f854:	b40f      	push	{r0, r1, r2, r3}
 800f856:	4b0a      	ldr	r3, [pc, #40]	; (800f880 <iprintf+0x2c>)
 800f858:	b513      	push	{r0, r1, r4, lr}
 800f85a:	681c      	ldr	r4, [r3, #0]
 800f85c:	b124      	cbz	r4, 800f868 <iprintf+0x14>
 800f85e:	69a3      	ldr	r3, [r4, #24]
 800f860:	b913      	cbnz	r3, 800f868 <iprintf+0x14>
 800f862:	4620      	mov	r0, r4
 800f864:	f000 f892 	bl	800f98c <__sinit>
 800f868:	ab05      	add	r3, sp, #20
 800f86a:	9a04      	ldr	r2, [sp, #16]
 800f86c:	68a1      	ldr	r1, [r4, #8]
 800f86e:	9301      	str	r3, [sp, #4]
 800f870:	4620      	mov	r0, r4
 800f872:	f000 fa93 	bl	800fd9c <_vfiprintf_r>
 800f876:	b002      	add	sp, #8
 800f878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f87c:	b004      	add	sp, #16
 800f87e:	4770      	bx	lr
 800f880:	200001c4 	.word	0x200001c4

0800f884 <putchar>:
 800f884:	b538      	push	{r3, r4, r5, lr}
 800f886:	4b08      	ldr	r3, [pc, #32]	; (800f8a8 <putchar+0x24>)
 800f888:	681c      	ldr	r4, [r3, #0]
 800f88a:	4605      	mov	r5, r0
 800f88c:	b124      	cbz	r4, 800f898 <putchar+0x14>
 800f88e:	69a3      	ldr	r3, [r4, #24]
 800f890:	b913      	cbnz	r3, 800f898 <putchar+0x14>
 800f892:	4620      	mov	r0, r4
 800f894:	f000 f87a 	bl	800f98c <__sinit>
 800f898:	68a2      	ldr	r2, [r4, #8]
 800f89a:	4629      	mov	r1, r5
 800f89c:	4620      	mov	r0, r4
 800f89e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8a2:	f000 bd19 	b.w	80102d8 <_putc_r>
 800f8a6:	bf00      	nop
 800f8a8:	200001c4 	.word	0x200001c4

0800f8ac <_sbrk_r>:
 800f8ac:	b538      	push	{r3, r4, r5, lr}
 800f8ae:	4c06      	ldr	r4, [pc, #24]	; (800f8c8 <_sbrk_r+0x1c>)
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	4605      	mov	r5, r0
 800f8b4:	4608      	mov	r0, r1
 800f8b6:	6023      	str	r3, [r4, #0]
 800f8b8:	f7f2 fbd8 	bl	800206c <_sbrk>
 800f8bc:	1c43      	adds	r3, r0, #1
 800f8be:	d102      	bne.n	800f8c6 <_sbrk_r+0x1a>
 800f8c0:	6823      	ldr	r3, [r4, #0]
 800f8c2:	b103      	cbz	r3, 800f8c6 <_sbrk_r+0x1a>
 800f8c4:	602b      	str	r3, [r5, #0]
 800f8c6:	bd38      	pop	{r3, r4, r5, pc}
 800f8c8:	200020b8 	.word	0x200020b8

0800f8cc <siprintf>:
 800f8cc:	b40e      	push	{r1, r2, r3}
 800f8ce:	b500      	push	{lr}
 800f8d0:	b09c      	sub	sp, #112	; 0x70
 800f8d2:	ab1d      	add	r3, sp, #116	; 0x74
 800f8d4:	9002      	str	r0, [sp, #8]
 800f8d6:	9006      	str	r0, [sp, #24]
 800f8d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f8dc:	4809      	ldr	r0, [pc, #36]	; (800f904 <siprintf+0x38>)
 800f8de:	9107      	str	r1, [sp, #28]
 800f8e0:	9104      	str	r1, [sp, #16]
 800f8e2:	4909      	ldr	r1, [pc, #36]	; (800f908 <siprintf+0x3c>)
 800f8e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8e8:	9105      	str	r1, [sp, #20]
 800f8ea:	6800      	ldr	r0, [r0, #0]
 800f8ec:	9301      	str	r3, [sp, #4]
 800f8ee:	a902      	add	r1, sp, #8
 800f8f0:	f000 f932 	bl	800fb58 <_svfiprintf_r>
 800f8f4:	9b02      	ldr	r3, [sp, #8]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	701a      	strb	r2, [r3, #0]
 800f8fa:	b01c      	add	sp, #112	; 0x70
 800f8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f900:	b003      	add	sp, #12
 800f902:	4770      	bx	lr
 800f904:	200001c4 	.word	0x200001c4
 800f908:	ffff0208 	.word	0xffff0208

0800f90c <std>:
 800f90c:	2300      	movs	r3, #0
 800f90e:	b510      	push	{r4, lr}
 800f910:	4604      	mov	r4, r0
 800f912:	e9c0 3300 	strd	r3, r3, [r0]
 800f916:	6083      	str	r3, [r0, #8]
 800f918:	8181      	strh	r1, [r0, #12]
 800f91a:	6643      	str	r3, [r0, #100]	; 0x64
 800f91c:	81c2      	strh	r2, [r0, #14]
 800f91e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f922:	6183      	str	r3, [r0, #24]
 800f924:	4619      	mov	r1, r3
 800f926:	2208      	movs	r2, #8
 800f928:	305c      	adds	r0, #92	; 0x5c
 800f92a:	f7ff fee2 	bl	800f6f2 <memset>
 800f92e:	4b05      	ldr	r3, [pc, #20]	; (800f944 <std+0x38>)
 800f930:	6263      	str	r3, [r4, #36]	; 0x24
 800f932:	4b05      	ldr	r3, [pc, #20]	; (800f948 <std+0x3c>)
 800f934:	62a3      	str	r3, [r4, #40]	; 0x28
 800f936:	4b05      	ldr	r3, [pc, #20]	; (800f94c <std+0x40>)
 800f938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f93a:	4b05      	ldr	r3, [pc, #20]	; (800f950 <std+0x44>)
 800f93c:	6224      	str	r4, [r4, #32]
 800f93e:	6323      	str	r3, [r4, #48]	; 0x30
 800f940:	bd10      	pop	{r4, pc}
 800f942:	bf00      	nop
 800f944:	08010345 	.word	0x08010345
 800f948:	08010367 	.word	0x08010367
 800f94c:	0801039f 	.word	0x0801039f
 800f950:	080103c3 	.word	0x080103c3

0800f954 <_cleanup_r>:
 800f954:	4901      	ldr	r1, [pc, #4]	; (800f95c <_cleanup_r+0x8>)
 800f956:	f000 b885 	b.w	800fa64 <_fwalk_reent>
 800f95a:	bf00      	nop
 800f95c:	0801069d 	.word	0x0801069d

0800f960 <__sfmoreglue>:
 800f960:	b570      	push	{r4, r5, r6, lr}
 800f962:	1e4a      	subs	r2, r1, #1
 800f964:	2568      	movs	r5, #104	; 0x68
 800f966:	4355      	muls	r5, r2
 800f968:	460e      	mov	r6, r1
 800f96a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f96e:	f7ff ff17 	bl	800f7a0 <_malloc_r>
 800f972:	4604      	mov	r4, r0
 800f974:	b140      	cbz	r0, 800f988 <__sfmoreglue+0x28>
 800f976:	2100      	movs	r1, #0
 800f978:	e9c0 1600 	strd	r1, r6, [r0]
 800f97c:	300c      	adds	r0, #12
 800f97e:	60a0      	str	r0, [r4, #8]
 800f980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f984:	f7ff feb5 	bl	800f6f2 <memset>
 800f988:	4620      	mov	r0, r4
 800f98a:	bd70      	pop	{r4, r5, r6, pc}

0800f98c <__sinit>:
 800f98c:	6983      	ldr	r3, [r0, #24]
 800f98e:	b510      	push	{r4, lr}
 800f990:	4604      	mov	r4, r0
 800f992:	bb33      	cbnz	r3, 800f9e2 <__sinit+0x56>
 800f994:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f998:	6503      	str	r3, [r0, #80]	; 0x50
 800f99a:	4b12      	ldr	r3, [pc, #72]	; (800f9e4 <__sinit+0x58>)
 800f99c:	4a12      	ldr	r2, [pc, #72]	; (800f9e8 <__sinit+0x5c>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	6282      	str	r2, [r0, #40]	; 0x28
 800f9a2:	4298      	cmp	r0, r3
 800f9a4:	bf04      	itt	eq
 800f9a6:	2301      	moveq	r3, #1
 800f9a8:	6183      	streq	r3, [r0, #24]
 800f9aa:	f000 f81f 	bl	800f9ec <__sfp>
 800f9ae:	6060      	str	r0, [r4, #4]
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	f000 f81b 	bl	800f9ec <__sfp>
 800f9b6:	60a0      	str	r0, [r4, #8]
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f000 f817 	bl	800f9ec <__sfp>
 800f9be:	2200      	movs	r2, #0
 800f9c0:	60e0      	str	r0, [r4, #12]
 800f9c2:	2104      	movs	r1, #4
 800f9c4:	6860      	ldr	r0, [r4, #4]
 800f9c6:	f7ff ffa1 	bl	800f90c <std>
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	2109      	movs	r1, #9
 800f9ce:	68a0      	ldr	r0, [r4, #8]
 800f9d0:	f7ff ff9c 	bl	800f90c <std>
 800f9d4:	2202      	movs	r2, #2
 800f9d6:	2112      	movs	r1, #18
 800f9d8:	68e0      	ldr	r0, [r4, #12]
 800f9da:	f7ff ff97 	bl	800f90c <std>
 800f9de:	2301      	movs	r3, #1
 800f9e0:	61a3      	str	r3, [r4, #24]
 800f9e2:	bd10      	pop	{r4, pc}
 800f9e4:	080118c0 	.word	0x080118c0
 800f9e8:	0800f955 	.word	0x0800f955

0800f9ec <__sfp>:
 800f9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ee:	4b1b      	ldr	r3, [pc, #108]	; (800fa5c <__sfp+0x70>)
 800f9f0:	681e      	ldr	r6, [r3, #0]
 800f9f2:	69b3      	ldr	r3, [r6, #24]
 800f9f4:	4607      	mov	r7, r0
 800f9f6:	b913      	cbnz	r3, 800f9fe <__sfp+0x12>
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	f7ff ffc7 	bl	800f98c <__sinit>
 800f9fe:	3648      	adds	r6, #72	; 0x48
 800fa00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fa04:	3b01      	subs	r3, #1
 800fa06:	d503      	bpl.n	800fa10 <__sfp+0x24>
 800fa08:	6833      	ldr	r3, [r6, #0]
 800fa0a:	b133      	cbz	r3, 800fa1a <__sfp+0x2e>
 800fa0c:	6836      	ldr	r6, [r6, #0]
 800fa0e:	e7f7      	b.n	800fa00 <__sfp+0x14>
 800fa10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fa14:	b16d      	cbz	r5, 800fa32 <__sfp+0x46>
 800fa16:	3468      	adds	r4, #104	; 0x68
 800fa18:	e7f4      	b.n	800fa04 <__sfp+0x18>
 800fa1a:	2104      	movs	r1, #4
 800fa1c:	4638      	mov	r0, r7
 800fa1e:	f7ff ff9f 	bl	800f960 <__sfmoreglue>
 800fa22:	6030      	str	r0, [r6, #0]
 800fa24:	2800      	cmp	r0, #0
 800fa26:	d1f1      	bne.n	800fa0c <__sfp+0x20>
 800fa28:	230c      	movs	r3, #12
 800fa2a:	603b      	str	r3, [r7, #0]
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	4620      	mov	r0, r4
 800fa30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa32:	4b0b      	ldr	r3, [pc, #44]	; (800fa60 <__sfp+0x74>)
 800fa34:	6665      	str	r5, [r4, #100]	; 0x64
 800fa36:	e9c4 5500 	strd	r5, r5, [r4]
 800fa3a:	60a5      	str	r5, [r4, #8]
 800fa3c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fa40:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fa44:	2208      	movs	r2, #8
 800fa46:	4629      	mov	r1, r5
 800fa48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fa4c:	f7ff fe51 	bl	800f6f2 <memset>
 800fa50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa58:	e7e9      	b.n	800fa2e <__sfp+0x42>
 800fa5a:	bf00      	nop
 800fa5c:	080118c0 	.word	0x080118c0
 800fa60:	ffff0001 	.word	0xffff0001

0800fa64 <_fwalk_reent>:
 800fa64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa68:	4680      	mov	r8, r0
 800fa6a:	4689      	mov	r9, r1
 800fa6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa70:	2600      	movs	r6, #0
 800fa72:	b914      	cbnz	r4, 800fa7a <_fwalk_reent+0x16>
 800fa74:	4630      	mov	r0, r6
 800fa76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa7a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800fa7e:	3f01      	subs	r7, #1
 800fa80:	d501      	bpl.n	800fa86 <_fwalk_reent+0x22>
 800fa82:	6824      	ldr	r4, [r4, #0]
 800fa84:	e7f5      	b.n	800fa72 <_fwalk_reent+0xe>
 800fa86:	89ab      	ldrh	r3, [r5, #12]
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d907      	bls.n	800fa9c <_fwalk_reent+0x38>
 800fa8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa90:	3301      	adds	r3, #1
 800fa92:	d003      	beq.n	800fa9c <_fwalk_reent+0x38>
 800fa94:	4629      	mov	r1, r5
 800fa96:	4640      	mov	r0, r8
 800fa98:	47c8      	blx	r9
 800fa9a:	4306      	orrs	r6, r0
 800fa9c:	3568      	adds	r5, #104	; 0x68
 800fa9e:	e7ee      	b.n	800fa7e <_fwalk_reent+0x1a>

0800faa0 <__malloc_lock>:
 800faa0:	4770      	bx	lr

0800faa2 <__malloc_unlock>:
 800faa2:	4770      	bx	lr

0800faa4 <__ssputs_r>:
 800faa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faa8:	688e      	ldr	r6, [r1, #8]
 800faaa:	429e      	cmp	r6, r3
 800faac:	4682      	mov	sl, r0
 800faae:	460c      	mov	r4, r1
 800fab0:	4690      	mov	r8, r2
 800fab2:	4699      	mov	r9, r3
 800fab4:	d837      	bhi.n	800fb26 <__ssputs_r+0x82>
 800fab6:	898a      	ldrh	r2, [r1, #12]
 800fab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fabc:	d031      	beq.n	800fb22 <__ssputs_r+0x7e>
 800fabe:	6825      	ldr	r5, [r4, #0]
 800fac0:	6909      	ldr	r1, [r1, #16]
 800fac2:	1a6f      	subs	r7, r5, r1
 800fac4:	6965      	ldr	r5, [r4, #20]
 800fac6:	2302      	movs	r3, #2
 800fac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800facc:	fb95 f5f3 	sdiv	r5, r5, r3
 800fad0:	f109 0301 	add.w	r3, r9, #1
 800fad4:	443b      	add	r3, r7
 800fad6:	429d      	cmp	r5, r3
 800fad8:	bf38      	it	cc
 800fada:	461d      	movcc	r5, r3
 800fadc:	0553      	lsls	r3, r2, #21
 800fade:	d530      	bpl.n	800fb42 <__ssputs_r+0x9e>
 800fae0:	4629      	mov	r1, r5
 800fae2:	f7ff fe5d 	bl	800f7a0 <_malloc_r>
 800fae6:	4606      	mov	r6, r0
 800fae8:	b950      	cbnz	r0, 800fb00 <__ssputs_r+0x5c>
 800faea:	230c      	movs	r3, #12
 800faec:	f8ca 3000 	str.w	r3, [sl]
 800faf0:	89a3      	ldrh	r3, [r4, #12]
 800faf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faf6:	81a3      	strh	r3, [r4, #12]
 800faf8:	f04f 30ff 	mov.w	r0, #4294967295
 800fafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb00:	463a      	mov	r2, r7
 800fb02:	6921      	ldr	r1, [r4, #16]
 800fb04:	f7ff fdea 	bl	800f6dc <memcpy>
 800fb08:	89a3      	ldrh	r3, [r4, #12]
 800fb0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fb0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb12:	81a3      	strh	r3, [r4, #12]
 800fb14:	6126      	str	r6, [r4, #16]
 800fb16:	6165      	str	r5, [r4, #20]
 800fb18:	443e      	add	r6, r7
 800fb1a:	1bed      	subs	r5, r5, r7
 800fb1c:	6026      	str	r6, [r4, #0]
 800fb1e:	60a5      	str	r5, [r4, #8]
 800fb20:	464e      	mov	r6, r9
 800fb22:	454e      	cmp	r6, r9
 800fb24:	d900      	bls.n	800fb28 <__ssputs_r+0x84>
 800fb26:	464e      	mov	r6, r9
 800fb28:	4632      	mov	r2, r6
 800fb2a:	4641      	mov	r1, r8
 800fb2c:	6820      	ldr	r0, [r4, #0]
 800fb2e:	f000 fe55 	bl	80107dc <memmove>
 800fb32:	68a3      	ldr	r3, [r4, #8]
 800fb34:	1b9b      	subs	r3, r3, r6
 800fb36:	60a3      	str	r3, [r4, #8]
 800fb38:	6823      	ldr	r3, [r4, #0]
 800fb3a:	441e      	add	r6, r3
 800fb3c:	6026      	str	r6, [r4, #0]
 800fb3e:	2000      	movs	r0, #0
 800fb40:	e7dc      	b.n	800fafc <__ssputs_r+0x58>
 800fb42:	462a      	mov	r2, r5
 800fb44:	f000 fe63 	bl	801080e <_realloc_r>
 800fb48:	4606      	mov	r6, r0
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	d1e2      	bne.n	800fb14 <__ssputs_r+0x70>
 800fb4e:	6921      	ldr	r1, [r4, #16]
 800fb50:	4650      	mov	r0, sl
 800fb52:	f7ff fdd7 	bl	800f704 <_free_r>
 800fb56:	e7c8      	b.n	800faea <__ssputs_r+0x46>

0800fb58 <_svfiprintf_r>:
 800fb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5c:	461d      	mov	r5, r3
 800fb5e:	898b      	ldrh	r3, [r1, #12]
 800fb60:	061f      	lsls	r7, r3, #24
 800fb62:	b09d      	sub	sp, #116	; 0x74
 800fb64:	4680      	mov	r8, r0
 800fb66:	460c      	mov	r4, r1
 800fb68:	4616      	mov	r6, r2
 800fb6a:	d50f      	bpl.n	800fb8c <_svfiprintf_r+0x34>
 800fb6c:	690b      	ldr	r3, [r1, #16]
 800fb6e:	b96b      	cbnz	r3, 800fb8c <_svfiprintf_r+0x34>
 800fb70:	2140      	movs	r1, #64	; 0x40
 800fb72:	f7ff fe15 	bl	800f7a0 <_malloc_r>
 800fb76:	6020      	str	r0, [r4, #0]
 800fb78:	6120      	str	r0, [r4, #16]
 800fb7a:	b928      	cbnz	r0, 800fb88 <_svfiprintf_r+0x30>
 800fb7c:	230c      	movs	r3, #12
 800fb7e:	f8c8 3000 	str.w	r3, [r8]
 800fb82:	f04f 30ff 	mov.w	r0, #4294967295
 800fb86:	e0c8      	b.n	800fd1a <_svfiprintf_r+0x1c2>
 800fb88:	2340      	movs	r3, #64	; 0x40
 800fb8a:	6163      	str	r3, [r4, #20]
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	9309      	str	r3, [sp, #36]	; 0x24
 800fb90:	2320      	movs	r3, #32
 800fb92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb96:	2330      	movs	r3, #48	; 0x30
 800fb98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb9c:	9503      	str	r5, [sp, #12]
 800fb9e:	f04f 0b01 	mov.w	fp, #1
 800fba2:	4637      	mov	r7, r6
 800fba4:	463d      	mov	r5, r7
 800fba6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fbaa:	b10b      	cbz	r3, 800fbb0 <_svfiprintf_r+0x58>
 800fbac:	2b25      	cmp	r3, #37	; 0x25
 800fbae:	d13e      	bne.n	800fc2e <_svfiprintf_r+0xd6>
 800fbb0:	ebb7 0a06 	subs.w	sl, r7, r6
 800fbb4:	d00b      	beq.n	800fbce <_svfiprintf_r+0x76>
 800fbb6:	4653      	mov	r3, sl
 800fbb8:	4632      	mov	r2, r6
 800fbba:	4621      	mov	r1, r4
 800fbbc:	4640      	mov	r0, r8
 800fbbe:	f7ff ff71 	bl	800faa4 <__ssputs_r>
 800fbc2:	3001      	adds	r0, #1
 800fbc4:	f000 80a4 	beq.w	800fd10 <_svfiprintf_r+0x1b8>
 800fbc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbca:	4453      	add	r3, sl
 800fbcc:	9309      	str	r3, [sp, #36]	; 0x24
 800fbce:	783b      	ldrb	r3, [r7, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	f000 809d 	beq.w	800fd10 <_svfiprintf_r+0x1b8>
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbe0:	9304      	str	r3, [sp, #16]
 800fbe2:	9307      	str	r3, [sp, #28]
 800fbe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fbe8:	931a      	str	r3, [sp, #104]	; 0x68
 800fbea:	462f      	mov	r7, r5
 800fbec:	2205      	movs	r2, #5
 800fbee:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fbf2:	4850      	ldr	r0, [pc, #320]	; (800fd34 <_svfiprintf_r+0x1dc>)
 800fbf4:	f7f0 facc 	bl	8000190 <memchr>
 800fbf8:	9b04      	ldr	r3, [sp, #16]
 800fbfa:	b9d0      	cbnz	r0, 800fc32 <_svfiprintf_r+0xda>
 800fbfc:	06d9      	lsls	r1, r3, #27
 800fbfe:	bf44      	itt	mi
 800fc00:	2220      	movmi	r2, #32
 800fc02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fc06:	071a      	lsls	r2, r3, #28
 800fc08:	bf44      	itt	mi
 800fc0a:	222b      	movmi	r2, #43	; 0x2b
 800fc0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fc10:	782a      	ldrb	r2, [r5, #0]
 800fc12:	2a2a      	cmp	r2, #42	; 0x2a
 800fc14:	d015      	beq.n	800fc42 <_svfiprintf_r+0xea>
 800fc16:	9a07      	ldr	r2, [sp, #28]
 800fc18:	462f      	mov	r7, r5
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	250a      	movs	r5, #10
 800fc1e:	4639      	mov	r1, r7
 800fc20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc24:	3b30      	subs	r3, #48	; 0x30
 800fc26:	2b09      	cmp	r3, #9
 800fc28:	d94d      	bls.n	800fcc6 <_svfiprintf_r+0x16e>
 800fc2a:	b1b8      	cbz	r0, 800fc5c <_svfiprintf_r+0x104>
 800fc2c:	e00f      	b.n	800fc4e <_svfiprintf_r+0xf6>
 800fc2e:	462f      	mov	r7, r5
 800fc30:	e7b8      	b.n	800fba4 <_svfiprintf_r+0x4c>
 800fc32:	4a40      	ldr	r2, [pc, #256]	; (800fd34 <_svfiprintf_r+0x1dc>)
 800fc34:	1a80      	subs	r0, r0, r2
 800fc36:	fa0b f000 	lsl.w	r0, fp, r0
 800fc3a:	4318      	orrs	r0, r3
 800fc3c:	9004      	str	r0, [sp, #16]
 800fc3e:	463d      	mov	r5, r7
 800fc40:	e7d3      	b.n	800fbea <_svfiprintf_r+0x92>
 800fc42:	9a03      	ldr	r2, [sp, #12]
 800fc44:	1d11      	adds	r1, r2, #4
 800fc46:	6812      	ldr	r2, [r2, #0]
 800fc48:	9103      	str	r1, [sp, #12]
 800fc4a:	2a00      	cmp	r2, #0
 800fc4c:	db01      	blt.n	800fc52 <_svfiprintf_r+0xfa>
 800fc4e:	9207      	str	r2, [sp, #28]
 800fc50:	e004      	b.n	800fc5c <_svfiprintf_r+0x104>
 800fc52:	4252      	negs	r2, r2
 800fc54:	f043 0302 	orr.w	r3, r3, #2
 800fc58:	9207      	str	r2, [sp, #28]
 800fc5a:	9304      	str	r3, [sp, #16]
 800fc5c:	783b      	ldrb	r3, [r7, #0]
 800fc5e:	2b2e      	cmp	r3, #46	; 0x2e
 800fc60:	d10c      	bne.n	800fc7c <_svfiprintf_r+0x124>
 800fc62:	787b      	ldrb	r3, [r7, #1]
 800fc64:	2b2a      	cmp	r3, #42	; 0x2a
 800fc66:	d133      	bne.n	800fcd0 <_svfiprintf_r+0x178>
 800fc68:	9b03      	ldr	r3, [sp, #12]
 800fc6a:	1d1a      	adds	r2, r3, #4
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	9203      	str	r2, [sp, #12]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	bfb8      	it	lt
 800fc74:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc78:	3702      	adds	r7, #2
 800fc7a:	9305      	str	r3, [sp, #20]
 800fc7c:	4d2e      	ldr	r5, [pc, #184]	; (800fd38 <_svfiprintf_r+0x1e0>)
 800fc7e:	7839      	ldrb	r1, [r7, #0]
 800fc80:	2203      	movs	r2, #3
 800fc82:	4628      	mov	r0, r5
 800fc84:	f7f0 fa84 	bl	8000190 <memchr>
 800fc88:	b138      	cbz	r0, 800fc9a <_svfiprintf_r+0x142>
 800fc8a:	2340      	movs	r3, #64	; 0x40
 800fc8c:	1b40      	subs	r0, r0, r5
 800fc8e:	fa03 f000 	lsl.w	r0, r3, r0
 800fc92:	9b04      	ldr	r3, [sp, #16]
 800fc94:	4303      	orrs	r3, r0
 800fc96:	3701      	adds	r7, #1
 800fc98:	9304      	str	r3, [sp, #16]
 800fc9a:	7839      	ldrb	r1, [r7, #0]
 800fc9c:	4827      	ldr	r0, [pc, #156]	; (800fd3c <_svfiprintf_r+0x1e4>)
 800fc9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fca2:	2206      	movs	r2, #6
 800fca4:	1c7e      	adds	r6, r7, #1
 800fca6:	f7f0 fa73 	bl	8000190 <memchr>
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d038      	beq.n	800fd20 <_svfiprintf_r+0x1c8>
 800fcae:	4b24      	ldr	r3, [pc, #144]	; (800fd40 <_svfiprintf_r+0x1e8>)
 800fcb0:	bb13      	cbnz	r3, 800fcf8 <_svfiprintf_r+0x1a0>
 800fcb2:	9b03      	ldr	r3, [sp, #12]
 800fcb4:	3307      	adds	r3, #7
 800fcb6:	f023 0307 	bic.w	r3, r3, #7
 800fcba:	3308      	adds	r3, #8
 800fcbc:	9303      	str	r3, [sp, #12]
 800fcbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcc0:	444b      	add	r3, r9
 800fcc2:	9309      	str	r3, [sp, #36]	; 0x24
 800fcc4:	e76d      	b.n	800fba2 <_svfiprintf_r+0x4a>
 800fcc6:	fb05 3202 	mla	r2, r5, r2, r3
 800fcca:	2001      	movs	r0, #1
 800fccc:	460f      	mov	r7, r1
 800fcce:	e7a6      	b.n	800fc1e <_svfiprintf_r+0xc6>
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	3701      	adds	r7, #1
 800fcd4:	9305      	str	r3, [sp, #20]
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	250a      	movs	r5, #10
 800fcda:	4638      	mov	r0, r7
 800fcdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fce0:	3a30      	subs	r2, #48	; 0x30
 800fce2:	2a09      	cmp	r2, #9
 800fce4:	d903      	bls.n	800fcee <_svfiprintf_r+0x196>
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d0c8      	beq.n	800fc7c <_svfiprintf_r+0x124>
 800fcea:	9105      	str	r1, [sp, #20]
 800fcec:	e7c6      	b.n	800fc7c <_svfiprintf_r+0x124>
 800fcee:	fb05 2101 	mla	r1, r5, r1, r2
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	4607      	mov	r7, r0
 800fcf6:	e7f0      	b.n	800fcda <_svfiprintf_r+0x182>
 800fcf8:	ab03      	add	r3, sp, #12
 800fcfa:	9300      	str	r3, [sp, #0]
 800fcfc:	4622      	mov	r2, r4
 800fcfe:	4b11      	ldr	r3, [pc, #68]	; (800fd44 <_svfiprintf_r+0x1ec>)
 800fd00:	a904      	add	r1, sp, #16
 800fd02:	4640      	mov	r0, r8
 800fd04:	f3af 8000 	nop.w
 800fd08:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fd0c:	4681      	mov	r9, r0
 800fd0e:	d1d6      	bne.n	800fcbe <_svfiprintf_r+0x166>
 800fd10:	89a3      	ldrh	r3, [r4, #12]
 800fd12:	065b      	lsls	r3, r3, #25
 800fd14:	f53f af35 	bmi.w	800fb82 <_svfiprintf_r+0x2a>
 800fd18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd1a:	b01d      	add	sp, #116	; 0x74
 800fd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd20:	ab03      	add	r3, sp, #12
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	4622      	mov	r2, r4
 800fd26:	4b07      	ldr	r3, [pc, #28]	; (800fd44 <_svfiprintf_r+0x1ec>)
 800fd28:	a904      	add	r1, sp, #16
 800fd2a:	4640      	mov	r0, r8
 800fd2c:	f000 f9c2 	bl	80100b4 <_printf_i>
 800fd30:	e7ea      	b.n	800fd08 <_svfiprintf_r+0x1b0>
 800fd32:	bf00      	nop
 800fd34:	08011924 	.word	0x08011924
 800fd38:	0801192a 	.word	0x0801192a
 800fd3c:	0801192e 	.word	0x0801192e
 800fd40:	00000000 	.word	0x00000000
 800fd44:	0800faa5 	.word	0x0800faa5

0800fd48 <__sfputc_r>:
 800fd48:	6893      	ldr	r3, [r2, #8]
 800fd4a:	3b01      	subs	r3, #1
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	b410      	push	{r4}
 800fd50:	6093      	str	r3, [r2, #8]
 800fd52:	da08      	bge.n	800fd66 <__sfputc_r+0x1e>
 800fd54:	6994      	ldr	r4, [r2, #24]
 800fd56:	42a3      	cmp	r3, r4
 800fd58:	db01      	blt.n	800fd5e <__sfputc_r+0x16>
 800fd5a:	290a      	cmp	r1, #10
 800fd5c:	d103      	bne.n	800fd66 <__sfputc_r+0x1e>
 800fd5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd62:	f000 bb33 	b.w	80103cc <__swbuf_r>
 800fd66:	6813      	ldr	r3, [r2, #0]
 800fd68:	1c58      	adds	r0, r3, #1
 800fd6a:	6010      	str	r0, [r2, #0]
 800fd6c:	7019      	strb	r1, [r3, #0]
 800fd6e:	4608      	mov	r0, r1
 800fd70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd74:	4770      	bx	lr

0800fd76 <__sfputs_r>:
 800fd76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd78:	4606      	mov	r6, r0
 800fd7a:	460f      	mov	r7, r1
 800fd7c:	4614      	mov	r4, r2
 800fd7e:	18d5      	adds	r5, r2, r3
 800fd80:	42ac      	cmp	r4, r5
 800fd82:	d101      	bne.n	800fd88 <__sfputs_r+0x12>
 800fd84:	2000      	movs	r0, #0
 800fd86:	e007      	b.n	800fd98 <__sfputs_r+0x22>
 800fd88:	463a      	mov	r2, r7
 800fd8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f7ff ffda 	bl	800fd48 <__sfputc_r>
 800fd94:	1c43      	adds	r3, r0, #1
 800fd96:	d1f3      	bne.n	800fd80 <__sfputs_r+0xa>
 800fd98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd9c <_vfiprintf_r>:
 800fd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda0:	460c      	mov	r4, r1
 800fda2:	b09d      	sub	sp, #116	; 0x74
 800fda4:	4617      	mov	r7, r2
 800fda6:	461d      	mov	r5, r3
 800fda8:	4606      	mov	r6, r0
 800fdaa:	b118      	cbz	r0, 800fdb4 <_vfiprintf_r+0x18>
 800fdac:	6983      	ldr	r3, [r0, #24]
 800fdae:	b90b      	cbnz	r3, 800fdb4 <_vfiprintf_r+0x18>
 800fdb0:	f7ff fdec 	bl	800f98c <__sinit>
 800fdb4:	4b7c      	ldr	r3, [pc, #496]	; (800ffa8 <_vfiprintf_r+0x20c>)
 800fdb6:	429c      	cmp	r4, r3
 800fdb8:	d158      	bne.n	800fe6c <_vfiprintf_r+0xd0>
 800fdba:	6874      	ldr	r4, [r6, #4]
 800fdbc:	89a3      	ldrh	r3, [r4, #12]
 800fdbe:	0718      	lsls	r0, r3, #28
 800fdc0:	d55e      	bpl.n	800fe80 <_vfiprintf_r+0xe4>
 800fdc2:	6923      	ldr	r3, [r4, #16]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d05b      	beq.n	800fe80 <_vfiprintf_r+0xe4>
 800fdc8:	2300      	movs	r3, #0
 800fdca:	9309      	str	r3, [sp, #36]	; 0x24
 800fdcc:	2320      	movs	r3, #32
 800fdce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdd2:	2330      	movs	r3, #48	; 0x30
 800fdd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdd8:	9503      	str	r5, [sp, #12]
 800fdda:	f04f 0b01 	mov.w	fp, #1
 800fdde:	46b8      	mov	r8, r7
 800fde0:	4645      	mov	r5, r8
 800fde2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fde6:	b10b      	cbz	r3, 800fdec <_vfiprintf_r+0x50>
 800fde8:	2b25      	cmp	r3, #37	; 0x25
 800fdea:	d154      	bne.n	800fe96 <_vfiprintf_r+0xfa>
 800fdec:	ebb8 0a07 	subs.w	sl, r8, r7
 800fdf0:	d00b      	beq.n	800fe0a <_vfiprintf_r+0x6e>
 800fdf2:	4653      	mov	r3, sl
 800fdf4:	463a      	mov	r2, r7
 800fdf6:	4621      	mov	r1, r4
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	f7ff ffbc 	bl	800fd76 <__sfputs_r>
 800fdfe:	3001      	adds	r0, #1
 800fe00:	f000 80c2 	beq.w	800ff88 <_vfiprintf_r+0x1ec>
 800fe04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe06:	4453      	add	r3, sl
 800fe08:	9309      	str	r3, [sp, #36]	; 0x24
 800fe0a:	f898 3000 	ldrb.w	r3, [r8]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	f000 80ba 	beq.w	800ff88 <_vfiprintf_r+0x1ec>
 800fe14:	2300      	movs	r3, #0
 800fe16:	f04f 32ff 	mov.w	r2, #4294967295
 800fe1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe1e:	9304      	str	r3, [sp, #16]
 800fe20:	9307      	str	r3, [sp, #28]
 800fe22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe26:	931a      	str	r3, [sp, #104]	; 0x68
 800fe28:	46a8      	mov	r8, r5
 800fe2a:	2205      	movs	r2, #5
 800fe2c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800fe30:	485e      	ldr	r0, [pc, #376]	; (800ffac <_vfiprintf_r+0x210>)
 800fe32:	f7f0 f9ad 	bl	8000190 <memchr>
 800fe36:	9b04      	ldr	r3, [sp, #16]
 800fe38:	bb78      	cbnz	r0, 800fe9a <_vfiprintf_r+0xfe>
 800fe3a:	06d9      	lsls	r1, r3, #27
 800fe3c:	bf44      	itt	mi
 800fe3e:	2220      	movmi	r2, #32
 800fe40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fe44:	071a      	lsls	r2, r3, #28
 800fe46:	bf44      	itt	mi
 800fe48:	222b      	movmi	r2, #43	; 0x2b
 800fe4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fe4e:	782a      	ldrb	r2, [r5, #0]
 800fe50:	2a2a      	cmp	r2, #42	; 0x2a
 800fe52:	d02a      	beq.n	800feaa <_vfiprintf_r+0x10e>
 800fe54:	9a07      	ldr	r2, [sp, #28]
 800fe56:	46a8      	mov	r8, r5
 800fe58:	2000      	movs	r0, #0
 800fe5a:	250a      	movs	r5, #10
 800fe5c:	4641      	mov	r1, r8
 800fe5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe62:	3b30      	subs	r3, #48	; 0x30
 800fe64:	2b09      	cmp	r3, #9
 800fe66:	d969      	bls.n	800ff3c <_vfiprintf_r+0x1a0>
 800fe68:	b360      	cbz	r0, 800fec4 <_vfiprintf_r+0x128>
 800fe6a:	e024      	b.n	800feb6 <_vfiprintf_r+0x11a>
 800fe6c:	4b50      	ldr	r3, [pc, #320]	; (800ffb0 <_vfiprintf_r+0x214>)
 800fe6e:	429c      	cmp	r4, r3
 800fe70:	d101      	bne.n	800fe76 <_vfiprintf_r+0xda>
 800fe72:	68b4      	ldr	r4, [r6, #8]
 800fe74:	e7a2      	b.n	800fdbc <_vfiprintf_r+0x20>
 800fe76:	4b4f      	ldr	r3, [pc, #316]	; (800ffb4 <_vfiprintf_r+0x218>)
 800fe78:	429c      	cmp	r4, r3
 800fe7a:	bf08      	it	eq
 800fe7c:	68f4      	ldreq	r4, [r6, #12]
 800fe7e:	e79d      	b.n	800fdbc <_vfiprintf_r+0x20>
 800fe80:	4621      	mov	r1, r4
 800fe82:	4630      	mov	r0, r6
 800fe84:	f000 fb06 	bl	8010494 <__swsetup_r>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	d09d      	beq.n	800fdc8 <_vfiprintf_r+0x2c>
 800fe8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe90:	b01d      	add	sp, #116	; 0x74
 800fe92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe96:	46a8      	mov	r8, r5
 800fe98:	e7a2      	b.n	800fde0 <_vfiprintf_r+0x44>
 800fe9a:	4a44      	ldr	r2, [pc, #272]	; (800ffac <_vfiprintf_r+0x210>)
 800fe9c:	1a80      	subs	r0, r0, r2
 800fe9e:	fa0b f000 	lsl.w	r0, fp, r0
 800fea2:	4318      	orrs	r0, r3
 800fea4:	9004      	str	r0, [sp, #16]
 800fea6:	4645      	mov	r5, r8
 800fea8:	e7be      	b.n	800fe28 <_vfiprintf_r+0x8c>
 800feaa:	9a03      	ldr	r2, [sp, #12]
 800feac:	1d11      	adds	r1, r2, #4
 800feae:	6812      	ldr	r2, [r2, #0]
 800feb0:	9103      	str	r1, [sp, #12]
 800feb2:	2a00      	cmp	r2, #0
 800feb4:	db01      	blt.n	800feba <_vfiprintf_r+0x11e>
 800feb6:	9207      	str	r2, [sp, #28]
 800feb8:	e004      	b.n	800fec4 <_vfiprintf_r+0x128>
 800feba:	4252      	negs	r2, r2
 800febc:	f043 0302 	orr.w	r3, r3, #2
 800fec0:	9207      	str	r2, [sp, #28]
 800fec2:	9304      	str	r3, [sp, #16]
 800fec4:	f898 3000 	ldrb.w	r3, [r8]
 800fec8:	2b2e      	cmp	r3, #46	; 0x2e
 800feca:	d10e      	bne.n	800feea <_vfiprintf_r+0x14e>
 800fecc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fed0:	2b2a      	cmp	r3, #42	; 0x2a
 800fed2:	d138      	bne.n	800ff46 <_vfiprintf_r+0x1aa>
 800fed4:	9b03      	ldr	r3, [sp, #12]
 800fed6:	1d1a      	adds	r2, r3, #4
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	9203      	str	r2, [sp, #12]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	bfb8      	it	lt
 800fee0:	f04f 33ff 	movlt.w	r3, #4294967295
 800fee4:	f108 0802 	add.w	r8, r8, #2
 800fee8:	9305      	str	r3, [sp, #20]
 800feea:	4d33      	ldr	r5, [pc, #204]	; (800ffb8 <_vfiprintf_r+0x21c>)
 800feec:	f898 1000 	ldrb.w	r1, [r8]
 800fef0:	2203      	movs	r2, #3
 800fef2:	4628      	mov	r0, r5
 800fef4:	f7f0 f94c 	bl	8000190 <memchr>
 800fef8:	b140      	cbz	r0, 800ff0c <_vfiprintf_r+0x170>
 800fefa:	2340      	movs	r3, #64	; 0x40
 800fefc:	1b40      	subs	r0, r0, r5
 800fefe:	fa03 f000 	lsl.w	r0, r3, r0
 800ff02:	9b04      	ldr	r3, [sp, #16]
 800ff04:	4303      	orrs	r3, r0
 800ff06:	f108 0801 	add.w	r8, r8, #1
 800ff0a:	9304      	str	r3, [sp, #16]
 800ff0c:	f898 1000 	ldrb.w	r1, [r8]
 800ff10:	482a      	ldr	r0, [pc, #168]	; (800ffbc <_vfiprintf_r+0x220>)
 800ff12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff16:	2206      	movs	r2, #6
 800ff18:	f108 0701 	add.w	r7, r8, #1
 800ff1c:	f7f0 f938 	bl	8000190 <memchr>
 800ff20:	2800      	cmp	r0, #0
 800ff22:	d037      	beq.n	800ff94 <_vfiprintf_r+0x1f8>
 800ff24:	4b26      	ldr	r3, [pc, #152]	; (800ffc0 <_vfiprintf_r+0x224>)
 800ff26:	bb1b      	cbnz	r3, 800ff70 <_vfiprintf_r+0x1d4>
 800ff28:	9b03      	ldr	r3, [sp, #12]
 800ff2a:	3307      	adds	r3, #7
 800ff2c:	f023 0307 	bic.w	r3, r3, #7
 800ff30:	3308      	adds	r3, #8
 800ff32:	9303      	str	r3, [sp, #12]
 800ff34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff36:	444b      	add	r3, r9
 800ff38:	9309      	str	r3, [sp, #36]	; 0x24
 800ff3a:	e750      	b.n	800fdde <_vfiprintf_r+0x42>
 800ff3c:	fb05 3202 	mla	r2, r5, r2, r3
 800ff40:	2001      	movs	r0, #1
 800ff42:	4688      	mov	r8, r1
 800ff44:	e78a      	b.n	800fe5c <_vfiprintf_r+0xc0>
 800ff46:	2300      	movs	r3, #0
 800ff48:	f108 0801 	add.w	r8, r8, #1
 800ff4c:	9305      	str	r3, [sp, #20]
 800ff4e:	4619      	mov	r1, r3
 800ff50:	250a      	movs	r5, #10
 800ff52:	4640      	mov	r0, r8
 800ff54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff58:	3a30      	subs	r2, #48	; 0x30
 800ff5a:	2a09      	cmp	r2, #9
 800ff5c:	d903      	bls.n	800ff66 <_vfiprintf_r+0x1ca>
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d0c3      	beq.n	800feea <_vfiprintf_r+0x14e>
 800ff62:	9105      	str	r1, [sp, #20]
 800ff64:	e7c1      	b.n	800feea <_vfiprintf_r+0x14e>
 800ff66:	fb05 2101 	mla	r1, r5, r1, r2
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	4680      	mov	r8, r0
 800ff6e:	e7f0      	b.n	800ff52 <_vfiprintf_r+0x1b6>
 800ff70:	ab03      	add	r3, sp, #12
 800ff72:	9300      	str	r3, [sp, #0]
 800ff74:	4622      	mov	r2, r4
 800ff76:	4b13      	ldr	r3, [pc, #76]	; (800ffc4 <_vfiprintf_r+0x228>)
 800ff78:	a904      	add	r1, sp, #16
 800ff7a:	4630      	mov	r0, r6
 800ff7c:	f3af 8000 	nop.w
 800ff80:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ff84:	4681      	mov	r9, r0
 800ff86:	d1d5      	bne.n	800ff34 <_vfiprintf_r+0x198>
 800ff88:	89a3      	ldrh	r3, [r4, #12]
 800ff8a:	065b      	lsls	r3, r3, #25
 800ff8c:	f53f af7e 	bmi.w	800fe8c <_vfiprintf_r+0xf0>
 800ff90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff92:	e77d      	b.n	800fe90 <_vfiprintf_r+0xf4>
 800ff94:	ab03      	add	r3, sp, #12
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	4622      	mov	r2, r4
 800ff9a:	4b0a      	ldr	r3, [pc, #40]	; (800ffc4 <_vfiprintf_r+0x228>)
 800ff9c:	a904      	add	r1, sp, #16
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	f000 f888 	bl	80100b4 <_printf_i>
 800ffa4:	e7ec      	b.n	800ff80 <_vfiprintf_r+0x1e4>
 800ffa6:	bf00      	nop
 800ffa8:	080118e4 	.word	0x080118e4
 800ffac:	08011924 	.word	0x08011924
 800ffb0:	08011904 	.word	0x08011904
 800ffb4:	080118c4 	.word	0x080118c4
 800ffb8:	0801192a 	.word	0x0801192a
 800ffbc:	0801192e 	.word	0x0801192e
 800ffc0:	00000000 	.word	0x00000000
 800ffc4:	0800fd77 	.word	0x0800fd77

0800ffc8 <_printf_common>:
 800ffc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffcc:	4691      	mov	r9, r2
 800ffce:	461f      	mov	r7, r3
 800ffd0:	688a      	ldr	r2, [r1, #8]
 800ffd2:	690b      	ldr	r3, [r1, #16]
 800ffd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	bfb8      	it	lt
 800ffdc:	4613      	movlt	r3, r2
 800ffde:	f8c9 3000 	str.w	r3, [r9]
 800ffe2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ffe6:	4606      	mov	r6, r0
 800ffe8:	460c      	mov	r4, r1
 800ffea:	b112      	cbz	r2, 800fff2 <_printf_common+0x2a>
 800ffec:	3301      	adds	r3, #1
 800ffee:	f8c9 3000 	str.w	r3, [r9]
 800fff2:	6823      	ldr	r3, [r4, #0]
 800fff4:	0699      	lsls	r1, r3, #26
 800fff6:	bf42      	ittt	mi
 800fff8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fffc:	3302      	addmi	r3, #2
 800fffe:	f8c9 3000 	strmi.w	r3, [r9]
 8010002:	6825      	ldr	r5, [r4, #0]
 8010004:	f015 0506 	ands.w	r5, r5, #6
 8010008:	d107      	bne.n	801001a <_printf_common+0x52>
 801000a:	f104 0a19 	add.w	sl, r4, #25
 801000e:	68e3      	ldr	r3, [r4, #12]
 8010010:	f8d9 2000 	ldr.w	r2, [r9]
 8010014:	1a9b      	subs	r3, r3, r2
 8010016:	42ab      	cmp	r3, r5
 8010018:	dc28      	bgt.n	801006c <_printf_common+0xa4>
 801001a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801001e:	6822      	ldr	r2, [r4, #0]
 8010020:	3300      	adds	r3, #0
 8010022:	bf18      	it	ne
 8010024:	2301      	movne	r3, #1
 8010026:	0692      	lsls	r2, r2, #26
 8010028:	d42d      	bmi.n	8010086 <_printf_common+0xbe>
 801002a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801002e:	4639      	mov	r1, r7
 8010030:	4630      	mov	r0, r6
 8010032:	47c0      	blx	r8
 8010034:	3001      	adds	r0, #1
 8010036:	d020      	beq.n	801007a <_printf_common+0xb2>
 8010038:	6823      	ldr	r3, [r4, #0]
 801003a:	68e5      	ldr	r5, [r4, #12]
 801003c:	f8d9 2000 	ldr.w	r2, [r9]
 8010040:	f003 0306 	and.w	r3, r3, #6
 8010044:	2b04      	cmp	r3, #4
 8010046:	bf08      	it	eq
 8010048:	1aad      	subeq	r5, r5, r2
 801004a:	68a3      	ldr	r3, [r4, #8]
 801004c:	6922      	ldr	r2, [r4, #16]
 801004e:	bf0c      	ite	eq
 8010050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010054:	2500      	movne	r5, #0
 8010056:	4293      	cmp	r3, r2
 8010058:	bfc4      	itt	gt
 801005a:	1a9b      	subgt	r3, r3, r2
 801005c:	18ed      	addgt	r5, r5, r3
 801005e:	f04f 0900 	mov.w	r9, #0
 8010062:	341a      	adds	r4, #26
 8010064:	454d      	cmp	r5, r9
 8010066:	d11a      	bne.n	801009e <_printf_common+0xd6>
 8010068:	2000      	movs	r0, #0
 801006a:	e008      	b.n	801007e <_printf_common+0xb6>
 801006c:	2301      	movs	r3, #1
 801006e:	4652      	mov	r2, sl
 8010070:	4639      	mov	r1, r7
 8010072:	4630      	mov	r0, r6
 8010074:	47c0      	blx	r8
 8010076:	3001      	adds	r0, #1
 8010078:	d103      	bne.n	8010082 <_printf_common+0xba>
 801007a:	f04f 30ff 	mov.w	r0, #4294967295
 801007e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010082:	3501      	adds	r5, #1
 8010084:	e7c3      	b.n	801000e <_printf_common+0x46>
 8010086:	18e1      	adds	r1, r4, r3
 8010088:	1c5a      	adds	r2, r3, #1
 801008a:	2030      	movs	r0, #48	; 0x30
 801008c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010090:	4422      	add	r2, r4
 8010092:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010096:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801009a:	3302      	adds	r3, #2
 801009c:	e7c5      	b.n	801002a <_printf_common+0x62>
 801009e:	2301      	movs	r3, #1
 80100a0:	4622      	mov	r2, r4
 80100a2:	4639      	mov	r1, r7
 80100a4:	4630      	mov	r0, r6
 80100a6:	47c0      	blx	r8
 80100a8:	3001      	adds	r0, #1
 80100aa:	d0e6      	beq.n	801007a <_printf_common+0xb2>
 80100ac:	f109 0901 	add.w	r9, r9, #1
 80100b0:	e7d8      	b.n	8010064 <_printf_common+0x9c>
	...

080100b4 <_printf_i>:
 80100b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80100bc:	460c      	mov	r4, r1
 80100be:	7e09      	ldrb	r1, [r1, #24]
 80100c0:	b085      	sub	sp, #20
 80100c2:	296e      	cmp	r1, #110	; 0x6e
 80100c4:	4617      	mov	r7, r2
 80100c6:	4606      	mov	r6, r0
 80100c8:	4698      	mov	r8, r3
 80100ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80100cc:	f000 80b3 	beq.w	8010236 <_printf_i+0x182>
 80100d0:	d822      	bhi.n	8010118 <_printf_i+0x64>
 80100d2:	2963      	cmp	r1, #99	; 0x63
 80100d4:	d036      	beq.n	8010144 <_printf_i+0x90>
 80100d6:	d80a      	bhi.n	80100ee <_printf_i+0x3a>
 80100d8:	2900      	cmp	r1, #0
 80100da:	f000 80b9 	beq.w	8010250 <_printf_i+0x19c>
 80100de:	2958      	cmp	r1, #88	; 0x58
 80100e0:	f000 8083 	beq.w	80101ea <_printf_i+0x136>
 80100e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80100e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80100ec:	e032      	b.n	8010154 <_printf_i+0xa0>
 80100ee:	2964      	cmp	r1, #100	; 0x64
 80100f0:	d001      	beq.n	80100f6 <_printf_i+0x42>
 80100f2:	2969      	cmp	r1, #105	; 0x69
 80100f4:	d1f6      	bne.n	80100e4 <_printf_i+0x30>
 80100f6:	6820      	ldr	r0, [r4, #0]
 80100f8:	6813      	ldr	r3, [r2, #0]
 80100fa:	0605      	lsls	r5, r0, #24
 80100fc:	f103 0104 	add.w	r1, r3, #4
 8010100:	d52a      	bpl.n	8010158 <_printf_i+0xa4>
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	6011      	str	r1, [r2, #0]
 8010106:	2b00      	cmp	r3, #0
 8010108:	da03      	bge.n	8010112 <_printf_i+0x5e>
 801010a:	222d      	movs	r2, #45	; 0x2d
 801010c:	425b      	negs	r3, r3
 801010e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010112:	486f      	ldr	r0, [pc, #444]	; (80102d0 <_printf_i+0x21c>)
 8010114:	220a      	movs	r2, #10
 8010116:	e039      	b.n	801018c <_printf_i+0xd8>
 8010118:	2973      	cmp	r1, #115	; 0x73
 801011a:	f000 809d 	beq.w	8010258 <_printf_i+0x1a4>
 801011e:	d808      	bhi.n	8010132 <_printf_i+0x7e>
 8010120:	296f      	cmp	r1, #111	; 0x6f
 8010122:	d020      	beq.n	8010166 <_printf_i+0xb2>
 8010124:	2970      	cmp	r1, #112	; 0x70
 8010126:	d1dd      	bne.n	80100e4 <_printf_i+0x30>
 8010128:	6823      	ldr	r3, [r4, #0]
 801012a:	f043 0320 	orr.w	r3, r3, #32
 801012e:	6023      	str	r3, [r4, #0]
 8010130:	e003      	b.n	801013a <_printf_i+0x86>
 8010132:	2975      	cmp	r1, #117	; 0x75
 8010134:	d017      	beq.n	8010166 <_printf_i+0xb2>
 8010136:	2978      	cmp	r1, #120	; 0x78
 8010138:	d1d4      	bne.n	80100e4 <_printf_i+0x30>
 801013a:	2378      	movs	r3, #120	; 0x78
 801013c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010140:	4864      	ldr	r0, [pc, #400]	; (80102d4 <_printf_i+0x220>)
 8010142:	e055      	b.n	80101f0 <_printf_i+0x13c>
 8010144:	6813      	ldr	r3, [r2, #0]
 8010146:	1d19      	adds	r1, r3, #4
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	6011      	str	r1, [r2, #0]
 801014c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010154:	2301      	movs	r3, #1
 8010156:	e08c      	b.n	8010272 <_printf_i+0x1be>
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	6011      	str	r1, [r2, #0]
 801015c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010160:	bf18      	it	ne
 8010162:	b21b      	sxthne	r3, r3
 8010164:	e7cf      	b.n	8010106 <_printf_i+0x52>
 8010166:	6813      	ldr	r3, [r2, #0]
 8010168:	6825      	ldr	r5, [r4, #0]
 801016a:	1d18      	adds	r0, r3, #4
 801016c:	6010      	str	r0, [r2, #0]
 801016e:	0628      	lsls	r0, r5, #24
 8010170:	d501      	bpl.n	8010176 <_printf_i+0xc2>
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	e002      	b.n	801017c <_printf_i+0xc8>
 8010176:	0668      	lsls	r0, r5, #25
 8010178:	d5fb      	bpl.n	8010172 <_printf_i+0xbe>
 801017a:	881b      	ldrh	r3, [r3, #0]
 801017c:	4854      	ldr	r0, [pc, #336]	; (80102d0 <_printf_i+0x21c>)
 801017e:	296f      	cmp	r1, #111	; 0x6f
 8010180:	bf14      	ite	ne
 8010182:	220a      	movne	r2, #10
 8010184:	2208      	moveq	r2, #8
 8010186:	2100      	movs	r1, #0
 8010188:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801018c:	6865      	ldr	r5, [r4, #4]
 801018e:	60a5      	str	r5, [r4, #8]
 8010190:	2d00      	cmp	r5, #0
 8010192:	f2c0 8095 	blt.w	80102c0 <_printf_i+0x20c>
 8010196:	6821      	ldr	r1, [r4, #0]
 8010198:	f021 0104 	bic.w	r1, r1, #4
 801019c:	6021      	str	r1, [r4, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d13d      	bne.n	801021e <_printf_i+0x16a>
 80101a2:	2d00      	cmp	r5, #0
 80101a4:	f040 808e 	bne.w	80102c4 <_printf_i+0x210>
 80101a8:	4665      	mov	r5, ip
 80101aa:	2a08      	cmp	r2, #8
 80101ac:	d10b      	bne.n	80101c6 <_printf_i+0x112>
 80101ae:	6823      	ldr	r3, [r4, #0]
 80101b0:	07db      	lsls	r3, r3, #31
 80101b2:	d508      	bpl.n	80101c6 <_printf_i+0x112>
 80101b4:	6923      	ldr	r3, [r4, #16]
 80101b6:	6862      	ldr	r2, [r4, #4]
 80101b8:	429a      	cmp	r2, r3
 80101ba:	bfde      	ittt	le
 80101bc:	2330      	movle	r3, #48	; 0x30
 80101be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80101c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80101c6:	ebac 0305 	sub.w	r3, ip, r5
 80101ca:	6123      	str	r3, [r4, #16]
 80101cc:	f8cd 8000 	str.w	r8, [sp]
 80101d0:	463b      	mov	r3, r7
 80101d2:	aa03      	add	r2, sp, #12
 80101d4:	4621      	mov	r1, r4
 80101d6:	4630      	mov	r0, r6
 80101d8:	f7ff fef6 	bl	800ffc8 <_printf_common>
 80101dc:	3001      	adds	r0, #1
 80101de:	d14d      	bne.n	801027c <_printf_i+0x1c8>
 80101e0:	f04f 30ff 	mov.w	r0, #4294967295
 80101e4:	b005      	add	sp, #20
 80101e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101ea:	4839      	ldr	r0, [pc, #228]	; (80102d0 <_printf_i+0x21c>)
 80101ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80101f0:	6813      	ldr	r3, [r2, #0]
 80101f2:	6821      	ldr	r1, [r4, #0]
 80101f4:	1d1d      	adds	r5, r3, #4
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	6015      	str	r5, [r2, #0]
 80101fa:	060a      	lsls	r2, r1, #24
 80101fc:	d50b      	bpl.n	8010216 <_printf_i+0x162>
 80101fe:	07ca      	lsls	r2, r1, #31
 8010200:	bf44      	itt	mi
 8010202:	f041 0120 	orrmi.w	r1, r1, #32
 8010206:	6021      	strmi	r1, [r4, #0]
 8010208:	b91b      	cbnz	r3, 8010212 <_printf_i+0x15e>
 801020a:	6822      	ldr	r2, [r4, #0]
 801020c:	f022 0220 	bic.w	r2, r2, #32
 8010210:	6022      	str	r2, [r4, #0]
 8010212:	2210      	movs	r2, #16
 8010214:	e7b7      	b.n	8010186 <_printf_i+0xd2>
 8010216:	064d      	lsls	r5, r1, #25
 8010218:	bf48      	it	mi
 801021a:	b29b      	uxthmi	r3, r3
 801021c:	e7ef      	b.n	80101fe <_printf_i+0x14a>
 801021e:	4665      	mov	r5, ip
 8010220:	fbb3 f1f2 	udiv	r1, r3, r2
 8010224:	fb02 3311 	mls	r3, r2, r1, r3
 8010228:	5cc3      	ldrb	r3, [r0, r3]
 801022a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801022e:	460b      	mov	r3, r1
 8010230:	2900      	cmp	r1, #0
 8010232:	d1f5      	bne.n	8010220 <_printf_i+0x16c>
 8010234:	e7b9      	b.n	80101aa <_printf_i+0xf6>
 8010236:	6813      	ldr	r3, [r2, #0]
 8010238:	6825      	ldr	r5, [r4, #0]
 801023a:	6961      	ldr	r1, [r4, #20]
 801023c:	1d18      	adds	r0, r3, #4
 801023e:	6010      	str	r0, [r2, #0]
 8010240:	0628      	lsls	r0, r5, #24
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	d501      	bpl.n	801024a <_printf_i+0x196>
 8010246:	6019      	str	r1, [r3, #0]
 8010248:	e002      	b.n	8010250 <_printf_i+0x19c>
 801024a:	066a      	lsls	r2, r5, #25
 801024c:	d5fb      	bpl.n	8010246 <_printf_i+0x192>
 801024e:	8019      	strh	r1, [r3, #0]
 8010250:	2300      	movs	r3, #0
 8010252:	6123      	str	r3, [r4, #16]
 8010254:	4665      	mov	r5, ip
 8010256:	e7b9      	b.n	80101cc <_printf_i+0x118>
 8010258:	6813      	ldr	r3, [r2, #0]
 801025a:	1d19      	adds	r1, r3, #4
 801025c:	6011      	str	r1, [r2, #0]
 801025e:	681d      	ldr	r5, [r3, #0]
 8010260:	6862      	ldr	r2, [r4, #4]
 8010262:	2100      	movs	r1, #0
 8010264:	4628      	mov	r0, r5
 8010266:	f7ef ff93 	bl	8000190 <memchr>
 801026a:	b108      	cbz	r0, 8010270 <_printf_i+0x1bc>
 801026c:	1b40      	subs	r0, r0, r5
 801026e:	6060      	str	r0, [r4, #4]
 8010270:	6863      	ldr	r3, [r4, #4]
 8010272:	6123      	str	r3, [r4, #16]
 8010274:	2300      	movs	r3, #0
 8010276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801027a:	e7a7      	b.n	80101cc <_printf_i+0x118>
 801027c:	6923      	ldr	r3, [r4, #16]
 801027e:	462a      	mov	r2, r5
 8010280:	4639      	mov	r1, r7
 8010282:	4630      	mov	r0, r6
 8010284:	47c0      	blx	r8
 8010286:	3001      	adds	r0, #1
 8010288:	d0aa      	beq.n	80101e0 <_printf_i+0x12c>
 801028a:	6823      	ldr	r3, [r4, #0]
 801028c:	079b      	lsls	r3, r3, #30
 801028e:	d413      	bmi.n	80102b8 <_printf_i+0x204>
 8010290:	68e0      	ldr	r0, [r4, #12]
 8010292:	9b03      	ldr	r3, [sp, #12]
 8010294:	4298      	cmp	r0, r3
 8010296:	bfb8      	it	lt
 8010298:	4618      	movlt	r0, r3
 801029a:	e7a3      	b.n	80101e4 <_printf_i+0x130>
 801029c:	2301      	movs	r3, #1
 801029e:	464a      	mov	r2, r9
 80102a0:	4639      	mov	r1, r7
 80102a2:	4630      	mov	r0, r6
 80102a4:	47c0      	blx	r8
 80102a6:	3001      	adds	r0, #1
 80102a8:	d09a      	beq.n	80101e0 <_printf_i+0x12c>
 80102aa:	3501      	adds	r5, #1
 80102ac:	68e3      	ldr	r3, [r4, #12]
 80102ae:	9a03      	ldr	r2, [sp, #12]
 80102b0:	1a9b      	subs	r3, r3, r2
 80102b2:	42ab      	cmp	r3, r5
 80102b4:	dcf2      	bgt.n	801029c <_printf_i+0x1e8>
 80102b6:	e7eb      	b.n	8010290 <_printf_i+0x1dc>
 80102b8:	2500      	movs	r5, #0
 80102ba:	f104 0919 	add.w	r9, r4, #25
 80102be:	e7f5      	b.n	80102ac <_printf_i+0x1f8>
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d1ac      	bne.n	801021e <_printf_i+0x16a>
 80102c4:	7803      	ldrb	r3, [r0, #0]
 80102c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80102ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102ce:	e76c      	b.n	80101aa <_printf_i+0xf6>
 80102d0:	08011935 	.word	0x08011935
 80102d4:	08011946 	.word	0x08011946

080102d8 <_putc_r>:
 80102d8:	b570      	push	{r4, r5, r6, lr}
 80102da:	460d      	mov	r5, r1
 80102dc:	4614      	mov	r4, r2
 80102de:	4606      	mov	r6, r0
 80102e0:	b118      	cbz	r0, 80102ea <_putc_r+0x12>
 80102e2:	6983      	ldr	r3, [r0, #24]
 80102e4:	b90b      	cbnz	r3, 80102ea <_putc_r+0x12>
 80102e6:	f7ff fb51 	bl	800f98c <__sinit>
 80102ea:	4b13      	ldr	r3, [pc, #76]	; (8010338 <_putc_r+0x60>)
 80102ec:	429c      	cmp	r4, r3
 80102ee:	d112      	bne.n	8010316 <_putc_r+0x3e>
 80102f0:	6874      	ldr	r4, [r6, #4]
 80102f2:	68a3      	ldr	r3, [r4, #8]
 80102f4:	3b01      	subs	r3, #1
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	60a3      	str	r3, [r4, #8]
 80102fa:	da16      	bge.n	801032a <_putc_r+0x52>
 80102fc:	69a2      	ldr	r2, [r4, #24]
 80102fe:	4293      	cmp	r3, r2
 8010300:	db02      	blt.n	8010308 <_putc_r+0x30>
 8010302:	b2eb      	uxtb	r3, r5
 8010304:	2b0a      	cmp	r3, #10
 8010306:	d110      	bne.n	801032a <_putc_r+0x52>
 8010308:	4622      	mov	r2, r4
 801030a:	4629      	mov	r1, r5
 801030c:	4630      	mov	r0, r6
 801030e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010312:	f000 b85b 	b.w	80103cc <__swbuf_r>
 8010316:	4b09      	ldr	r3, [pc, #36]	; (801033c <_putc_r+0x64>)
 8010318:	429c      	cmp	r4, r3
 801031a:	d101      	bne.n	8010320 <_putc_r+0x48>
 801031c:	68b4      	ldr	r4, [r6, #8]
 801031e:	e7e8      	b.n	80102f2 <_putc_r+0x1a>
 8010320:	4b07      	ldr	r3, [pc, #28]	; (8010340 <_putc_r+0x68>)
 8010322:	429c      	cmp	r4, r3
 8010324:	bf08      	it	eq
 8010326:	68f4      	ldreq	r4, [r6, #12]
 8010328:	e7e3      	b.n	80102f2 <_putc_r+0x1a>
 801032a:	6823      	ldr	r3, [r4, #0]
 801032c:	1c5a      	adds	r2, r3, #1
 801032e:	6022      	str	r2, [r4, #0]
 8010330:	701d      	strb	r5, [r3, #0]
 8010332:	b2e8      	uxtb	r0, r5
 8010334:	bd70      	pop	{r4, r5, r6, pc}
 8010336:	bf00      	nop
 8010338:	080118e4 	.word	0x080118e4
 801033c:	08011904 	.word	0x08011904
 8010340:	080118c4 	.word	0x080118c4

08010344 <__sread>:
 8010344:	b510      	push	{r4, lr}
 8010346:	460c      	mov	r4, r1
 8010348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801034c:	f000 fa86 	bl	801085c <_read_r>
 8010350:	2800      	cmp	r0, #0
 8010352:	bfab      	itete	ge
 8010354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010356:	89a3      	ldrhlt	r3, [r4, #12]
 8010358:	181b      	addge	r3, r3, r0
 801035a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801035e:	bfac      	ite	ge
 8010360:	6563      	strge	r3, [r4, #84]	; 0x54
 8010362:	81a3      	strhlt	r3, [r4, #12]
 8010364:	bd10      	pop	{r4, pc}

08010366 <__swrite>:
 8010366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801036a:	461f      	mov	r7, r3
 801036c:	898b      	ldrh	r3, [r1, #12]
 801036e:	05db      	lsls	r3, r3, #23
 8010370:	4605      	mov	r5, r0
 8010372:	460c      	mov	r4, r1
 8010374:	4616      	mov	r6, r2
 8010376:	d505      	bpl.n	8010384 <__swrite+0x1e>
 8010378:	2302      	movs	r3, #2
 801037a:	2200      	movs	r2, #0
 801037c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010380:	f000 f9b6 	bl	80106f0 <_lseek_r>
 8010384:	89a3      	ldrh	r3, [r4, #12]
 8010386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801038a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801038e:	81a3      	strh	r3, [r4, #12]
 8010390:	4632      	mov	r2, r6
 8010392:	463b      	mov	r3, r7
 8010394:	4628      	mov	r0, r5
 8010396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801039a:	f000 b869 	b.w	8010470 <_write_r>

0801039e <__sseek>:
 801039e:	b510      	push	{r4, lr}
 80103a0:	460c      	mov	r4, r1
 80103a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103a6:	f000 f9a3 	bl	80106f0 <_lseek_r>
 80103aa:	1c43      	adds	r3, r0, #1
 80103ac:	89a3      	ldrh	r3, [r4, #12]
 80103ae:	bf15      	itete	ne
 80103b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80103b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103ba:	81a3      	strheq	r3, [r4, #12]
 80103bc:	bf18      	it	ne
 80103be:	81a3      	strhne	r3, [r4, #12]
 80103c0:	bd10      	pop	{r4, pc}

080103c2 <__sclose>:
 80103c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103c6:	f000 b8d3 	b.w	8010570 <_close_r>
	...

080103cc <__swbuf_r>:
 80103cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ce:	460e      	mov	r6, r1
 80103d0:	4614      	mov	r4, r2
 80103d2:	4605      	mov	r5, r0
 80103d4:	b118      	cbz	r0, 80103de <__swbuf_r+0x12>
 80103d6:	6983      	ldr	r3, [r0, #24]
 80103d8:	b90b      	cbnz	r3, 80103de <__swbuf_r+0x12>
 80103da:	f7ff fad7 	bl	800f98c <__sinit>
 80103de:	4b21      	ldr	r3, [pc, #132]	; (8010464 <__swbuf_r+0x98>)
 80103e0:	429c      	cmp	r4, r3
 80103e2:	d12a      	bne.n	801043a <__swbuf_r+0x6e>
 80103e4:	686c      	ldr	r4, [r5, #4]
 80103e6:	69a3      	ldr	r3, [r4, #24]
 80103e8:	60a3      	str	r3, [r4, #8]
 80103ea:	89a3      	ldrh	r3, [r4, #12]
 80103ec:	071a      	lsls	r2, r3, #28
 80103ee:	d52e      	bpl.n	801044e <__swbuf_r+0x82>
 80103f0:	6923      	ldr	r3, [r4, #16]
 80103f2:	b363      	cbz	r3, 801044e <__swbuf_r+0x82>
 80103f4:	6923      	ldr	r3, [r4, #16]
 80103f6:	6820      	ldr	r0, [r4, #0]
 80103f8:	1ac0      	subs	r0, r0, r3
 80103fa:	6963      	ldr	r3, [r4, #20]
 80103fc:	b2f6      	uxtb	r6, r6
 80103fe:	4283      	cmp	r3, r0
 8010400:	4637      	mov	r7, r6
 8010402:	dc04      	bgt.n	801040e <__swbuf_r+0x42>
 8010404:	4621      	mov	r1, r4
 8010406:	4628      	mov	r0, r5
 8010408:	f000 f948 	bl	801069c <_fflush_r>
 801040c:	bb28      	cbnz	r0, 801045a <__swbuf_r+0x8e>
 801040e:	68a3      	ldr	r3, [r4, #8]
 8010410:	3b01      	subs	r3, #1
 8010412:	60a3      	str	r3, [r4, #8]
 8010414:	6823      	ldr	r3, [r4, #0]
 8010416:	1c5a      	adds	r2, r3, #1
 8010418:	6022      	str	r2, [r4, #0]
 801041a:	701e      	strb	r6, [r3, #0]
 801041c:	6963      	ldr	r3, [r4, #20]
 801041e:	3001      	adds	r0, #1
 8010420:	4283      	cmp	r3, r0
 8010422:	d004      	beq.n	801042e <__swbuf_r+0x62>
 8010424:	89a3      	ldrh	r3, [r4, #12]
 8010426:	07db      	lsls	r3, r3, #31
 8010428:	d519      	bpl.n	801045e <__swbuf_r+0x92>
 801042a:	2e0a      	cmp	r6, #10
 801042c:	d117      	bne.n	801045e <__swbuf_r+0x92>
 801042e:	4621      	mov	r1, r4
 8010430:	4628      	mov	r0, r5
 8010432:	f000 f933 	bl	801069c <_fflush_r>
 8010436:	b190      	cbz	r0, 801045e <__swbuf_r+0x92>
 8010438:	e00f      	b.n	801045a <__swbuf_r+0x8e>
 801043a:	4b0b      	ldr	r3, [pc, #44]	; (8010468 <__swbuf_r+0x9c>)
 801043c:	429c      	cmp	r4, r3
 801043e:	d101      	bne.n	8010444 <__swbuf_r+0x78>
 8010440:	68ac      	ldr	r4, [r5, #8]
 8010442:	e7d0      	b.n	80103e6 <__swbuf_r+0x1a>
 8010444:	4b09      	ldr	r3, [pc, #36]	; (801046c <__swbuf_r+0xa0>)
 8010446:	429c      	cmp	r4, r3
 8010448:	bf08      	it	eq
 801044a:	68ec      	ldreq	r4, [r5, #12]
 801044c:	e7cb      	b.n	80103e6 <__swbuf_r+0x1a>
 801044e:	4621      	mov	r1, r4
 8010450:	4628      	mov	r0, r5
 8010452:	f000 f81f 	bl	8010494 <__swsetup_r>
 8010456:	2800      	cmp	r0, #0
 8010458:	d0cc      	beq.n	80103f4 <__swbuf_r+0x28>
 801045a:	f04f 37ff 	mov.w	r7, #4294967295
 801045e:	4638      	mov	r0, r7
 8010460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010462:	bf00      	nop
 8010464:	080118e4 	.word	0x080118e4
 8010468:	08011904 	.word	0x08011904
 801046c:	080118c4 	.word	0x080118c4

08010470 <_write_r>:
 8010470:	b538      	push	{r3, r4, r5, lr}
 8010472:	4c07      	ldr	r4, [pc, #28]	; (8010490 <_write_r+0x20>)
 8010474:	4605      	mov	r5, r0
 8010476:	4608      	mov	r0, r1
 8010478:	4611      	mov	r1, r2
 801047a:	2200      	movs	r2, #0
 801047c:	6022      	str	r2, [r4, #0]
 801047e:	461a      	mov	r2, r3
 8010480:	f7f1 fda3 	bl	8001fca <_write>
 8010484:	1c43      	adds	r3, r0, #1
 8010486:	d102      	bne.n	801048e <_write_r+0x1e>
 8010488:	6823      	ldr	r3, [r4, #0]
 801048a:	b103      	cbz	r3, 801048e <_write_r+0x1e>
 801048c:	602b      	str	r3, [r5, #0]
 801048e:	bd38      	pop	{r3, r4, r5, pc}
 8010490:	200020b8 	.word	0x200020b8

08010494 <__swsetup_r>:
 8010494:	4b32      	ldr	r3, [pc, #200]	; (8010560 <__swsetup_r+0xcc>)
 8010496:	b570      	push	{r4, r5, r6, lr}
 8010498:	681d      	ldr	r5, [r3, #0]
 801049a:	4606      	mov	r6, r0
 801049c:	460c      	mov	r4, r1
 801049e:	b125      	cbz	r5, 80104aa <__swsetup_r+0x16>
 80104a0:	69ab      	ldr	r3, [r5, #24]
 80104a2:	b913      	cbnz	r3, 80104aa <__swsetup_r+0x16>
 80104a4:	4628      	mov	r0, r5
 80104a6:	f7ff fa71 	bl	800f98c <__sinit>
 80104aa:	4b2e      	ldr	r3, [pc, #184]	; (8010564 <__swsetup_r+0xd0>)
 80104ac:	429c      	cmp	r4, r3
 80104ae:	d10f      	bne.n	80104d0 <__swsetup_r+0x3c>
 80104b0:	686c      	ldr	r4, [r5, #4]
 80104b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	0715      	lsls	r5, r2, #28
 80104ba:	d42c      	bmi.n	8010516 <__swsetup_r+0x82>
 80104bc:	06d0      	lsls	r0, r2, #27
 80104be:	d411      	bmi.n	80104e4 <__swsetup_r+0x50>
 80104c0:	2209      	movs	r2, #9
 80104c2:	6032      	str	r2, [r6, #0]
 80104c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104c8:	81a3      	strh	r3, [r4, #12]
 80104ca:	f04f 30ff 	mov.w	r0, #4294967295
 80104ce:	e03e      	b.n	801054e <__swsetup_r+0xba>
 80104d0:	4b25      	ldr	r3, [pc, #148]	; (8010568 <__swsetup_r+0xd4>)
 80104d2:	429c      	cmp	r4, r3
 80104d4:	d101      	bne.n	80104da <__swsetup_r+0x46>
 80104d6:	68ac      	ldr	r4, [r5, #8]
 80104d8:	e7eb      	b.n	80104b2 <__swsetup_r+0x1e>
 80104da:	4b24      	ldr	r3, [pc, #144]	; (801056c <__swsetup_r+0xd8>)
 80104dc:	429c      	cmp	r4, r3
 80104de:	bf08      	it	eq
 80104e0:	68ec      	ldreq	r4, [r5, #12]
 80104e2:	e7e6      	b.n	80104b2 <__swsetup_r+0x1e>
 80104e4:	0751      	lsls	r1, r2, #29
 80104e6:	d512      	bpl.n	801050e <__swsetup_r+0x7a>
 80104e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104ea:	b141      	cbz	r1, 80104fe <__swsetup_r+0x6a>
 80104ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104f0:	4299      	cmp	r1, r3
 80104f2:	d002      	beq.n	80104fa <__swsetup_r+0x66>
 80104f4:	4630      	mov	r0, r6
 80104f6:	f7ff f905 	bl	800f704 <_free_r>
 80104fa:	2300      	movs	r3, #0
 80104fc:	6363      	str	r3, [r4, #52]	; 0x34
 80104fe:	89a3      	ldrh	r3, [r4, #12]
 8010500:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010504:	81a3      	strh	r3, [r4, #12]
 8010506:	2300      	movs	r3, #0
 8010508:	6063      	str	r3, [r4, #4]
 801050a:	6923      	ldr	r3, [r4, #16]
 801050c:	6023      	str	r3, [r4, #0]
 801050e:	89a3      	ldrh	r3, [r4, #12]
 8010510:	f043 0308 	orr.w	r3, r3, #8
 8010514:	81a3      	strh	r3, [r4, #12]
 8010516:	6923      	ldr	r3, [r4, #16]
 8010518:	b94b      	cbnz	r3, 801052e <__swsetup_r+0x9a>
 801051a:	89a3      	ldrh	r3, [r4, #12]
 801051c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010524:	d003      	beq.n	801052e <__swsetup_r+0x9a>
 8010526:	4621      	mov	r1, r4
 8010528:	4630      	mov	r0, r6
 801052a:	f000 f917 	bl	801075c <__smakebuf_r>
 801052e:	89a2      	ldrh	r2, [r4, #12]
 8010530:	f012 0301 	ands.w	r3, r2, #1
 8010534:	d00c      	beq.n	8010550 <__swsetup_r+0xbc>
 8010536:	2300      	movs	r3, #0
 8010538:	60a3      	str	r3, [r4, #8]
 801053a:	6963      	ldr	r3, [r4, #20]
 801053c:	425b      	negs	r3, r3
 801053e:	61a3      	str	r3, [r4, #24]
 8010540:	6923      	ldr	r3, [r4, #16]
 8010542:	b953      	cbnz	r3, 801055a <__swsetup_r+0xc6>
 8010544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010548:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801054c:	d1ba      	bne.n	80104c4 <__swsetup_r+0x30>
 801054e:	bd70      	pop	{r4, r5, r6, pc}
 8010550:	0792      	lsls	r2, r2, #30
 8010552:	bf58      	it	pl
 8010554:	6963      	ldrpl	r3, [r4, #20]
 8010556:	60a3      	str	r3, [r4, #8]
 8010558:	e7f2      	b.n	8010540 <__swsetup_r+0xac>
 801055a:	2000      	movs	r0, #0
 801055c:	e7f7      	b.n	801054e <__swsetup_r+0xba>
 801055e:	bf00      	nop
 8010560:	200001c4 	.word	0x200001c4
 8010564:	080118e4 	.word	0x080118e4
 8010568:	08011904 	.word	0x08011904
 801056c:	080118c4 	.word	0x080118c4

08010570 <_close_r>:
 8010570:	b538      	push	{r3, r4, r5, lr}
 8010572:	4c06      	ldr	r4, [pc, #24]	; (801058c <_close_r+0x1c>)
 8010574:	2300      	movs	r3, #0
 8010576:	4605      	mov	r5, r0
 8010578:	4608      	mov	r0, r1
 801057a:	6023      	str	r3, [r4, #0]
 801057c:	f7f1 fd41 	bl	8002002 <_close>
 8010580:	1c43      	adds	r3, r0, #1
 8010582:	d102      	bne.n	801058a <_close_r+0x1a>
 8010584:	6823      	ldr	r3, [r4, #0]
 8010586:	b103      	cbz	r3, 801058a <_close_r+0x1a>
 8010588:	602b      	str	r3, [r5, #0]
 801058a:	bd38      	pop	{r3, r4, r5, pc}
 801058c:	200020b8 	.word	0x200020b8

08010590 <__sflush_r>:
 8010590:	898a      	ldrh	r2, [r1, #12]
 8010592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010596:	4605      	mov	r5, r0
 8010598:	0710      	lsls	r0, r2, #28
 801059a:	460c      	mov	r4, r1
 801059c:	d458      	bmi.n	8010650 <__sflush_r+0xc0>
 801059e:	684b      	ldr	r3, [r1, #4]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	dc05      	bgt.n	80105b0 <__sflush_r+0x20>
 80105a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	dc02      	bgt.n	80105b0 <__sflush_r+0x20>
 80105aa:	2000      	movs	r0, #0
 80105ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105b2:	2e00      	cmp	r6, #0
 80105b4:	d0f9      	beq.n	80105aa <__sflush_r+0x1a>
 80105b6:	2300      	movs	r3, #0
 80105b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80105bc:	682f      	ldr	r7, [r5, #0]
 80105be:	6a21      	ldr	r1, [r4, #32]
 80105c0:	602b      	str	r3, [r5, #0]
 80105c2:	d032      	beq.n	801062a <__sflush_r+0x9a>
 80105c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80105c6:	89a3      	ldrh	r3, [r4, #12]
 80105c8:	075a      	lsls	r2, r3, #29
 80105ca:	d505      	bpl.n	80105d8 <__sflush_r+0x48>
 80105cc:	6863      	ldr	r3, [r4, #4]
 80105ce:	1ac0      	subs	r0, r0, r3
 80105d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105d2:	b10b      	cbz	r3, 80105d8 <__sflush_r+0x48>
 80105d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80105d6:	1ac0      	subs	r0, r0, r3
 80105d8:	2300      	movs	r3, #0
 80105da:	4602      	mov	r2, r0
 80105dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105de:	6a21      	ldr	r1, [r4, #32]
 80105e0:	4628      	mov	r0, r5
 80105e2:	47b0      	blx	r6
 80105e4:	1c43      	adds	r3, r0, #1
 80105e6:	89a3      	ldrh	r3, [r4, #12]
 80105e8:	d106      	bne.n	80105f8 <__sflush_r+0x68>
 80105ea:	6829      	ldr	r1, [r5, #0]
 80105ec:	291d      	cmp	r1, #29
 80105ee:	d848      	bhi.n	8010682 <__sflush_r+0xf2>
 80105f0:	4a29      	ldr	r2, [pc, #164]	; (8010698 <__sflush_r+0x108>)
 80105f2:	40ca      	lsrs	r2, r1
 80105f4:	07d6      	lsls	r6, r2, #31
 80105f6:	d544      	bpl.n	8010682 <__sflush_r+0xf2>
 80105f8:	2200      	movs	r2, #0
 80105fa:	6062      	str	r2, [r4, #4]
 80105fc:	04d9      	lsls	r1, r3, #19
 80105fe:	6922      	ldr	r2, [r4, #16]
 8010600:	6022      	str	r2, [r4, #0]
 8010602:	d504      	bpl.n	801060e <__sflush_r+0x7e>
 8010604:	1c42      	adds	r2, r0, #1
 8010606:	d101      	bne.n	801060c <__sflush_r+0x7c>
 8010608:	682b      	ldr	r3, [r5, #0]
 801060a:	b903      	cbnz	r3, 801060e <__sflush_r+0x7e>
 801060c:	6560      	str	r0, [r4, #84]	; 0x54
 801060e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010610:	602f      	str	r7, [r5, #0]
 8010612:	2900      	cmp	r1, #0
 8010614:	d0c9      	beq.n	80105aa <__sflush_r+0x1a>
 8010616:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801061a:	4299      	cmp	r1, r3
 801061c:	d002      	beq.n	8010624 <__sflush_r+0x94>
 801061e:	4628      	mov	r0, r5
 8010620:	f7ff f870 	bl	800f704 <_free_r>
 8010624:	2000      	movs	r0, #0
 8010626:	6360      	str	r0, [r4, #52]	; 0x34
 8010628:	e7c0      	b.n	80105ac <__sflush_r+0x1c>
 801062a:	2301      	movs	r3, #1
 801062c:	4628      	mov	r0, r5
 801062e:	47b0      	blx	r6
 8010630:	1c41      	adds	r1, r0, #1
 8010632:	d1c8      	bne.n	80105c6 <__sflush_r+0x36>
 8010634:	682b      	ldr	r3, [r5, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d0c5      	beq.n	80105c6 <__sflush_r+0x36>
 801063a:	2b1d      	cmp	r3, #29
 801063c:	d001      	beq.n	8010642 <__sflush_r+0xb2>
 801063e:	2b16      	cmp	r3, #22
 8010640:	d101      	bne.n	8010646 <__sflush_r+0xb6>
 8010642:	602f      	str	r7, [r5, #0]
 8010644:	e7b1      	b.n	80105aa <__sflush_r+0x1a>
 8010646:	89a3      	ldrh	r3, [r4, #12]
 8010648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801064c:	81a3      	strh	r3, [r4, #12]
 801064e:	e7ad      	b.n	80105ac <__sflush_r+0x1c>
 8010650:	690f      	ldr	r7, [r1, #16]
 8010652:	2f00      	cmp	r7, #0
 8010654:	d0a9      	beq.n	80105aa <__sflush_r+0x1a>
 8010656:	0793      	lsls	r3, r2, #30
 8010658:	680e      	ldr	r6, [r1, #0]
 801065a:	bf08      	it	eq
 801065c:	694b      	ldreq	r3, [r1, #20]
 801065e:	600f      	str	r7, [r1, #0]
 8010660:	bf18      	it	ne
 8010662:	2300      	movne	r3, #0
 8010664:	eba6 0807 	sub.w	r8, r6, r7
 8010668:	608b      	str	r3, [r1, #8]
 801066a:	f1b8 0f00 	cmp.w	r8, #0
 801066e:	dd9c      	ble.n	80105aa <__sflush_r+0x1a>
 8010670:	4643      	mov	r3, r8
 8010672:	463a      	mov	r2, r7
 8010674:	6a21      	ldr	r1, [r4, #32]
 8010676:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010678:	4628      	mov	r0, r5
 801067a:	47b0      	blx	r6
 801067c:	2800      	cmp	r0, #0
 801067e:	dc06      	bgt.n	801068e <__sflush_r+0xfe>
 8010680:	89a3      	ldrh	r3, [r4, #12]
 8010682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010686:	81a3      	strh	r3, [r4, #12]
 8010688:	f04f 30ff 	mov.w	r0, #4294967295
 801068c:	e78e      	b.n	80105ac <__sflush_r+0x1c>
 801068e:	4407      	add	r7, r0
 8010690:	eba8 0800 	sub.w	r8, r8, r0
 8010694:	e7e9      	b.n	801066a <__sflush_r+0xda>
 8010696:	bf00      	nop
 8010698:	20400001 	.word	0x20400001

0801069c <_fflush_r>:
 801069c:	b538      	push	{r3, r4, r5, lr}
 801069e:	690b      	ldr	r3, [r1, #16]
 80106a0:	4605      	mov	r5, r0
 80106a2:	460c      	mov	r4, r1
 80106a4:	b1db      	cbz	r3, 80106de <_fflush_r+0x42>
 80106a6:	b118      	cbz	r0, 80106b0 <_fflush_r+0x14>
 80106a8:	6983      	ldr	r3, [r0, #24]
 80106aa:	b90b      	cbnz	r3, 80106b0 <_fflush_r+0x14>
 80106ac:	f7ff f96e 	bl	800f98c <__sinit>
 80106b0:	4b0c      	ldr	r3, [pc, #48]	; (80106e4 <_fflush_r+0x48>)
 80106b2:	429c      	cmp	r4, r3
 80106b4:	d109      	bne.n	80106ca <_fflush_r+0x2e>
 80106b6:	686c      	ldr	r4, [r5, #4]
 80106b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106bc:	b17b      	cbz	r3, 80106de <_fflush_r+0x42>
 80106be:	4621      	mov	r1, r4
 80106c0:	4628      	mov	r0, r5
 80106c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106c6:	f7ff bf63 	b.w	8010590 <__sflush_r>
 80106ca:	4b07      	ldr	r3, [pc, #28]	; (80106e8 <_fflush_r+0x4c>)
 80106cc:	429c      	cmp	r4, r3
 80106ce:	d101      	bne.n	80106d4 <_fflush_r+0x38>
 80106d0:	68ac      	ldr	r4, [r5, #8]
 80106d2:	e7f1      	b.n	80106b8 <_fflush_r+0x1c>
 80106d4:	4b05      	ldr	r3, [pc, #20]	; (80106ec <_fflush_r+0x50>)
 80106d6:	429c      	cmp	r4, r3
 80106d8:	bf08      	it	eq
 80106da:	68ec      	ldreq	r4, [r5, #12]
 80106dc:	e7ec      	b.n	80106b8 <_fflush_r+0x1c>
 80106de:	2000      	movs	r0, #0
 80106e0:	bd38      	pop	{r3, r4, r5, pc}
 80106e2:	bf00      	nop
 80106e4:	080118e4 	.word	0x080118e4
 80106e8:	08011904 	.word	0x08011904
 80106ec:	080118c4 	.word	0x080118c4

080106f0 <_lseek_r>:
 80106f0:	b538      	push	{r3, r4, r5, lr}
 80106f2:	4c07      	ldr	r4, [pc, #28]	; (8010710 <_lseek_r+0x20>)
 80106f4:	4605      	mov	r5, r0
 80106f6:	4608      	mov	r0, r1
 80106f8:	4611      	mov	r1, r2
 80106fa:	2200      	movs	r2, #0
 80106fc:	6022      	str	r2, [r4, #0]
 80106fe:	461a      	mov	r2, r3
 8010700:	f7f1 fca6 	bl	8002050 <_lseek>
 8010704:	1c43      	adds	r3, r0, #1
 8010706:	d102      	bne.n	801070e <_lseek_r+0x1e>
 8010708:	6823      	ldr	r3, [r4, #0]
 801070a:	b103      	cbz	r3, 801070e <_lseek_r+0x1e>
 801070c:	602b      	str	r3, [r5, #0]
 801070e:	bd38      	pop	{r3, r4, r5, pc}
 8010710:	200020b8 	.word	0x200020b8

08010714 <__swhatbuf_r>:
 8010714:	b570      	push	{r4, r5, r6, lr}
 8010716:	460e      	mov	r6, r1
 8010718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801071c:	2900      	cmp	r1, #0
 801071e:	b096      	sub	sp, #88	; 0x58
 8010720:	4614      	mov	r4, r2
 8010722:	461d      	mov	r5, r3
 8010724:	da07      	bge.n	8010736 <__swhatbuf_r+0x22>
 8010726:	2300      	movs	r3, #0
 8010728:	602b      	str	r3, [r5, #0]
 801072a:	89b3      	ldrh	r3, [r6, #12]
 801072c:	061a      	lsls	r2, r3, #24
 801072e:	d410      	bmi.n	8010752 <__swhatbuf_r+0x3e>
 8010730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010734:	e00e      	b.n	8010754 <__swhatbuf_r+0x40>
 8010736:	466a      	mov	r2, sp
 8010738:	f000 f8a2 	bl	8010880 <_fstat_r>
 801073c:	2800      	cmp	r0, #0
 801073e:	dbf2      	blt.n	8010726 <__swhatbuf_r+0x12>
 8010740:	9a01      	ldr	r2, [sp, #4]
 8010742:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010746:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801074a:	425a      	negs	r2, r3
 801074c:	415a      	adcs	r2, r3
 801074e:	602a      	str	r2, [r5, #0]
 8010750:	e7ee      	b.n	8010730 <__swhatbuf_r+0x1c>
 8010752:	2340      	movs	r3, #64	; 0x40
 8010754:	2000      	movs	r0, #0
 8010756:	6023      	str	r3, [r4, #0]
 8010758:	b016      	add	sp, #88	; 0x58
 801075a:	bd70      	pop	{r4, r5, r6, pc}

0801075c <__smakebuf_r>:
 801075c:	898b      	ldrh	r3, [r1, #12]
 801075e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010760:	079d      	lsls	r5, r3, #30
 8010762:	4606      	mov	r6, r0
 8010764:	460c      	mov	r4, r1
 8010766:	d507      	bpl.n	8010778 <__smakebuf_r+0x1c>
 8010768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801076c:	6023      	str	r3, [r4, #0]
 801076e:	6123      	str	r3, [r4, #16]
 8010770:	2301      	movs	r3, #1
 8010772:	6163      	str	r3, [r4, #20]
 8010774:	b002      	add	sp, #8
 8010776:	bd70      	pop	{r4, r5, r6, pc}
 8010778:	ab01      	add	r3, sp, #4
 801077a:	466a      	mov	r2, sp
 801077c:	f7ff ffca 	bl	8010714 <__swhatbuf_r>
 8010780:	9900      	ldr	r1, [sp, #0]
 8010782:	4605      	mov	r5, r0
 8010784:	4630      	mov	r0, r6
 8010786:	f7ff f80b 	bl	800f7a0 <_malloc_r>
 801078a:	b948      	cbnz	r0, 80107a0 <__smakebuf_r+0x44>
 801078c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010790:	059a      	lsls	r2, r3, #22
 8010792:	d4ef      	bmi.n	8010774 <__smakebuf_r+0x18>
 8010794:	f023 0303 	bic.w	r3, r3, #3
 8010798:	f043 0302 	orr.w	r3, r3, #2
 801079c:	81a3      	strh	r3, [r4, #12]
 801079e:	e7e3      	b.n	8010768 <__smakebuf_r+0xc>
 80107a0:	4b0d      	ldr	r3, [pc, #52]	; (80107d8 <__smakebuf_r+0x7c>)
 80107a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80107a4:	89a3      	ldrh	r3, [r4, #12]
 80107a6:	6020      	str	r0, [r4, #0]
 80107a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107ac:	81a3      	strh	r3, [r4, #12]
 80107ae:	9b00      	ldr	r3, [sp, #0]
 80107b0:	6163      	str	r3, [r4, #20]
 80107b2:	9b01      	ldr	r3, [sp, #4]
 80107b4:	6120      	str	r0, [r4, #16]
 80107b6:	b15b      	cbz	r3, 80107d0 <__smakebuf_r+0x74>
 80107b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107bc:	4630      	mov	r0, r6
 80107be:	f000 f871 	bl	80108a4 <_isatty_r>
 80107c2:	b128      	cbz	r0, 80107d0 <__smakebuf_r+0x74>
 80107c4:	89a3      	ldrh	r3, [r4, #12]
 80107c6:	f023 0303 	bic.w	r3, r3, #3
 80107ca:	f043 0301 	orr.w	r3, r3, #1
 80107ce:	81a3      	strh	r3, [r4, #12]
 80107d0:	89a3      	ldrh	r3, [r4, #12]
 80107d2:	431d      	orrs	r5, r3
 80107d4:	81a5      	strh	r5, [r4, #12]
 80107d6:	e7cd      	b.n	8010774 <__smakebuf_r+0x18>
 80107d8:	0800f955 	.word	0x0800f955

080107dc <memmove>:
 80107dc:	4288      	cmp	r0, r1
 80107de:	b510      	push	{r4, lr}
 80107e0:	eb01 0302 	add.w	r3, r1, r2
 80107e4:	d807      	bhi.n	80107f6 <memmove+0x1a>
 80107e6:	1e42      	subs	r2, r0, #1
 80107e8:	4299      	cmp	r1, r3
 80107ea:	d00a      	beq.n	8010802 <memmove+0x26>
 80107ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80107f4:	e7f8      	b.n	80107e8 <memmove+0xc>
 80107f6:	4283      	cmp	r3, r0
 80107f8:	d9f5      	bls.n	80107e6 <memmove+0xa>
 80107fa:	1881      	adds	r1, r0, r2
 80107fc:	1ad2      	subs	r2, r2, r3
 80107fe:	42d3      	cmn	r3, r2
 8010800:	d100      	bne.n	8010804 <memmove+0x28>
 8010802:	bd10      	pop	{r4, pc}
 8010804:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010808:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801080c:	e7f7      	b.n	80107fe <memmove+0x22>

0801080e <_realloc_r>:
 801080e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010810:	4607      	mov	r7, r0
 8010812:	4614      	mov	r4, r2
 8010814:	460e      	mov	r6, r1
 8010816:	b921      	cbnz	r1, 8010822 <_realloc_r+0x14>
 8010818:	4611      	mov	r1, r2
 801081a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801081e:	f7fe bfbf 	b.w	800f7a0 <_malloc_r>
 8010822:	b922      	cbnz	r2, 801082e <_realloc_r+0x20>
 8010824:	f7fe ff6e 	bl	800f704 <_free_r>
 8010828:	4625      	mov	r5, r4
 801082a:	4628      	mov	r0, r5
 801082c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801082e:	f000 f849 	bl	80108c4 <_malloc_usable_size_r>
 8010832:	42a0      	cmp	r0, r4
 8010834:	d20f      	bcs.n	8010856 <_realloc_r+0x48>
 8010836:	4621      	mov	r1, r4
 8010838:	4638      	mov	r0, r7
 801083a:	f7fe ffb1 	bl	800f7a0 <_malloc_r>
 801083e:	4605      	mov	r5, r0
 8010840:	2800      	cmp	r0, #0
 8010842:	d0f2      	beq.n	801082a <_realloc_r+0x1c>
 8010844:	4631      	mov	r1, r6
 8010846:	4622      	mov	r2, r4
 8010848:	f7fe ff48 	bl	800f6dc <memcpy>
 801084c:	4631      	mov	r1, r6
 801084e:	4638      	mov	r0, r7
 8010850:	f7fe ff58 	bl	800f704 <_free_r>
 8010854:	e7e9      	b.n	801082a <_realloc_r+0x1c>
 8010856:	4635      	mov	r5, r6
 8010858:	e7e7      	b.n	801082a <_realloc_r+0x1c>
	...

0801085c <_read_r>:
 801085c:	b538      	push	{r3, r4, r5, lr}
 801085e:	4c07      	ldr	r4, [pc, #28]	; (801087c <_read_r+0x20>)
 8010860:	4605      	mov	r5, r0
 8010862:	4608      	mov	r0, r1
 8010864:	4611      	mov	r1, r2
 8010866:	2200      	movs	r2, #0
 8010868:	6022      	str	r2, [r4, #0]
 801086a:	461a      	mov	r2, r3
 801086c:	f7f1 fb90 	bl	8001f90 <_read>
 8010870:	1c43      	adds	r3, r0, #1
 8010872:	d102      	bne.n	801087a <_read_r+0x1e>
 8010874:	6823      	ldr	r3, [r4, #0]
 8010876:	b103      	cbz	r3, 801087a <_read_r+0x1e>
 8010878:	602b      	str	r3, [r5, #0]
 801087a:	bd38      	pop	{r3, r4, r5, pc}
 801087c:	200020b8 	.word	0x200020b8

08010880 <_fstat_r>:
 8010880:	b538      	push	{r3, r4, r5, lr}
 8010882:	4c07      	ldr	r4, [pc, #28]	; (80108a0 <_fstat_r+0x20>)
 8010884:	2300      	movs	r3, #0
 8010886:	4605      	mov	r5, r0
 8010888:	4608      	mov	r0, r1
 801088a:	4611      	mov	r1, r2
 801088c:	6023      	str	r3, [r4, #0]
 801088e:	f7f1 fbc4 	bl	800201a <_fstat>
 8010892:	1c43      	adds	r3, r0, #1
 8010894:	d102      	bne.n	801089c <_fstat_r+0x1c>
 8010896:	6823      	ldr	r3, [r4, #0]
 8010898:	b103      	cbz	r3, 801089c <_fstat_r+0x1c>
 801089a:	602b      	str	r3, [r5, #0]
 801089c:	bd38      	pop	{r3, r4, r5, pc}
 801089e:	bf00      	nop
 80108a0:	200020b8 	.word	0x200020b8

080108a4 <_isatty_r>:
 80108a4:	b538      	push	{r3, r4, r5, lr}
 80108a6:	4c06      	ldr	r4, [pc, #24]	; (80108c0 <_isatty_r+0x1c>)
 80108a8:	2300      	movs	r3, #0
 80108aa:	4605      	mov	r5, r0
 80108ac:	4608      	mov	r0, r1
 80108ae:	6023      	str	r3, [r4, #0]
 80108b0:	f7f1 fbc3 	bl	800203a <_isatty>
 80108b4:	1c43      	adds	r3, r0, #1
 80108b6:	d102      	bne.n	80108be <_isatty_r+0x1a>
 80108b8:	6823      	ldr	r3, [r4, #0]
 80108ba:	b103      	cbz	r3, 80108be <_isatty_r+0x1a>
 80108bc:	602b      	str	r3, [r5, #0]
 80108be:	bd38      	pop	{r3, r4, r5, pc}
 80108c0:	200020b8 	.word	0x200020b8

080108c4 <_malloc_usable_size_r>:
 80108c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108c8:	1f18      	subs	r0, r3, #4
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	bfbc      	itt	lt
 80108ce:	580b      	ldrlt	r3, [r1, r0]
 80108d0:	18c0      	addlt	r0, r0, r3
 80108d2:	4770      	bx	lr

080108d4 <_init>:
 80108d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108d6:	bf00      	nop
 80108d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108da:	bc08      	pop	{r3}
 80108dc:	469e      	mov	lr, r3
 80108de:	4770      	bx	lr

080108e0 <_fini>:
 80108e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108e2:	bf00      	nop
 80108e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108e6:	bc08      	pop	{r3}
 80108e8:	469e      	mov	lr, r3
 80108ea:	4770      	bx	lr
